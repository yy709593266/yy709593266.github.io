{"meta":{"title":"袁媛-仙女很忙","subtitle":"仙女也要码砖不像话","description":null,"author":"袁媛","url":"http://yy709593266.github.io/blog"},"pages":[{"title":"categories","date":"2016-06-11T07:05:06.000Z","updated":"2016-06-11T07:09:58.000Z","comments":true,"path":"categories/index.html","permalink":"http://yy709593266.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2016-06-11T07:03:09.000Z","updated":"2016-06-11T07:03:10.000Z","comments":true,"path":"about/index.html","permalink":"http://yy709593266.github.io/blog/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-06-11T07:05:20.000Z","updated":"2016-06-11T07:09:40.000Z","comments":true,"path":"tags/index.html","permalink":"http://yy709593266.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"20180605-ES6Proxy应用","slug":"20180605-ES6Proxy应用","date":"2018-06-05T15:14:39.000Z","updated":"2018-06-06T14:17:02.000Z","comments":true,"path":"2018/06/05/20180605-ES6Proxy应用/","link":"","permalink":"http://yy709593266.github.io/blog/2018/06/05/20180605-ES6Proxy应用/","excerpt":"proxy从字面意思就能看出：代理，也就是代理操作，在目标前进行一次“拦截”，外界对该对象的访问都必须先通过这一层“拦截”从而对外界的访问进行一个过滤处理。","text":"proxy从字面意思就能看出：代理，也就是代理操作，在目标前进行一次“拦截”，外界对该对象的访问都必须先通过这一层“拦截”从而对外界的访问进行一个过滤处理。 Proxy构造函数既然Proxy是构造函数，那就可以生成Proxy实例来进行使用new Proxy(target, handler)，其中target表示所要拦截的目标对象，handler也是一个对象，用来定制拦截行为 来源","categories":[],"tags":[{"name":"-ES6","slug":"ES6","permalink":"http://yy709593266.github.io/blog/tags/ES6/"}]},{"title":"Node基础","slug":"20180603-node基础","date":"2018-06-03T13:47:09.000Z","updated":"2018-07-31T14:14:37.000Z","comments":true,"path":"2018/06/03/20180603-node基础/","link":"","permalink":"http://yy709593266.github.io/blog/2018/06/03/20180603-node基础/","excerpt":"Node出来了这么久，我到现在都还没明白它是为啥出来的，到底为了解决什么问题，怎么用，什么情况下要用，工作也快一年了，感觉自己并没有什么长进，所以想下定决心好好看看Node到底是个什么神奇的东西，虽然现在还没用过，至少别人问起来能说一两句","text":"Node出来了这么久，我到现在都还没明白它是为啥出来的，到底为了解决什么问题，怎么用，什么情况下要用，工作也快一年了，感觉自己并没有什么长进，所以想下定决心好好看看Node到底是个什么神奇的东西，虽然现在还没用过，至少别人问起来能说一两句 Node出现背景背景http请求由客户端（浏览器，app…）发送请求到服务器（apache，tomcat，IIS…），服务器从数据库（mysql，oracle…）拿取数据，或将数据存入数据库（数据传输I／O），服务器拿到数据以后对数据进行解析并传给客户端页面展示。我们想要做的优化就是要缩短客户端发送请求到接收请求之间的时间，是提升web服务器性能的关键。平常开发的过程中，发送请求越快当然时长越短，但是这个请求快慢我们没法控制，因为这个直接由用户的网速决定；所以我们只能着手控制服务器，可以提高服务器带宽，或者DNS加速的方式来加速响应速度，请求时长自然会缩短，但是由于成本也不会无上限的提高带宽；还有就是通过代码的算法更加优秀来让响应速度更快，这个就取决于程序猿们了；设计模式上使用多线程，即发送一个请求就开启一个线程，但是也不是越多越好，会占内存，可能造成内存阻塞，因此线程数也要做合理的限制。例如：饭店来一个客户就有一个服务员一对一服务，来一万个就有一万个服务员一对一服务，两个客户之间不会有冲突，虽然服务员能一对一服务，但是客户来吃饭，点餐，厨师只有一百个，这里就崩了，也就是服务器和数据库之间I／O阻塞了，因为数据库从磁盘中读取数据的速度都是有上限的。很多大型的项目，在后期都会遇到这种I／O阻塞问题，现在有很多解决方式（分布式…优化磁盘读取），但是无论如何优化，磁盘的读取都是有上限，任务巨多的时候还是会I／O阻塞。Ryan Dahl（Node爸比）的工作就是写高性能的web服务，对于高性能，异步I／O、事件驱动是基本原则，但是用C/C++写就太痛苦了。于是他开始设想用高级语言开发Web服务。他评估了很多种高级语言，发现很多语言虽然同时提供了同步I／O和异步I／O，但是开发人员一旦用了同步I／O，他们就再也懒得写异步I／O了，所以，最终，Node爸比选择了JavaScript，因为JavaScript是单线程（所以，Node也是）执行，根本不能进行同步I／O操作，JavaScript的这一“缺陷”导致了它只能使用异步I／O。 三大特点Node的三大特点就是如何解决服务器高性能瓶颈问题：单线程，非阻塞I／O以及事件驱动。具体怎么理解这三个特点呢？ 单线程Node不为每个客户连接创建新的线程，仅仅使用一个线程，当有用户连接就触发一个内部事件，通过非阻塞I／O和事件驱动机制让整个程序宏观上并行。这样操作系统不再有创建和销毁线程的时间开销了。 非阻塞I／O要说什么是非阻塞I／O首先要知道什么是阻塞I／O：当在访问数据库取得数据的时候，传统的单线程机制整个线程将暂停下来，等待数据库返回结果才能执行后面的代码，也就是I／O阻塞了代码的执行。Node采用了非阻塞I／O机制，在执行了访问数据库的代码之后将立即转而执行后面的代码，把数据库返回结果的处理代码放在回调函数中。当某个I／O执行完毕，将以事件的形式通知执行I／O操作的线程执行回调函数。 事件驱动客户端请求建立连接，提交数据等行为会出发相应的事件，Node一个时刻只能执行一个事件回调函数，但是在执行一个事件回调函数的中途可以转而处理其他事件（比如又有新用户建立连接了）然后返回继续执行原事件的回调函数。不管是新用户的请求还是老用户的I／O完成，都将以事件方式加入事件环等待调度。举一个通俗点的例子，你在餐厅吃饭，如果当时店内生意比较好，你坐下来，服务员过来招待你，这时，另一桌也刚坐下并呼叫服务员。正常情况下，服务员肯定会想给你个菜单让你自己看看，看好了再叫他，接着去招呼那一桌的客人了，完了再给你端茶什么的。 Node学习之前V8引擎编程语言分为编译型语言和解释型语言两类，编译型语言在执行之前要先进行完全编译，而解释型语言一边编译一边执行，很明显解释型语言的执行速度慢于编译型语言，而javascript就是一种解释型脚本语言，而且，鉴于它是在前端执行，需要及时响应用户，所以要求它可以快速的解析以及执行。随着web相关技术的发展，javascript所要承担的工作任务也越来越多，早就超越了当初的“表单验证”的范畴，这就更需要快速的解析和执行js脚本，V8引擎就是为解决这一问题而生。v8引擎是一款专门对js语言进行解释和执行的流程虚拟机，如果把v8引擎嵌入到浏览器中，那么我们的js代码就能被浏览器所执行，这样，如果我们把v8引擎嵌入到Node环境中，那么我们的js代码就能被服务器所执行，所以只要将v8引擎嵌入到不同的宿主环境中都可以执行我们的js代码，这样js的应用也就越来越广泛（万能的js由来）。同时v8引擎没有同步I/O机制，且有强大的事件驱动机制，Node爸比2009年正式推出了基于JavaScript语言和V8引擎的开源Web服务器项目，命名为Node，最大的优势是借助JavaScript天生的事件驱动机制加V8高性能引擎，使编写高性能Web服务轻而易举，可以和系统进行交互。注意：Node不是语言，是一个平台（包装后的v8引擎），语言还是js语言。 web 所有的web资源都是放在web服务器中的 web服务器就是可以供外界访问web资源的一个软件 将web资源放到指定的目录当中，就可以通过对应的端口在浏览器中访问到例如：1234567//一个url地址http://www.cms.com:80/index.html//其中//`http`是访问的协议//`www.cms.com`是服务器的一个唯一域名，映射到的是一个IP地址//`80`是端口号：软件的门牌号`/index.html`等这些路径中有0或多个斜杠`/`隔开的字符表示服务器上的目录或文件 一个页面的js代码，图片等这些都是要通过http请求拿到的，因此雪碧图，webpack打包js代码文件这些能减少http请求。 http协议客户端发送什么格式的数据，服务器返回什么格式的数据，需要通过http协议来约束双方的规范，即约束请求和响应的规则，只有双方协议达成一致才好通信交流。http都是由请求和响应成对出现的。请求的发送方式： 通过浏览器地址 通过html中的表单（也就是接口访问） 通过a标签链接的href（点击跳转到新页面） src属性一般常用的http请求方式就是get和post两种：get请求会将参数显示在地址栏中，不安全，因此不能使用这种方式请求提交敏感信息；get方法有大小限制，最多只能提交1024个字符；get请求会保存在浏览器的浏览记录中；主要用来获取数据。post请求查询参数会以请求体的方式存在，不会出现在地址栏中，更安全；浏览数据不会被保存在浏览器的浏览记录中，相比get请求安全；可以传输的数据量大，可以达到2M；主要用来将数据传送到服务器端。 Node基础直接从官网下对应版本的Node直接安装，然后打开命令行软件输入node -v如果可以看到版本的版本说明就安装成功了。如何运行呢？1、直接进入node环境运行js代码。输入node进入node的环境，就可以进行编写并运行js代码了；2、运行js文件，首先新建一个js文件，然后在命令行中指定到相应的文件位置，直接node 文件名.js即可直接运行js代码了 模块化开发ES6之前，js存在几个问题：1、没有模块化2、官方标准的标准库比较少3、缺乏包管理系统在开发过程中我们知道，当程序设计的规模达到了一定的程度，则必须对其进行模块化。但是，这样做就有一个前提，就是大家必须以同样的方式编写模块，否则不同人有不同的编写方式就乱套了，于是模块化规范出来了。js中模块化规范有三种：commonJS,AMD,CMD commonJS commonJSAPI定义很多普通应用程序使用的API，它的终极目标是提供一个类似Java标准库，这样的话开发者可以使用它来编写应用程序，然后这些应用可以运行在不同的js解释器和不同的主机环境中。Node将js语言用于服务器端编程，那就必须使用模块化开发，因为在服务器端一定要与操作系统和其他的应用程序进行互动否则无法编程,也就是说Node是commonJS规范的实现。commonJS定义的模块分为三个部分：1、模块引用（require，用来引入外部模块）2、模块定义（exports用于导出当前模块的方法和变量）3、模块标识（module代表模块本身）在浏览器端commonJS规范运行会有一个问题，就是require模块加载都是同步的，这对服务器端不是一个问题，因为所有的模块都是放在本地硬盘可以同步加载完成，等待时间就是硬盘的读取时间，但是对于浏览器模块都放在服务器端，等待时间取决于网速的快慢，等待时间较长时会使得浏览器处于”假死“状态，因此浏览器的模块不能采用同步加载，只能采用异步加载，这就是AMD规范的诞生背景。 AMDcommonJS是主要为了JS在后端(Node)的表现制定的，他是不适合前端的，AMD(异步模块定义)出现了，它就主要为前端JS的表现制定规范。AMD采用异步方式加载模块，模块的加载不影响后面语句的运行，所依赖模块的语句都定义在一个回调函数中等待模块加载完成后执行，加载模块的方式和commonJS一样都是使用require，但是要求两个参数：12require([module], callback)//[module]就是要加载的模块，callback就是加载成功后的回调函数 一个简单的实例区别commonJS和AMD加载：12345678//commonJS加载模块var math = require(&apos;math&apos;)math.add(2, 3)//AMD加载模块require([&apos;math&apos;], function(math)&#123; math.add(2, 3)&#125;) 所以，很明显AMD比较适合浏览器环境，目前主要有两个js库实现了AMD规范：require.js和curl.js。require.js加载的模块采用AMD规范，模块必须采用特定的define()函数来定义：1、不依赖其他模块的模块定义12345678910//math.jsdefine(function()&#123; ... return ...&#125;)//加载方法//mian.jsrequire([&apos;math&apos;, function(math)&#123;&#125;]) 2、需要依赖其他模块的模块定义12345define([&apos;myLib&apos;], function(myLib)&#123; ... return ...&#125;)//当require函数加载这个模块时会先加载myLib.js文件 CMDCMD和AMD最明显的区别就是在模块定义时对依赖的处理不同1、AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块2、CMD推崇就近依赖，只有在用到某个模块的时候再去require看个例子1234567891011121314define(function(require, exports, module) &#123; console.log(&apos;require module: main&apos;); var mod1 = require(&apos;./mod1&apos;); mod1.hello(); var mod2 = require(&apos;./mod2&apos;); mod2.hello(); return &#123; hello: function() &#123; console.log(&apos;hello main&apos;); &#125; &#125;;&#125;); 上面代码使用SeaJS(CMD)和RequireJS(AMD)执行的效果：123456789101112131415//seaJSrequire module: mainrequire module: mod1hello mod1require module: mod2hello mod2hello main//requireJSrequire module: mod1require module: mod2require module: mainhello mod1hello mod2hello main 模块使用不管是哪种模块化方式，变量或者函数只能在当前模块中使用，如果想在别的模块中引用，必须有exports暴露与require引用。而且，只有被暴露的变量或者函数才能被其他模块引用，没有暴露的依然不能被引用（也就是说require进来的模块其实就是代表的暴露变量的那个模块的exports对象，所以才是暴什么用什么）。模块也分两种：文件模块和核心模块。引入的方法也所有不同：12345//引入我们自己写的文件模块，即使是在同一个文件路径下也要写上./require(&apos;./o1.js&apos;)//node自带的核心模块，就不用./路径require(&apos;http&apos;) exports和require如何而来其实每个Node文件都在最外层套了一个函数，这个函数有参数exports，require，module…，也是因为这样，我们才能通过require，exports这些方法来暴露和引用我们的模块。12345678910//在js文件中打印arguments，发现有值，说明这个文件其实是一个函数console.log(arguments)//通过arguments的callee方法找到这个函数本身，发现它确实是一个函数Functionconsole.log(arguments.callee)//以字符串形式打印出这个函数console.log(arguments.callee + &apos;&apos;)//此时会发现，其实就是在我们的文件内容的外部套了一层带有参数的函数，函数里面的内容还是我们写的文件内容 也就是说虽然看起来我们只写了里面的内容，但是事实上它是有匿名函数包含的一个函数。可以通过在函数中打印console.log(module)和console.log(exports)证实另外，exports和module.exports也有所区别1console.log(exports===module.exports)//true 从代码可以验证这俩是一样的，但是还是有区别的 123456789//01.jsexports.str = 'str'exports.fn = () =&gt; &#123; console.log('fn')&#125;//02.jslet rs = require('./01.js')console.log(rs) // &#123;str: 'str', fn: [Function]&#125; 1234567891011//01.jsexports = &#123; str: 'str', fn: ()=&gt;&#123; console.log('fn') &#125;&#125;//02.jslet rs = require('./01.js')console.log(rs) // &#123;&#125; 1234567891011//01.jsmodule.exports = &#123; str: 'str', fn: ()=&gt;&#123; console.log('fn') &#125;&#125;//02.jslet rs = require('./01.js')console.log(rs) // &#123;str: 'str', fn: [Function]&#125; 原理可以理解为： 123456789let module = new Object()module.exports = new Object(&#123;name: &apos;name1&apos;&#125;)let exports = module.exportsexports.name = &apos;kkk&apos;module.exports.name = &apos;kkk&apos;//所以exports通过点语法暴露和module.exports暴露时没有差别//如果exports暴露一个对象exports = &#123;name: &apos;kkk&apos;&#125;//这样其实就是等于将module和exports.module之间的联系切断了，内存地址直接发生了变化 因此，module.exports包含了exports全部的功能，exports不能暴露一个对象，只能使用点语法。 Node文件读写Buffer缓冲器js本身只能处理字符串数据类型，没有二进制数据类型，作为前端工程师我们也只是处理一些简单的字符串和DOM，不能处理二进制数据。 但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区，让 Node 处理二进制数据（实在太饿了，没忍住准备吃包方便面。。。） 文件系统写入文件Node用来服务器端就是要对文件进行交互，比如本地文件发送到客户端等。Node就通过fs模块（let fs = require(&#39;fs&#39;)）来和文件系统进行交互，该模块提供标准的API对文件进行读写等操作（这里就说到上面的Buffer了，fs模块读取文件内容返回的就是一个Buffer） 介绍这么多，用一下就会觉得很神奇： 12345678910111213let fs = require('fs')//Sync表示的都是同步的，会造成线程阻塞，可以使用相应的异步操作，这里只是test//打开02.js，对它进行写write操作//如果当前文件夹下没有02.js文件，就会自动创建一个//如果已经有了这个02.js文件，执行同步打开这个操作会删除02.js里面的内容let file = fs.openSync('02.js', 'w')//写入内容fs.writeFileSync(file, '我被写入内容啦！')//保存并退出fs.closeSync(file) 此时，控制台运行一下该文件–node 01.js，02.js文件中就会有我被写入内容啦！这句话，是不是很神奇。Node更多的API可以参考中文文档。为了再看一遍这个神奇的操作，下面再做一个异步的操作 12345678910111213141516171819202122232425let fs = require('fs')//异步操作//打开文件fs.open('02.js','w', (err, file)=&gt;&#123; if(!err)&#123; //写入内容 fs.writeFile(file, '我又被写入内容啦哈哈哈哈', (err)=&gt;&#123; if(!err)&#123; //写入成功 console.log('写入成功') &#125;else&#123; console.log('写入失败') &#125; //保存关闭文件 fs.close(file, (err)=&gt;&#123; if(!err)&#123; console.log('文件保存并关闭成功') &#125; &#125;) &#125;) &#125;else &#123; console.log('打开文件失败') &#125;&#125;) 此时打开02.js文件看到我又被写入内容啦哈哈哈哈。 异步操作看到了，很多的嵌套回调函数。异步的好处就是即使这里在回调函数fs.open中发生了错误（不管是哪一层），fs.open后面的代码依然可以运行，它只是内部出错了不影响外面代码的执行。 还有一种写入内容的方式：文件流式写入writeStream。相当于在文件和Node服务器之间建立通道，通道打开后可以一直写入内容，写入结束就关闭通道。 读取文件这里我们就不写同步的了，因为推荐都是使用异步方法： 1234567891011121314let fs = require('fs')fs.readFile('02.js', (err, data)=&gt;&#123; if(!err)&#123; //读取的文件都是Buffer二进制流 console.log(data) //&lt;Buffer e6 88 91 e5 8f 88 e8 a2 ab e5 86 99 e5 85 a5 e5 86 85 e5 ae b9 e5 95 a6 e5 93 88 e5 93 88 e5 93 88 e5 93 88&gt; //可以通过转换看看是不是我们02.js文件中的内容 console.log(data.toString()) //我又被写入内容啦哈哈哈哈 &#125;else &#123; &#125;&#125;) 这里只是读取了一个js文件，可以自行尝试读取一张图片等其他文件。读取文件同样存在一个流式读入方法readStream和pipe方法，通过通道将一个大文件切割成很多个小文件不断上传最后整合完成。 注意：针对图片，音频和视频这种文件格式，如果想看是否正确的读取了，不能简单的通过data.toString()方法，这样只能得到乱码，我们可以通过写入的方式新创建一个文件就能还原这个读取的文件了。 Node数据库前端开发很少能用到数据库，但是又不能不了解这些，So。。。 这里选用的数据库是MongoDB，因为听说它和Node配一脸。 一般我们常听到的那些什么mySQL、SQL Server、Oracle这些都是关系型数据库，通过一张张表来建立联系；非关系型数据库就没有行和列的概念，而是用JSON来存储数据的，比如MongoDB、Redis等。 MongoDB是的，它就是和我们的Node配一脸的非关系型数据库。 安装直接命令安装，因为官网不能直接下载，需要注册账号等乱七八糟的，所以这里找到了一个直接命令行安装的操作： 1、下载curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.2.1.tgz 2、解压tar -zxvf mongodb-osx-x86_64-3.2.1.tgz 3、复制解压之后的文件夹并新建一个文件夹mkdir -p mongodb，cp -R -n mongodb-osx-x86_64-3.2.1/ mongodb 4、环境变量配置：可以将解压后的文件夹直接放到usr/local目录中，然后在环境变量文件_bash.profile中添加mongodb的环境变量，最后source /Users/Yyuan/.bash_profile让刚才修改的环境变量生效。 5、此时echo $PATH可以看到刚才修改的环境变量了 6、此时mongo可以看到版本号啦。 启动1、首先找到地方新建一个文件夹data，并在里面新建一个文件夹db 2、命令行中输入mongod，可以看到结果信息，其中端口号是27017 3、可以看到默认路径是/data/db，打开终端直接输入命令sudo mkdir -p /data/db，到此就创建了符合默认路径的文件夹。如果想修改默认data/db的路径：mongod --dbpath /Users/Yyuan/database/mongodb/data/db。专家推荐，还是使用默认的路径比较好。 4、终端输入mongod发现报错 说明没有读写权限，加权限sudo chown Yyuan /data/db 5、如果遇到下面的错误 说明没有找到用来存放数据的那个文件夹：打开终端，返回到根目录下然后sudo mkdir -p /data/db新建默认路径文件夹 6、此时再输入mongod，并在浏览器中打开页面会看到下面一段话 1It looks like you are trying to access MongoDB over HTTP on the native driver port. 7、mongod是用来启动服务端的，另开一个窗口输入命令mongo打开命令行的客户端就可以来对数据库进行操作了，例如查看当前所有的数据库show dbs等等。。。 小试牛刀1、首先清个屏：cls哈哈 2、然后我们来查看下当前的所有数据库：show dbs 3、创建一个school数据库：use school（有就进入没有就创建了再进入） 4、不信，你可以看看你当前所在的位置db（这里就是school） 5、现在再来看看我们这个数据库中所有集合：show collections（刚创建的数据库当然啥也没有喽） 6、增：向school数据库中的学生集合student中插入一个学生，学生信息为{id: &#39;001&#39;, name: &#39;Jack&#39;, age: 18, sex: &#39;男&#39;}： 12&gt; db.student.insert(&#123;id: &quot;001&quot;, name: &quot;Jack&quot;, age: &quot;18&quot;, sex: &quot;男&quot;&#125;)WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;) //插入成功 7、查：查看当前student集合中所有数据 12&gt; db.student.find()&#123; &quot;_id&quot; : ObjectId(&quot;5b3b8fb05dc9003f0524034d&quot;), &quot;id&quot; : &quot;001&quot;, &quot;name&quot; : &quot;Jack&quot;, &quot;age&quot; : &quot;18&quot;, &quot;sex&quot; : &quot;男&quot; &#125; //查询结果 mongodb可视化工具上面那种命令行操作已经看到效果了，但是效率实在太低，所以这里使用一个可视化工具—-RoboMongo（傻瓜式安装，所以就不废话了），安装成功后create并connect后： 能看到我们刚才插入的信息了，在这里可以直接输入命令或者直接进行数据库的增删改查操作，具体的命令参考mongodb中文手册进行查看。 mongoose基本操作上面都是使用命令行或者可视化工具对数据库进行操作，这里使用node来对mongodb进行操作。 1、首先新建一个项目，并安装mongoose：npm init，npm i mongoose 2、项目中新建一个js文件，先对数据库进行连接：参考mongoose的API see！数据库连接成功啦！！！ 3、创建Schema（模式对象） 1234567891011//4、创建Schema模式对象let Schema = mongoose.Schemalet personSchema = new Schema(&#123; name: String, age: Number, sex: &#123; type: String, default: '男' &#125;, chat: String&#125;) 相当于创建了一个文档的规则，字段名和值类型等等 4、创建Model对象 12//5、创建Model对象let personModel = mongoose.model('people', personSchema) 相当于创建一个集合，集合符合之前创建的规则 5、插入文档 123456789101112131415161718192021222324//6、插入文档personModel.create(&#123; name: '袁媛', age: 27, sex: '女', chat: 'yuanyuan.com'&#125;, (err)=&gt;&#123; if(!err)&#123; console.log('插入成功') &#125; else &#123; throw err &#125;&#125;)personModel.create(&#123; name: '任佳鑫', age: 27, chat: 'renjiaxin.com'&#125;, (err)=&gt;&#123; if(!err)&#123; console.log('插入成功') &#125; else &#123; throw err &#125;&#125;) 这里插入了两条记录，一个男一个女，可以看到默认字段可以不传 6、node 01.js此时运行代码控制台打印插入成功，进入到可视化工具中看到m_data中已经有了一个名叫peoples的集合，其中有了两条记录。这样就实现了使用node来对mongodb进行操作。 Node常用模块之URL模块URL竟然也是一个模块？这个模块我们平时有用到么？我怎么不记得了。。。 当然有，开发过程中，我们需要把一个URL地址中的某个部分获取到的时候就用到了，URL模块提供很多API可以直接帮助我们获取我们想要的东西，处理我们想要的结果等等。 Node常用模块之HTTP模块创建http服务首先我们创建一个http服务器，并给客户端返回数据： 123456789101112//1、引入http模块let http = require('http')//2、创建服务器let server = http.createServer((req, res)=&gt;&#123; //req服务器请求，res服务器响应 res.writeHead(200, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end('hello')&#125;)//3、监听服务器是否被访问server.listen(80, '127.0.0.1') 命令行node 02.js运行下，发现报错了： 原因是因为端口号被占用了，将80端口换成8088：server.listen(8088, &#39;127.0.0.1&#39;)重新运行后成功了，浏览器中打开127.0.0.1:8088此时就能看到打印出来的hello了。 这里Content-Type值是html，所以如果在res.end之前加上这句res.write(&#39;&lt;h1&gt;哈咯&lt;/h1&gt;&#39;)，会发现浏览器中打印出了h1格式的文字，因此这里Content-Type还是比较重要的，反应了服务器响应的数据格式。 如果想看请求的数据，可以直接在打印console.log(req)来查看，例如在浏览器中输入127.0.0.1/kkk此时会看到打印出来的req.url是/kkk，前面的会被直接省略的。 Node中的路由像上面那种创建了一个服务器以后，不管浏览器地址怎么输入，虽然请求的url所有不同，但是显示的都是一样的值，因为服务器给出的响应值都是一样的。那怎么实现根据请求的url的不同来显示不同的文件，从而浏览器显示不同的内容呢？ 1234567891011121314151617181920212223242526272829303132333435//1、引入http模块let http = require('http')//引入fs模块读取文件let fs = require('fs')//2、创建服务器let server = http.createServer((req, res)=&gt;&#123; //req服务器请求，res服务器响应 if(req.url === '/page1.html')&#123; //根据路由显示page1.html页面 fs.readFile('./page1.html', (err, data)=&gt;&#123; if(!err)&#123; res.writeHead(200, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end(data) &#125; &#125;) &#125; else if(req.url === '/page2.html')&#123; //根据路由显示page2.html页面 fs.readFile('./page2.html', (err, data)=&gt;&#123; if(!err)&#123; res.writeHead(200, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end(data) &#125; &#125;) &#125; else if(req.url === '/')&#123; res.writeHead(200, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end('我是根目录127.0.0.1') &#125; else &#123; res.writeHead(404, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end('访问的页面不存在') &#125;&#125;)//3、监听服务器是否被访问server.listen(8088, '127.0.0.1') 此时，可以在浏览器中访问看看输入不同的地址返回的是什么内容。 Node中没有web容器，不是根据文件在文件夹中的路径来返回页面的，都是根据路由指定来返回内容的，只是在开发中我们都会将路由和文件路径对应上而已。 再来看一个例子：假如我们给page1.html加一个外联样式 1234567891011121314//page1.html&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"css/index.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;HTTP!!!!!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 重启一下服务器，打开127.0.0.1/page1.html发现css中的样式并没有作用，这就是因为在Node中没有web容器的意思，根据文件路径来找文件是不行的。因为加载css/index.css文件也是要发送请求的，因此还是需要Node来加载这个文件： 12345678910111213141516171819202122232425//1、引入http模块let http = require('http')let fs = require('fs')//2、创建服务器let server = http.createServer((req, res)=&gt;&#123; //req服务器请求，res服务器响应 if(req.url === '/page1.html')&#123; ...... res.end('我是根目录127.0.0.1') &#125; else if(req.url === '/css/index.css')&#123; fs.readFile('./css/index.css', (err, data)=&gt;&#123; if(!err)&#123; res.writeHead(200, &#123;'Content-Type': 'text/css'&#125;) res.end(data) &#125; &#125;) &#125; else &#123; res.writeHead(404, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end('访问的页面不存在') &#125;&#125;)//3、监听服务器是否被访问server.listen(8088, '127.0.0.1') 此时再访问127.0.0.1/page1.html就能看到已经应用了样式表的页面，图片，视频，js文件等资源都是如此。 发现问题了吧？如果文件资源很多的时候直接写这个加载就直接写死了。。。这个，后面再说。 http发送请求http表单提交太久没写原生表单了： 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;表单提交&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"http://127.0.0.1:8088\" method=\"get\"&gt; &lt;p&gt;姓名：&lt;input type=\"text\" name=\"name\"&gt;&lt;/p&gt; &lt;p&gt;年龄：&lt;input type=\"text\" name=\"age\"&gt;&lt;/p&gt; &lt;p&gt; &lt;input type=\"radio\" name=\"sex\" value=\"男\"&gt;男 &lt;input type=\"radio\" name=\"sex\" value=\"女\"&gt;女 &lt;/p&gt; &lt;input type=\"file\" name=\"photo\"&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 页面显示如下： 此时表单中写入内容后点击提交按钮就会发送请求就会跳转到服务器地址http://127.0.0.1:8088/?name=yuanyuan&amp;age=12&amp;sex=%E5%A5%B3&amp;photo=jay1.png通过get请求将内容发送出去，此时服务器就能拿到发送过来的内容。 12345678910111213141516171819202122let http = require('http')let fs = require('fs')let url = require('url')http.createServer((req, res)=&gt;&#123; if(req.url === '/page2.html')&#123; //根据路由显示page2.html页面 fs.readFile('./page2.html', (err, data)=&gt;&#123; if(!err)&#123; res.writeHead(200, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end(data) &#125; &#125;) &#125; else &#123; //点击表单跳转地址 let myUrl = url.parse(req.url, true) let queryObj = myUrl.query console.log(queryObj) //&#123; name: 'yuanyuan', age: '12', sex: '女', photo: 'jay1.png' &#125; res.writeHead(200, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end('提交ok') &#125;&#125;).listen(8088, '127.0.0.1') 这里拿到queryObj就是提交过来的内容，就可以对其进行下一步操作了。 表单上传图片处理上面表单上传了一张图片，服务器获取到的只是这个图片的名称，对于图片、视频音频等这些非普通类型的内容，就需要对这些内容进行一些处理了。通常我们会使用fs模块进行处理，但是在真实的开发环境中不会使用这种原生的方法，而是借助一些第三方的插件来实现，这里使用formidable（安装：npm i -S formidable）。 使用post请求来提交图片，因为一般提交内容到服务器都是使用的post方式，表单需要作一点修改： 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;表单提交&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"http://127.0.0.1:8088/postmsg\" method=\"post\" enctype=\"multipart/form-data\"&gt; ...... &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 同样我们的服务也要修改一下： 1234567891011121314151617181920212223242526272829303132let http = require('http')let fs = require('fs')let formidable = require('formidable')let util = require('util')http.createServer((req, res)=&gt;&#123; if(req.url === '/page2.html')&#123; //根据路由显示page2.html页面 fs.readFile('./page2.html', (err, data)=&gt;&#123; if(!err)&#123; res.writeHead(200, &#123;'Content-Type': 'text/html;charset=UTF-8'&#125;) res.end(data) &#125; &#125;) &#125; else &#123; //点击表单跳转地址 if(req.url === '/postmsg' &amp;&amp; req.method.toLowerCase() === 'post')&#123; //1、实例化对象 let form = new formidable.IncomingForm() //2、设置上传的文件路径 form.uploadDir = './uploads' //3、保存扩展名 form.keepExtensions = true; //4、获取表单内容 form.parse(req, (err, fields, files)=&gt;&#123; res.writeHead(200, &#123;'Content-Type': 'text/plain;charset=UTF-8'&#125;) res.write('received upload') res.end(util.inspect(&#123;fields: fields, files: files&#125;)) &#125;) &#125; &#125;&#125;).listen(8088, '127.0.0.1') 此时本地上传的图片就可以保存到uploads这个文件夹中了。 注意：如果你发现你点击提交后打印出来的files对象是一个空对象，这说明没有需要上传的内容，此时上传文件路径uploads也是空的，此时在form表单中加上enctype=&quot;multipart/form-data&quot;，表单中enctype=&quot;multipart/form-data&quot;的意思是设置表单的MIME编码。默认情况，这个编码格式是application/x-www-form-urlencoded，不能用于文件上传；只有使用了multipart/form-data，才能完整的传递文件数据，进行下面的操作。 Epress框架是目前最流行的Node后端框架之一，Express和Node的关系相当于jQuery和js之间的关系，但是它没有对Node进行二次抽象，只是在其之上扩展了对web应用所需的基本功能。类似的框架还有Koa.js、egg.js，hapi.js。 安装Express我们初始化一个项目npm init，并在项目中安装npm i express --save。 和学习vue一样，我们首先从引入express这个模块学习开始，到做项目的时候我们再用它的脚手架 基本使用路由123456789101112131415//01.jslet express = require('express')//1、创建express实例let app = express()//2、路由app.get('/', (req, res)=&gt;&#123; res.send('hello world')&#125;)app.get('/html5', (req, res)=&gt;&#123; res.send('hello html5')&#125;)app.listen(3000) 中断运行node 01.js，此时浏览器中打开根目录127.0.0.1:3000就能看到hello world，127.0.0.1:3000/html5看到hello html5了（还记得上面使用http模块创建服务器么，是不是很类似，只不过这里更加简介方便了）。 这里路由写的是什么浏览器中输入相应的地址就能返回回调函数中想要返回的内容。 托管静态文件当我们使用原生的Node来访问静态文件时，我们需要拿到访问的路由，通过对路由的分割处理拿到我们想要访问的文件名以及文件的后缀名，然后通过fs模块去所在当前文件夹中拿到想要访问的文件再显示在浏览器中（反正就是很麻烦。。。）。我们来看看使用express是多么简单明了的： 当前文件夹中存在一个名为public的文件夹，其中有一个index.html文件和名为css的文件夹且其中有一个文件index.css 12345678910let express = require('express')let app = express()app.use(express.static('./public'))app.get('/', (req, res)=&gt;&#123; res.send('hello world')&#125;)app.listen(3000) 此时访问127.0.0.1:3000这个根目录就会默认去访问public文件夹，由于访问文件夹时是默认寻找其中的index.html文件，所以也就是默认访问了public文件中的index.html文件；访问127.0.0.1:3000/css/index.css返回的是index.css文件的内容（是不是超级方便）。 如果不想根目录就访问静态资源的话 1app.use('/source',express.static('./public')) 这样一来，访问根目录还是返回hello world，127.0.0.1:3000/source才是访问静态资源的目录。具体可以查阅express的API。 注意：访问文件夹时默认寻找指定文件夹中的index.html文件。 模版引擎1、首先安装模版npm i ejs --save 2、服务代码 12345678910111213141516//01.jslet express = require('express')let app = express()//指定视图所在的位置app.set('views', './views')//注册模版引擎app.set('view engine', 'ejs')//使用模版引擎app.get('/', (req, res)=&gt;&#123; res.render('index', &#123;'lists': ['章三', 18, '篮球']&#125;)&#125;)app.listen(3000) 3、创建一个views的文件夹和01.js平级，里面创建一个index.ejs，内容如下 12345678910111213141516171819202122//index.ejs&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;% for(var i =0; i&lt;lists.length; i++)&#123; %&gt; &lt;li&gt;&lt;%= lists[i] %&gt;&lt;/li&gt; &lt;% &#125; %&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 4、浏览器中输入地址127.0.0.1:3000可以看到传入的lists以li的形式显示，表示页面中接收到了传入的参数并将其渲染。 应用生成器在开发vue项目时，我们使用vue-cli来生成项目的一个整体架构，express也有这样一个应用生成器（一般我称作脚手架），可以快速的生成一个项目的骨架。 安装以管理员身份全局安装：sudo npm i express-generator -g 全局安装好以后就可以使用其来生成一个项目了 注意：全局安装必须使用管理员身份，否则会报错 初始化工程1、上面已经全局安装了express的脚手架，找到一个你想要放置项目的目录，然后设置模版引擎（视图引擎）为ejs，项目名称为expressProject，命令行语句为：express --view=ejs expressProject 生成项目骨架如下 2、根据提示，进入项目中：cd expressProject 3、安装项目依赖：npm install 4、运行项目：DEBUG=expressprject:* npm start 5、运行成功后，浏览器中输入地址http://localhost:3000/访问项目成功页面： 6、打开项目的package.json文件，里面有一句 123\"scripts\": &#123; \"start\": \"node ./bin/www\"&#125; 说明以后我们启动项目只需要命令行中输入npm start或者node ./bin/www即可； 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// app.js文件let createError = require('http-errors');let express = require('express');let path = require('path');let cookieParser = require('cookie-parser');let logger = require('morgan');// 引入路由文件let indexRouter = require('./routes/index');let usersRouter = require('./routes/users');// 生成express实例let app = express();// view engine setup// 设置视图引擎app.set('views', path.join(__dirname, 'views'));app.set('view engine', 'ejs');// 使用引入的包文件app.use(logger('dev'));app.use(express.json());app.use(express.urlencoded(&#123; extended: false &#125;));app.use(cookieParser());app.use(express.static(path.join(__dirname, 'public')));// 让用户访问路由找到对应的文件app.use('/', indexRouter);app.use('/users', usersRouter);// catch 404 and forward to error handlerapp.use(function(req, res, next) &#123; next(createError(404));&#125;);// error handlerapp.use(function(err, req, res, next) &#123; // set locals, only providing error in development res.locals.message = err.message; res.locals.error = req.app.get('env') === 'development' ? err : &#123;&#125;; // render the error page res.status(err.status || 500); res.render('error');&#125;);module.exports = app; public：用来存放静态资源文件，例如图片资源，js文件以及css文件； routers：存放所有路由文件 到此为止通过上面的介绍了解了express生成器初始化一个项目，现在根据项目的基本配置往相应的文件夹中写入内容即可。","categories":[],"tags":[{"name":"-Node","slug":"Node","permalink":"http://yy709593266.github.io/blog/tags/Node/"}]},{"title":"vue生命周期钩子","slug":"20180529-vue生命周期钩子","date":"2018-05-29T13:53:09.000Z","updated":"2018-05-29T15:39:41.000Z","comments":true,"path":"2018/05/29/20180529-vue生命周期钩子/","link":"","permalink":"http://yy709593266.github.io/blog/2018/05/29/20180529-vue生命周期钩子/","excerpt":"从地产云到云眸的信息发布系统，再到现在的基线，一直都在用vue框架，感觉自己已经是个废人了，原生js也忘记的差不多了，vue也只是会用那么一丢丢，至于原理啊，生命周期啊这些都不是很懂，月底要交一篇经验案例，想了半天觉得自己啥经验案例也没有，只能好好理解一下vue的生命周期钩子，看能不能写一篇经验案例吧。","text":"从地产云到云眸的信息发布系统，再到现在的基线，一直都在用vue框架，感觉自己已经是个废人了，原生js也忘记的差不多了，vue也只是会用那么一丢丢，至于原理啊，生命周期啊这些都不是很懂，月底要交一篇经验案例，想了半天觉得自己啥经验案例也没有，只能好好理解一下vue的生命周期钩子，看能不能写一篇经验案例吧。 vue有哪些生命周期钩子要理解vue的生命周期钩子，首先要知道它到底有哪些生命周期钩子 beforeCreate created beforeMount mounted beforeUpdate updated beforeDestroy destroyed activated deactivatedvue的这些生命周期钩子有些是和组件相关的，比如activated和deactivated，常用的也就其中几个而已。 从生命钩子中看实例的属性和方法首先是有初始数据的DOM渲染，给实例定义一个方法和一个属性，在不同的生命周期钩子中打印其值：此时这里的arr是初始化定义的，如果此时的arr是通过接口异步获取的又会怎么样呢，下面是使用定时器来模拟的异步获取数据：到此为止我们可以看到，mounted里面我们只是对初始数据的DOM渲染完毕，可以获取到DOM这里需要注意的是，定时器setTimeout是被加在事件队列的最后来进行执行的，所以即使它是写在created中，但是还是mounted先执行，然后再执行setTimeout中的操作。从打印的值可以看出，异步接口获取值并赋值以后还是没有等到更新，此时我们可到另外一个钩子，那就是update，所以我们看看update之前和update之后是不是能监测到属性值的变化可以看到，update确实监测到了属性值的变化，那我们是不是就要在created中获取异步值，然后update这个值来进行操作呢？当然不是，因为如果在这个setTimeout后面还有一个setTimeout会对找个属性进行赋值，那此时update就会监测到两次属性值的变化，但是业务是只需要我们在最后一次更新后对拿到数据对页面进行操作，因此并不建议这样做。看下面一个使用了nextTick的例子为了在数据变化之后等待Vue完成更新DOM ，可以在数据变化之后立即使用Vue.nextTick(callback) 。这样回调函数在DOM更新完成后就会调用，主要用于对某一个数据的某一次具体的变化进行操作至于nextTick的具体的使用可以先看看vue的深入响应式原理","categories":[],"tags":[{"name":"-vue","slug":"vue","permalink":"http://yy709593266.github.io/blog/tags/vue/"}]},{"title":"vue+webpack如何配置","slug":"20180125-vue+webpack文件配置","date":"2018-01-25T14:27:40.000Z","updated":"2018-05-08T14:56:50.000Z","comments":true,"path":"2018/01/25/20180125-vue+webpack文件配置/","link":"","permalink":"http://yy709593266.github.io/blog/2018/01/25/20180125-vue+webpack文件配置/","excerpt":"通常，在新建一个项目的时候，我都是用直接用vue的脚手架来生成的，然后在里面添加内容即可。其实，对于它自动生成的东西我是不太懂的，也就只会写一些页面啊路由什么的，自动生成的一些webpack的配置之类的如果根据项目需求修改配置的话，我是一大脸懵逼的，这里不使用vue的脚手架，而是从零开始一步步的搭建一个vue+webpack的项目。","text":"通常，在新建一个项目的时候，我都是用直接用vue的脚手架来生成的，然后在里面添加内容即可。其实，对于它自动生成的东西我是不太懂的，也就只会写一些页面啊路由什么的，自动生成的一些webpack的配置之类的如果根据项目需求修改配置的话，我是一大脸懵逼的，这里不使用vue的脚手架，而是从零开始一步步的搭建一个vue+webpack的项目。 如何从零开始一个vue+webpack的项目1、新建一个项目文件夹（vue+webpack_config），然后在该文件夹下初始化一个项目npm init初始化过程中出现的选项可以自行填一下，最后选择yes后会在项目文件夹下生成一个package.json文件 2、安装我们这个项目的基本模块vue和webpack，安装vue的话又需要安装vue-loadernpm i webpack vue vue-loader --save安装完成后会自动生成一个node-modules文件夹（另：–save安装的插件会被写入到dependencies对象中，–save-dev安装的插件会被写入到devDependencies对象中，devDependencies里面的插件只用于开发环境，不用于生产环境，而 dependencies是需要发布到生产环境的，虽然我还没弄明白为什么开发环境需要的东西生产环境下竟然会不需要。。。） 3、安装完会出现一个npm的warn，让我们安装css-loader、vue-tamplate-compiler依赖，根据提示继续安装npm i css-loader vue-template-compiler --save到此，基本的一个项目初始化雏形完成 如何配置webpack来加载我们的非js的静态文件4、下面是项目文件，首先新建一个文件夹，用来存放源码（src） 首先在src目录下新建一个app.vue文件，并且在该文件中把vue的基本结构写好，vue的文件格式由template、script和style组成，这里写一个测试的页面如下但是我们的浏览器是不能直接运行vue文件的(可以直接运行html文件)，所以下面我们需要解决的问题就是如何让这个文件可以运行在浏览器中 新建一个webpack.config.js文件和src文件夹平级，用来打包我们的前端资源（包括js,css,图片，字体等），这些资源都是需要通过http请求去加载的，这些加载可以使用一个js文件作为入口，并在webpack.config.js文件中进行配置，我们将入口文件定义在src文件夹下，命名为index.js src下的app.vue作为一个组件需要手动挂载到html中去（否则就是一个独立的文件，没有实际意义），所以需要在入口文件index.js中进行挂载 现在去package.json文件中添加一行代码build: webpack --config webpack.config.js&quot;如果直接在命令行里面执行webpack命令的话执行的是全局的webpack，可能和我们安装在node_modules中的webpack版本不一样，所以还是使用在package.json中运行webpack命令。 然后在命令行执行一下npm run build，发现报错了因为webpack原生是只支持js的文件类型，并且支持的语法只有ES5的语法，因此需要配置一些内容来让它可以处理超出它能力范围的文件和语法，所以下一步就是配置vue文件的loader:在webpack.config.js中加一个配置如下：此时在命令行中再执行一次npm run build，没有再报错，并且根目录下多出了一个dist文件夹，里面有一个bundle.js(包含webpack做的事情，和vue源码，以及我们创建的页面内容)。所以，webpack要做的事情，就是将不同的静态资源的类型打包成一个js，这样我们在html中去引用这个js的时候就可以正常的运行其中的js内容，作为前端，希望能把很多零碎的js打包在一起，可以减少http请求。 下面将各种文件的loader都配置上：这只是在webpack中对不同格式的文件进行了loader配置，下面就是对这些loader进行安装(其中url-loader是基于file-loader的，所以还需要安装file-loader，css-loader和vue-loader项目开始时候就已经安装过了)：npm install style-loader url-loader file-loader 安装成功这些loader后就可以在js中import这些非js的内容了。现在在src目录下新建一些非js类型的文件如下，同时在入口文件index.js中对这些文件进行引入：其中test.css文件内容如下： 1234body&#123; color: aqua; background-image: url(&apos;../images/jay4.png&apos;);&#125; 此时打个包看一下webpack打包的结果，执行一下npm run build，可以看到dist目录，css文件已经通过loader写入了bundle.js文件中，而css中引入的图片文件也同样打包到了dist目录下，图片名称也是按照我们在webpack.config.js中的命名规则来的。 已知在项目中我们很少会直接写css，通常都是写less、scss或者styl，那么如何配置webpack使它能够处理这些css的预处理器呢？下面对其进行配置，在webpack.config.js文件中配置：配置完以后同样需要在安装依赖，在命令行中安装所需要的包及其依赖包，即npm i stylus-loader stylus同时，为了验证webpack可以处理这些预处理器，我们新建了一个.styl的文件在styles目录下，并将其命名为test-stylus.styl，用于设置字体大小 12body font-size 20px 同样的，写完以后还需要在入口文件index.js中引入该文件（同引入test.css文件方法一样）最后进行npm run build打包，发现在打包后的bundle.js中已经将styl文件中的font-size：20px处理成css内容并写入其中 如何配置webpack-dev-server来使我们的开发效率提高 webpack-dev-server其实是webpack的包，既然说是包了，当然首先得安装，命令行首先得搞起npm i webpack-dev-server 安装完成之后，在package.js中做如下改动：上一句的build是使用webpack去启动了webpack.config.js文件下面的dev就是使用webpack-dev-server,去启动这个配置文件来为我们的项目代码进行打包，使用webpack-dev-server会带给和webpack处理不一样的效果，是专门用于开发环境的因为我们使用的是同一个配置文件，因此对于这个webpack.config.js配置文件，我们还需要增加一些专门的配置来适应webpack-dev-server启动的开发模式：首先就是在webpack.config.js中的module.exports对象中添加一行target:web，表示我们是要在浏览器中运行的然后，因为这个配置文件我们是需要用在正式环境和开发环境下的，所以需要对于不同的环境我们需要在配置文件中作出判断，那么如何作出判断呢：这里我们先安装一个npm的包npm i cross-env,这个包是用来兼容window和Mac不同系统上定义环境变量的方法，安装完成后就可以统一设置环境变量了，如下： 如此,使用NODE_ENV变量就可以用来区分开发环境和正式环境了，现在就可以在公用的config的配置文件中对开发环境和正式环境作不同的判断从而配置不同的内容： 目前为止，我们编译的结果中(dist目录下)只有js文件和图片，没有一个html可以容纳js文件，也就是我们还看不到我们的页面内容项目还跑不起来，因此我们需要一个html作为我们项目页面的入口。下面的问题就是我们如何在项目中添加html文件而且还能让它包含我们的js？答案：我们在项目中安装一个webpack的包(npm i html-webpack-plugin)，并在配置文件webpack.config.js中引入和进行相关配置 运行代码，npm run dev报错如下：有猿友说如果你的webpack-dev-server是2.x的，就要安装3.x的webpack，如果你的webpack-dev-server是3.x的就需要安装4.x的webpack，看了一下我的webpack-dev-server是3.x的，果断降级了webpack-dev-server的版本npm i webpack-dev-server@^2，就不会报这个错了（本来是想升级webpack的版本的，但是看到说是升级会出现一堆坑，果然选择了捷径，果然一次就成功了。后面有时间的话试一下升级，踩一下那些坑）。下面是成功后的结果，果然好看了很多，哈哈哈下面直接访问localhost:8000就能看到浏览器可以运行我们的内容了。。。。。。到此为止，vue和webpack的的基本配置已经结束了，没有使用vue-cli也可以运行vue文件了！","categories":[],"tags":[{"name":"-webpack","slug":"webpack","permalink":"http://yy709593266.github.io/blog/tags/webpack/"}]},{"title":"那些后知后觉的笔面试题","slug":"20161119-笔面试题","date":"2016-11-19T09:28:26.000Z","updated":"2017-09-12T14:19:42.000Z","comments":true,"path":"2016/11/19/20161119-笔面试题/","link":"","permalink":"http://yy709593266.github.io/blog/2016/11/19/20161119-笔面试题/","excerpt":"找工作的日子是难熬的，找完工作的日子是无聊的，难得无聊的日子也不能自我放弃喽，趁着这个悠（wu）闲（liao）的日子里，把那些月子里锻（zhe）炼（mo）我的笔试和面试遇题做一个集锦，以备不时之需（😂😂）","text":"找工作的日子是难熬的，找完工作的日子是无聊的，难得无聊的日子也不能自我放弃喽，趁着这个悠（wu）闲（liao）的日子里，把那些月子里锻（zhe）炼（mo）我的笔试和面试遇题做一个集锦，以备不时之需（😂😂） 1、给定几个数，写出一个方法，将这几个数拼接出最大整数1234567891011function MaxNum(arr)&#123; arr = arr.sort(); var len = arr.length; var result = &quot;&quot;; for(var i = len - 1; i &gt;= 0; i--) &#123; result += arr[i]; &#125; return parseInt(result);&#125;var arr = [1, 13, 5];console.log(MaxNum(arr)); //5131 arrayObject.sort(sortby)方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定顺序。参数可选，在没有使用参数的时候，按照字符串编码的顺序进行排序；如果想按照其它标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字，比较函数应该具有两个参数a和b，其返回值如下，若a小于b，在排序后的数组中a应该出现在b之前，则返回一个小于0的值，若a等于b，则返回0，若a大于b，则返回一个大于0的值，sort根据这个函数返回的结构对这个数组进行冒泡排序(即，根据返回－1的那个条件来排序)，假如我们想要降序排序这个数组：123456789101112var arr = [1, 13, 5];function compare(a, b)&#123; if(a &lt; b) &#123; return -1; &#125;else if(a &gt; b) &#123; return 1; &#125;else &#123; return 0; &#125;&#125;arr.sort(compare);console.log(arr); //[1, 5, 13] 2、我太懒了。。。待续","categories":[],"tags":[{"name":"-笔面试题","slug":"笔面试题","permalink":"http://yy709593266.github.io/blog/tags/笔面试题/"}]},{"title":"从psd photo到css style","slug":"20160904(psd-css)","date":"2016-09-04T09:28:26.000Z","updated":"2016-11-19T08:35:10.000Z","comments":true,"path":"2016/09/04/20160904(psd-css)/","link":"","permalink":"http://yy709593266.github.io/blog/2016/09/04/20160904(psd-css)/","excerpt":"如何将视觉美眉给的psd图用CSS样式表示出来对于前端工作人员来说是一个很重要的问题，特别是细节，比如颜色、阴影效果等。因为对photoshop本来就不是很熟，所以对平时自己慢慢积累用到的一些关于photoshop的技巧和方法实时记下来，以免回头一顿火锅的时间就给忘了（此时在北京实习的日子很是想念火锅，重庆火锅！对！我很爱吃火锅！！！）。","text":"如何将视觉美眉给的psd图用CSS样式表示出来对于前端工作人员来说是一个很重要的问题，特别是细节，比如颜色、阴影效果等。因为对photoshop本来就不是很熟，所以对平时自己慢慢积累用到的一些关于photoshop的技巧和方法实时记下来，以免回头一顿火锅的时间就给忘了（此时在北京实习的日子很是想念火锅，重庆火锅！对！我很爱吃火锅！！！）。 切图方法一 工具栏自动选择图层选中 窗口中打开图层工具条 选中想要切的图，点击后图层工具栏中会自动选中该图层 图层工具栏中在选中的图层上右击－&gt;转换成智能对象 图层工具栏中双击已被转换成智能对象的图层前面的图标 弹出的窗口点击确定（现在就自动新建了一个画布将你要切的图复制过去了） 新建的画布中存储刚切出来的图并保存为web存储格式即可注意⚠️：如果想要切的图是几个图层的话就可以按住Ctrl键，同时选中后再一起转换成智能对象，后面的步骤都相同。🙏：感谢叶师傅 方法二如果想要的图是100＊100的，而psd给的该图标的大小只有80＊70，为了得到想要的大小的图100＊100，可以给图指定一个大小（100＊100）再切，这样切出来的图不会失真而且大小还是自己想要的（给多余的宽高背景都透明）。 工具栏自动选中图层选中 窗口中打开图层工具栏 选中想要切的图，点击后图层工具栏中会自动选中该图层 按住Alt键同时点击图层窗口中选中图层前面的小眼睛（以此来隐藏其它图层） 选中选框工具，并在上面工具栏中样式选中固定大小（或者固定比例），输入宽高值，得到自定义选框 点击psd图移动选框位置使得想要切的图在选框居中位置（大概居中，还没发现一个绝对居中的方法） 点击裁切工具确定裁切并保存为web存储格式即可注意⚠️：裁切完以后一定要到历史工具栏中恢复一下，不然整张图就没切成这么一点了，原图就没啦。 获取阴影效果有时候视觉美眉给的一张psd图有些部分会是阴影效果，这时候写CSS样式时，需要根据psd给定的阴影效果写参数： 选中阴影元素 图层工具栏中双击该图层（双击空白处） 出现一个弹窗，里面有该阴影的信息，现在根据这些信息就能计算出CSS样式中box－shadow的值了已知box－shadow值有五个参数，根据以上信息计算出五个参数具体值：参数1: 距离＊cos(180-角度)px;参数2: 距离＊sin(180-角度)px;参数3: (大小－参数4)px;参数4: 大小＊扩展(0%-100%)px;参数5: rgba()(点击混合后面一个颜色区域可以获取rgb值，a不透明度)。这种图给出的值计算出来的box－shadow参数值就是：参数1: 20＊cos(90) = 0px;参数2: 20＊sin(90) = 20px;参数3: 25-0 ＝ 25px;参数4: 25＊0% ＝ 0px;参数5: rgba(113, 135, 169, .25)。即box-shadow: 0px 20px 25px 0px rgba(113, 135, 169, .25)。","categories":[],"tags":[{"name":"-psd","slug":"psd","permalink":"http://yy709593266.github.io/blog/tags/psd/"}]},{"title":"javascript继承","slug":"20160829(javascript继承)","date":"2016-08-29T09:28:26.000Z","updated":"2016-11-15T12:48:02.000Z","comments":true,"path":"2016/08/29/20160829(javascript继承)/","link":"","permalink":"http://yy709593266.github.io/blog/2016/08/29/20160829(javascript继承)/","excerpt":"javascript在ES6之前，我们通过构造函数来创造一个类，并且通过原型来扩展属性，然后可以这样实现继承，这里主要说明这种继承方式各个构造函数原型之间的关系，顺便聊聊如何通过ES6实现继承。","text":"javascript在ES6之前，我们通过构造函数来创造一个类，并且通过原型来扩展属性，然后可以这样实现继承，这里主要说明这种继承方式各个构造函数原型之间的关系，顺便聊聊如何通过ES6实现继承。 构造函数1234567891011function Person(name, age, sex)&#123; this.name = name; this.age = age; this.sex = sex;&#125;Person.prototype.personLogAge = function()&#123; console.log(this.age);&#125;let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);console.log(person1); 实例化一个Person命名为person1：一个对象A的_proto_属性指向的那个对象B就是它的原型对象（或者叫上级对象，父对象）。 继承－1123456789101112131415161718192021222324function Person(name, age, gender) &#123; this.name = name; this.age = age; this.gender = gender;&#125;Person.prototype.personLogAge = function()&#123; console.log(this.age);&#125;function Personal(name, age, gender, occupation, hobby) &#123; Person.call(this, name, age, gender); this.occupation = occupation; this.hobby = hobby;&#125;Personal.prototype = Object.create(Person.prototype);// Personal.prototype.constructor = Personal; //显示声明Personal类的constructorPersonal.prototype.personalLogAge = function()&#123; console.log(this.age);&#125;let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);console.log(person1);let personal1 = new Personal(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;);console.log(personal1); 实例化一个Personal命名为personal1:Object.create()是一种新的对象创建方式，第一个参数必需，要用作原型的对象，第二个参数可选，包含一个或多个属性描述符的javascript对象。 继承－212345678910111213141516171819202122232425262728293031323334353637function Person(name, age, gender) &#123; this.name = name; this.age = age; this.gender = gender;&#125;Person.prototype.personLogAge = function()&#123; console.log(this.age);&#125;function Personal(name, age, gender, occupation, hobby)&#123; Person.call(this, name, age, gender); this.occupation = occupation; this.hobby = hobby;&#125;Personal.prototype = Object.create(Person.prototype);Personal.prototype.constructor = Personal;Personal.prototype.personalLogAge = function()&#123; console.log(this.age);&#125;function Biology(name, age, gender, occupation, hobby) &#123; Personal.call(this, name, age, gender, occupation, hobby);&#125;Biology.prototype = Object.create(Personal.prototype);Biology.prototype.constructor = Biology;Biology.prototype.biologyLogAge = function()&#123; console.log(this.age);&#125;let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);console.log(person1);let personal1 = new Personal(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;);console.log(personal1);let biology = new Biology(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;)console.log(biology1); 实例化一个Biology命名为biology1：以此类推实现继承。 ES6类ES6中出现了类的概念，ES6提供了更多的语法躺，可以直接创造一个类：12345678910111213141516171819class Person &#123; constructor(name, age, sex) &#123; this.name = name; this.age = age; this.sex = sex; &#125; personLogAge()&#123; console.log(this.age); &#125; personLogName()&#123; console.log(this.name); &#125; personLogSex()&#123; console.log(this.sex); &#125;&#125;let person1 = new Person(&apos;yuan&apos;, 17, &apos;female&apos;);console.log(person1); 通过ES6方法定义一个类，实例化一个Person命名为person1：ES6方法写的类内部所有定义的方法都是不可枚举的（non－enumberable），这也就是为什么实例只能看到它的属性值，使用Object.keys(person1)可以看到可以枚举的属性只有[&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;]，这一点和ES5行为不一致。 ES6继承1234567891011121314151617181920212223242526272829303132class Person &#123; constructor(name, age, sex) &#123; this.name = name; this.age = age; this.sex = sex; &#125; personLogAge()&#123; console.log(this.age); &#125; personLogName()&#123; console.log(this.name); &#125; personLogSex()&#123; console.log(this.sex); &#125;&#125;class Personal extends Person &#123; constructor(name, age, sex, occupation, hobby) &#123; super(name, age, sex); this.occupation = occupation; this.hobby = hobby; &#125; personalLogAge()&#123; console.log(this.age); &#125;&#125;let person1 = new Person(&apos;yuan&apos;, 17, &apos;female&apos;);console.log(person1);let personal1 = new Personal(&apos;xiao&apos;, 21, &apos;male&apos;, &apos;web&apos;, &apos;coding&apos;);console.log(personal1); Personal类继承了Person类，实例化一个Personal命名为personal1:","categories":[],"tags":[{"name":"-继承","slug":"继承","permalink":"http://yy709593266.github.io/blog/tags/继承/"}]},{"title":"IE9-jQuery-ajax","slug":"20160803(IE9-jQuery-ajax)","date":"2016-08-03T09:28:26.000Z","updated":"2016-11-15T11:58:46.000Z","comments":true,"path":"2016/08/03/20160803(IE9-jQuery-ajax)/","link":"","permalink":"http://yy709593266.github.io/blog/2016/08/03/20160803(IE9-jQuery-ajax)/","excerpt":"最近项目中使用jQuery的ajax发送跨域请求获取数据时，在IE9中请求未发送出去，最后找到大神解决了","text":"最近项目中使用jQuery的ajax发送跨域请求获取数据时，在IE9中请求未发送出去，最后找到大神解决了 一般的请求12345678$.ajax(&#123; type: &apos;GET&apos;, crossDomain: true, success: function(msg)&#123; //do something with your recieved message &#125;, error: function()&#123;&#125;&#125;); 兼容IE9的请求1234567891011121314151617181920212223if(window.XDomainRequest)&#123; var xdr = new XDomainRequest(); var query = yourUrl; if(xdr) &#123; xdr.onload = function()&#123; var msg = JSON.parse(xdr.responseText); // do something with your recieved message &#125;; xdr.onerror = function()&#123;&#125;; xdr.open(&apos;GET&apos;, query); xdr.send(); &#125;&#125;else &#123; $.ajax(&#123; type: &apos;GET&apos;, url: yourUrl, crossDomain: true, success: function(msg)&#123; //do something with your recieved message &#125;, error: function()&#123;&#125; &#125;);&#125; 🙏：感谢阔阔师傅","categories":[],"tags":[{"name":"-ajax -jQuery","slug":"ajax-jQuery","permalink":"http://yy709593266.github.io/blog/tags/ajax-jQuery/"}]},{"title":"ajaxFileUpload插件上传图片","slug":"20160726(ajaxFileUpload图片上传)","date":"2016-07-26T09:28:26.000Z","updated":"2016-11-15T12:49:33.000Z","comments":true,"path":"2016/07/26/20160726(ajaxFileUpload图片上传)/","link":"","permalink":"http://yy709593266.github.io/blog/2016/07/26/20160726(ajaxFileUpload图片上传)/","excerpt":"最近在项目中遇到一个照片上传的需求，用到了ajaxFileUpload的jQuery插件，中间遇到很多问题，不是缺少函数定义就是出现只能上传一次的问题，在这里对ajaxFileUpload插件使用中的问题做个总结。","text":"最近在项目中遇到一个照片上传的需求，用到了ajaxFileUpload的jQuery插件，中间遇到很多问题，不是缺少函数定义就是出现只能上传一次的问题，在这里对ajaxFileUpload插件使用中的问题做个总结。 插件引入因为ajaxFileUpload插件是基于jQuery的插件，所以引入这个插件之前需要先引入jQuery插件：12&lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;ajaxFileUpload.js&quot;&gt;&lt;/script&gt; 问题一:handleErrorinput标签提供一个直接上传文件的属性：123456789101112131415161718//html&lt;input name=&quot;file&quot; id=&quot;upload&quot; type=&quot;file&quot;&gt;//js$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123; $.ajaxFileUpload(&#123; url: &apos;xxx/xxx/xxx&apos;, //请求地址 type: &apos;post&apos;, //请求方式 secureuri: false, //是否启用安全提交，默认false fileElementId: &apos;upload&apos;,//上传input的id success: function(data, status)&#123; console.log(data); &#125;, error: function(data, status, e)&#123; console.log(data.msg); &#125; &#125;);&#125;); 这里选中图片确定以后触发input的onchange事件，此时发送请求将图片信息传给后台并获取后台返回数据，这里后台会给每次提交的图片返回一个特定的id，提交时候就将这个id提交给后台将图片保存起来，以后要访问图片就将src指定这张图片地址就行了。如果点击选中图片后再删除这张图片，那么虽然这张图片点击选中时后台返回了一个指定id，但是在提交表单的时候这张图片的id是不需要传给后台的，因为用户可能手抖点错了照片，不需要保存这张先选中后来被删除的照片的地址的(有点绕)。第一个问题就是，提示handleError is not a function，根据网上搜到的解决办法，就是复制一份这个函数到ajaxFileUpload函数中：1234567891011handleError: function(s, xhr, status, e)&#123; // If a local callback was specified, file it if(s.error)&#123; s.error.call(s.context || s, xhr, status, e); &#125; //File the global callback if(s.global)&#123; (s.context ? jQuery(s.context) : jQuery.event).trigger(&quot;ajaxError&quot;, [xhr, s, e]); &#125;&#125; 这里有一份已经添加完handleError函数的ajaxFileUpload文件，好了，这样就不会报handleError is not a function的错了。 问题二：data请求success时候返回的数据data应该就是后台返回的我们需要的值了，但是直接console.log出来发现，又有问题了，数据被一层不知道哪儿来的标签包住了，这里我们需要对接收到的data进行一次处理：1234567891011121314151617//js$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123; $.ajaxFileUpload(&#123; url: &apos;xxx/xx/xx&apos;, type: &apos;post&apos;, secureuri: false, fileElementId: &apos;upload&apos;, success: function(data, status)&#123; var str = $(data).find(&quot;body&quot;).text(); //获取返回的字符串 var json = $.parseJSON(str); //把字符串转化成json对象 console.log(json); //我们需要的数据 &#125;, error: function(data, status, e)&#123; &#125; &#125;);&#125;); 虽然我也不造具体什么原因，反正这样写就没得问题啦，先解决燃眉之急，再追究其所以然。 问题三：onchange上面问题都解决以后可以上传图片并获得图片id了，但是只能上传一张图片，再点击上传一张就不行了，网上查了资料说是ajaxFileUpload插件，它会把原来的file元素替换成新的file元素，所以之前绑定在旧的input上的change事件就失效了，需要重新绑定一次，试了一下果然有效，不过代码需要重新编排一下：12345678910111213141516171819202122232425262728293031323334$(&apos;#upload&apos;).on(&apos;change&apos;, upload);function upload()&#123; if(true)&#123; //根据需求相关操作 ajaxFileUpload(); &#125;else if(ddd)&#123; &#125;else &#123; &#125;&#125;function ajaxFileUpload()&#123; $.ajaxFileUpload(&#123; url: &apos;xxx/xx/xx&apos;, type: &apos;post&apos;, secureuri: false, fileElementId: &apos;upload&apos;, success: function(data, status)&#123; var str = $(data).find(&quot;body&quot;).text(); var json = $.parseJSON(str); // idList是需要提交给后台的用来放置图片id的数组 idList.push(json.result[0].id); &#125;, complete: function(xmlHttpRequest)&#123; $(&quot;#upload&quot;).replaceWith(&apos;&lt;input type=&quot;file&quot; id=&quot;upload&quot; name=&quot;file&quot; class=&quot;hidden&quot;&gt;&apos;); $(&quot;#upload&quot;).on(&quot;change&quot;, upload); &#125;, error: function(data, status, e)&#123; //error &#125; &#125;);&#125; 现在，照片上传没问题了，再把需要提交的表单数据提交给后台就👌了。 获取图片大小上传图片往往需要对用户上传图片大小进行限制，这里插入一段上传图片点击确定获取图片大小的方法：12345678910111213141516171819202122232425&lt;html&gt;&lt;head&gt; &lt;title&gt;获取图片大小&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot; onchange=&quot;getSize()&quot;&gt; &lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var size = 0; function getSize()&#123; //js原生方法 var file = document.getElementById(&quot;upload&quot;); size = file.files[0].size; var mSize = (size/1048576).toFixed(2); //单位是兆M console.log(mSize); //jQuery方法 //size = $(&quot;#upload&quot;)[0].files[0].size; //var mSize = (size/1048576).toFixed(2); //console.log(mSize); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 类型为file的input的样式这里既然说到这个type值是file的input标签，就来说下如何修改这种input的样式，一般默认的样式是很难看的，直接给input添加class样式修改又不起作用，所以就需要一点技巧。 方法一先把input按钮的透明度opacity设置为0，然后用a标签包裹该input，实现美化效果，这样美化后input的使用还是不变的：1234567891011121314151617181920212223242526272829303132333435363738394041&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;file input&lt;/title&gt; &lt;style&gt; .upload-a&#123; padding: 4px 10px; height: 20px; line-height: 20px; position: relative; cursor: pointer; color: #888; background-color: #fafafa; border: 1px solid #ddd; border-radius: 4px; overflow: hidden; display: inline-block; text-decoration: none; &#125; .upload-a input &#123; opacity: 0; position: absolute; font-size: 100px; right: 0; top: 0; cursor: pointer; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;javascript:;&quot; class=&quot;upload-a&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot;&gt;点击这里上传文件 &lt;/a&gt; &lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123; //选择成功以后执行的事件 &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 方法二这个方法a标签和input标签是同级的，只不过将input的display值设置了none，点击a标签的时候就触发input的click事件，再执行后面的操作：1234567891011121314151617181920212223242526272829303132333435363738&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;file input&lt;/title&gt; &lt;style&gt; .upload &#123; padding: 4px 10px; height: 20px; line-height: 20px; position: relative; cursor: pointer; color: #888; background-color: #fafafa; border: 1px solid #ddd; border-radius: 4px; overflow: hidden; display: inline-block; text-decoration: none; &#125; .hidden &#123; display: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a class=&quot;upload&quot;&gt;点击这里上传文件&lt;/a&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot; class=&quot;hidden&quot;&gt; &lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&apos;.upload&apos;).on(&apos;click&apos;, function()&#123; $(&apos;#upload&apos;).click(); &#125;); $(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123; //选择成功以后执行的事件 &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 第二种方法需要注意⚠️一个问题，这里的$(&#39;#upload&#39;)的change事件需要放在$(&#39;.upload&#39;)的click事件的外面。如果放在里面的话，那么每次触发click事件就会注册一个change事件监听器，这样的话，第一次点击上传会上传一张，第二次点击上传会上传两张（因为，第二次click以后就会注册两个change事件监听器），以此类推，每次点击都会增加一个监听器。🙏：感谢纪师傅","categories":[],"tags":[{"name":"-ajaxfileupload","slug":"ajaxfileupload","permalink":"http://yy709593266.github.io/blog/tags/ajaxfileupload/"}]},{"title":"Hello Vue!","slug":"20160708(helloVue)","date":"2016-07-08T09:28:26.000Z","updated":"2017-09-12T14:56:27.000Z","comments":true,"path":"2016/07/08/20160708(helloVue)/","link":"","permalink":"http://yy709593266.github.io/blog/2016/07/08/20160708(helloVue)/","excerpt":"其实看vue的教程我们知道，可以像使用jQuery一样来使用vue.js，即直接使用&lt;script&gt;&lt;/script&gt;标签加载进去就可以使用它了，这里主要讲的是使用npm安装vue的时候我遇到一些问题","text":"其实看vue的教程我们知道，可以像使用jQuery一样来使用vue.js，即直接使用&lt;script&gt;&lt;/script&gt;标签加载进去就可以使用它了，这里主要讲的是使用npm安装vue的时候我遇到一些问题 安装步骤1、首先保证你已经安装了node和npm2、打开Git，映射npm到cnpm$ npm install -g cnpm --registry=https://registry.npm.taobao.org(Mac下影射命令为$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org)3、安装vue-cli$ cnpm i -g vue-cli(Mac下命令为$ sudo cnpm i -g vue-cli)4、cd到一个你放置项目的文件夹，创建webpack项目并且下载依赖$ vue init webpack hellovue出现的选项可以直接点击enter跳过5、定位到项目中$ cd hellovue6、安装依赖模块$ cnpm i7、运行应用$ cnpm run dev现在可以在localhost:8080上查看我们的应用了。注：如果这时候需要使用npm安装其他的库，比如路由和XHR库的话，需要重新打开一个Git窗口 问题我运行的时候出现的是空白页，而且控制台报错了，说main.js文件中的import错误:12import Vue from &apos;vue&apos;import App from &apos;./App&apos; 这里我们需要使用require加载12var Vue = require(&apos;vue&apos;);var App = require(&apos;./App.vue&apos;); 这样就能正常运行第一个vue程序Hello World!了。后面就在里面添加内容或者文件就行了。","categories":[],"tags":[{"name":"-vue","slug":"vue","permalink":"http://yy709593266.github.io/blog/tags/vue/"}]},{"title":"从插件开发了解jQuery源码","slug":"20160623(jQuery-插件)","date":"2016-06-23T02:34:00.000Z","updated":"2016-11-10T02:13:03.000Z","comments":true,"path":"2016/06/23/20160623(jQuery-插件)/","link":"","permalink":"http://yy709593266.github.io/blog/2016/06/23/20160623(jQuery-插件)/","excerpt":"想要开发jQuery插件，首先必须了解并熟悉jQuery源码，了解它的整体架构以及方法的实现，这里主要对jQuery插件开发相关的方法并加上自己的理解来进行阐述jQuery源码相关知识，从而让你找到适合自己的方法去理解和开发一个jQuery插件。","text":"想要开发jQuery插件，首先必须了解并熟悉jQuery源码，了解它的整体架构以及方法的实现，这里主要对jQuery插件开发相关的方法并加上自己的理解来进行阐述jQuery源码相关知识，从而让你找到适合自己的方法去理解和开发一个jQuery插件。 jQuery的总体架构打开jQuery的源码，会发现这样的代码结构123(function (window, undefined) &#123; // jquery code&#125;)(window) 通过定义一个自调用的匿名函数，创建一个私有空间，该私有空间的变量和方法，不会破坏全局的命名空间。jQuery被应用在成千上万的JavaScript程序中，必须确保jQuery创建的变量不能和导入它的程序所使用的变量发生冲突。既然作用范围在这个匿名函数中，怎么被别人使用呢？1window.jQuery = window.$ = jQuery 这里让jQuery库中最重要的jQuery对象成为了window对象的一个属性，这样就可以在其他地方像使用window.document来使用jQuery对象了，而$是jQuery的同名对象 构造jQuery对象jQuery对象不是通过new jQuery创建的，而是通过new jQuery.fn.init创建的123456789var jQuery = function(selector, context)&#123; return new jQuery.fn.init(selector, context);&#125;jQuery.fn = jQuery.prototype = &#123; init: function(selector, context)&#123; //init的功能是对传进来的selector参数进行分析，进行各种不同的处理，然后生成jQuery对象 &#125; //...&#125; jQuery对象就是jQuery.fn.init对象，这样构造jQuery对象的方法，如果执行new jQuery()生成的jQuery对象会被抛弃，最后返回jQuery.fn.init对象，因此可以直接调用jQuery(selector, context)，没有必要使用new关键字。关于new出来的init和直接return的init有什么区别呢？如果是直接return的init的话12345678910111213var jQuery = function(selector, context) &#123; return jQuery.prototype.init();&#125;jQuery.prototype = &#123; init:function()&#123; this.age = 10; return this; &#125;, name:function()&#123; console.log(&apos;name&apos;); &#125;, age: 20&#125; 当执行jQuery()返回如下:jQuery()返回的是jQuery类的实例，init中的this其实也是指向jQuery类的实例。如果是new出来的init的话12345678910111213var jQuery = function(selector, context) &#123; return new jQuery.prototype.init();&#125;jQuery.prototype = &#123; init:function()&#123; this.age = 10 return this; &#125;, name:function()&#123; console.log(&apos;name&apos;); &#125;, age: 20&#125; 执行jQuery()返回如下：此时抛出错误，无法找到这个方法，所以显然就是new出来的init和jQuery类的this已经分离了。那么init想要访问到jQuery类原型上的属性和方法的话，实现的关键就是：123456789jQuery.fn = jQuery.prototype = &#123; init: function(selector, context)&#123; //init的功能是对传进来的selector参数进行分析，进行各种不同的处理，然后生成jQuery对象 &#125; //...&#125;jQuery.fn.init.prototype = jQuery.fn; // 通过原型传递解决，把jQuery原型传递给jQuery.prototype.init.prototype// 也就是jQuery的原型覆盖了init构造器的原型对象。 先执行jQuery.fn = jQuery.prototype，再执行jQuery.fn,init,prototype = jQuery.fn，合并后的代码就是jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype。所有挂载到jQuery.fn的方法，相当于挂载到了jQuery.prototype，即挂载到了jQuery函数上，但是最后都相当于挂载到了jQuery.fn.init.prototype，相当于挂载到了一开始的jQuery函数返回的对象上，即挂载到了我们最终使用的jQuery对象上（因为我们一开始创建的jQuery对象就是jQuery函数返回的对象）。此时，执行jQuery()返回如下：每个函数都return this的话，就可以实现链式调用了，因为调用完一个方法以后返回对象依旧可以调用该对象上的其他方法。 jQuery插件接口方法jQuery.extend()和jQuery.fn.extend()常用于编写插件和处理函数的参数。1234jQuery.extend() 对jQuery本身的属性和方法进行了扩展//比如：$.ajax()、$.getJSON()方法等jQuery.fn.extend() 对jQuery.fn(即jQuery.prototype)的属性和方法进行了扩展//比如：$(ele).addClass()、$(ele).find()方法等 从jQuery源码中可以看到，jQuery.extend()方法和jQuery.fn.extend()方法其实是同指向同一方法的不同引用123jQuery.extend = jQuery.fn.jQuery = function () &#123; // ...&#125; 这两个方法指向同一个函数，怎么会实现不同的功能呢，这就是this的力量。jQuery.extend时，this指的是jQuery；jQuery.fn.extend时，this指的是jQuery.fn即jQuery.prototype。针对fn与jQuery其实是2个不同的对象： jQuery.extend调用的时候，this是指向jQuery对象的，所以这里扩展在jQuery上。把jQuery看成一个类的话，那么jQuery.extend就是在这个类上扩展了一个方法，直接$.functionname就可以直接用类来调用这个方法，即给jQuery类本身添加方法。 jQuery.fn.extend调用的时候，this指向fn对象，而jQuery.fn和jQuery.prototype指向同一对象，扩展fn就是扩展jQuery.prototype原型对象，就是类的实例化嘛，需要$(ele).functionname先实例化一个对象再来调用方法，即给jQuery对象添加方法。其实fn没有什么特别的意思，就只是jQuery.prototype的引用而已。 jQuery.extend的合并对象功能12jQuery.extend([deep], target, object1, [objectN])// 合并对象到第一个对象 第一种合并123456789101112var object1 = &#123; apple: 0, banana: &#123;weight: 52, price: 100&#125;, cherry: 97&#125;;var object2 = &#123; banana: &#123;price: 200&#125;, orange: 100&#125;;$.extend(object1, object2);// 将object1和object2合并到object1中了// object2值不变 第二种合并123456789101112var object1 = &#123; apple: 0, banana: &#123;weight: 52, price: 100&#125;, cherry: 97&#125;;var object2 = &#123; banana: &#123;price: 200&#125;, orange: 100&#125;;object3 = $.extend(&#123;&#125;,object1, object2);// 将object1和object2合并到object3上了// object1和object2值均不变 第三种–深度合并深度合并和非深度合并的区别是，深度合并的对象中如果复杂属性值(比如数组、函数、json对象等)，合并以后，如果再修改合子并对象的属性值，合并结果对象的值不会改变1234567891011121314var obj1 = &#123; a: &apos;a&apos;, b: &apos;b&apos;&#125;;var obj2 = &#123; c: &#123;cc: &apos;cc&apos;, ccc: &apos;ccc&apos;&#125;, d: &apos;d&apos;&#125;;$.extend(true, obj1, obj2);// 合并以后obj1和obj2都合并到obj1上了obj2.c.cc = &apos;11&apos;;//现在改变合并子对象obj2的属性值，合并后的obj1的属性值不会改变的console.log(obj2.c.cc); // 11console.log(obj1.c.cc); // cc","categories":[],"tags":[{"name":"-jQuery -插件","slug":"jQuery-插件","permalink":"http://yy709593266.github.io/blog/tags/jQuery-插件/"}]},{"title":"前端开发规范","slug":"20160617(前端开发规范)","date":"2016-06-17T07:55:43.000Z","updated":"2016-07-01T09:03:46.000Z","comments":true,"path":"2016/06/17/20160617(前端开发规范)/","link":"","permalink":"http://yy709593266.github.io/blog/2016/06/17/20160617(前端开发规范)/","excerpt":"为提高团队协作效率，便于后台人员添加功能及前端后期优化维护，特制订本文档。本文档如有不对或者不合适的地方请及时提出。","text":"为提高团队协作效率，便于后台人员添加功能及前端后期优化维护，特制订本文档。本文档如有不对或者不合适的地方请及时提出。 HTML编码原则第一行统一使用HTML5标准1234567&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;my title&lt;/title&gt; &lt;meta name=&quot;keywords&quot; content=&quot;xxxx, xxx, xxxxx&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;xxxxxxxxxxxxxxxxxxxx&quot; /&gt; 语言类型12345678&lt;!-- 中文 --&gt;&lt;html lang=&quot;zh-Hans&quot;&gt;&lt;!-- 简体中文 --&gt;&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;&lt;!-- 繁体中文 --&gt;&lt;html lang=&quot;zh-cmn-Hant&quot;&gt;&lt;!-- English --&gt;&lt;html lang=&quot;en&quot;&gt; meta的使用123456&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt; // 优先使用最新版本的IE 和 Chrome 内核&lt;meta chartset=&quot;utf-8&quot;&gt; // 网页显示字符集&lt;meta name=&quot;description&quot; content=&quot;这里填您网站的简介&quot;&gt; // 网站简介&lt;meta name=&quot;keywords&quot; content=&quot;关键字1,关键字2,关键字3,...&quot;&gt; // 搜索关键字&lt;link href=&quot;style/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; // 网页的CSS规范 &lt;title&gt;这里是网页标题&lt;title&gt; // 网页标题 html标签 自闭和标签无需闭合(例如：img input br hr等) 可选的闭合标签需闭合(例如：’li’ ‘body’) 尽量减少标签数量1234567&lt;img src=&quot;images/google.png&quot; alt=&quot;Google&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;&lt;ul&gt; &lt;li&gt;Style&lt;/li&gt; &lt;li&gt;Guide&lt;/li&gt;&lt;/ul&gt; 网页制作字体 在设定字体样式时对于文字字号样式和行间距样式必须使用CSS样式表 在网页中中文应首选使用宋体，英文和数字首选verdana和arial两种字体。一般使用中文宋体的9pt和11pt或12px和14.7px，黑体字或者宋体字加粗时，一般选用11pt和14.7px的字号比较合适 为了最大程度的发挥浏览器自动排版的功能，在一段完整的文字中请尽量不要使用&lt;br&gt;来人工干预分段 网页中的空白应该尽量使用text-indent、padding、margin等以及透明的gif图片来实现 行距建议用百分比来定义，常用的两个行距值为120%和150% 网页制作链接 在浏览器中，我们点击空链接时，它会自动将当前页面重置到首端，从而影响用户正常的阅读内容，我们用代码javascript:void(null)代替原来的#标记 html文件命名 各子页命名的原则首先应该以栏目名的英文翻译取单一单词为名称。例如： 关于我们 \\aboutus信息反馈 \\feedback产品 \\product html所有标签、属性、值均使用小写字母，且属性的值前后使用双引号，属性之间使用一个英文空格隔开1&lt;input type=&quot;text&quot; value=&quot;info&quot;&gt; 属性书写顺序 id class name data-xxx src, for, type, href aria-xxx, role12345&lt;a id=&quot;...&quot; class=&quot;...&quot; data-modal=&quot;toggle&quot; href=&quot;###&quot;&gt;&lt;/a&gt;&lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt;&lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt; 布尔值属性HTML5 规范中 disabled、checked、selected等属性不用设置值1234567&lt;input type=&quot;text&quot; disabled&gt;&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked&gt;&lt;select&gt; &lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt;&lt;/select&gt; 标签嵌套必须合理正确，严禁在行内元素内嵌使用块级元素标签 常见的块级元素有 :div、p、table、td、tr、ul、ol、li、fieldset、legen、form、 blockquote、h1-h6、dl、dt、dd … 常见的行内元素有:span、a、strong、 b、em、i、s、u、site…常见错误示例： a标签、span标签内嵌套包含div、p等标签 在li标签、dt、dd、标签内直接包含div、h1-h6等块级元素在某些浏览器下也会出现兼容性问题，谨慎使用。 合理规划文档结构，去除不必要的&lt;div&gt;标签先分析布局，划分框架，然后规划结构，最后编写代码html标签语义化常见标签语义 &lt;p&gt;：段落&lt;h1&gt; &lt;h2&gt; &lt;h3&gt; …：标题&lt;ul&gt;：无序列表&lt;ol&gt;：有序列表&lt;blockquote&gt;：大段引用&lt;cite&gt;：一般引用&lt;b&gt;：为样式加粗而加粗&lt;strong&gt;：为强调内容而加粗&lt;i&gt;：为样式倾斜而倾斜&lt;em&gt;：为强调内容而倾斜code：代码标识abbr：缩写 代码缩进规范 html代码的层级缩进为一个tab 跨行标签的开始标签和结束标签必须上下对齐 值为空的元素定义应该单独占用一行 前景图片编码原则1&lt;img alt=&quot;图片说明&quot; src=&quot;logo_header.png&quot; /&gt; img标签必须闭合 所有图片必须添加alt属性值 图片的名称分为头尾两部分，用下划线隔开，头部分表示此图片的大类性质。例如：广告、标志、菜单、按钮等 放置在页面顶部的广告、装饰图案等长方形的图片取名：banner 标志性的图片取名为：logo 在页面上位置不固定并且带有链接的小图片我们取名为button 在页面上某一个位置连续出现，性质相同的链接栏目的图片我们取名为：menu 装饰用的图片我们取名：pic 不带链接表示标题的图片取名：title 鼠标感应效果图片命名规范为”图片名+_on/off”。例如：menu_on.gif menu_off.gif 代码注释 使用&lt;!----&gt;的方式添加注释 html文档中对于单独的模块或者超过50行的超长代码块做注释 转义字符 : &amp;nbsp &lt; : &amp;lt > : &amp;gt ￥ : &amp;yen “ : &amp;quot &amp; : &amp;amp © : &amp;copy ® : &amp;reg ‘ : &amp;#39 ™ : &amp;trade × : &amp;times ÷ : &amp;divide IE中HTML条件注释12345678&lt;!--[if IE 6]&gt; IE6 &lt;![endif]--&gt; &lt;!--[if IE 7]&gt; IE7 &lt;![endif]--&gt; &lt;!--[if lt IE 8]&gt; 小于IE8 &lt;![endif]--&gt; &lt;!--[if lte IE 8]&gt; 小于等于IE8 &lt;![endif]--&gt; &lt;!--[if gt IE 6]&gt; 大于IE6 &lt;![endif]--&gt; &lt;!--[if gte IE 6]&gt; 大于等于IE6 &lt;![endif]--&gt; &lt;!--[if !IE]&gt; 除IE外都可识别 &lt;![endif]--&gt; &lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt; CSS编码原则外联方式1&lt;link rel=&quot;stylesheet&quot; href=&quot;css/common.css&quot;&gt; 注意 原则上，不允许在html上直接写样式 内外联方式的类型声明type=&quot;text/css&quot;都可以省略 link和style标签都应该放在head中 禁止在css文件内部采用@import方式引入其他css文件 如遇修改线上css文件内引用的背景图，需要在相应url后添加版本号，如：1background: url(images/sprite.png?v=20160616); id和class使用规范 class应以功能或内容命名，不以表现形式命名 class和id单词字母小写，多个单词组成时，采用中划线-分隔 使用唯一的id作为JavaScript hook，同时避免创建无样式信息的class id是唯一的并是父级的，class是可以重复的并是子级的，所以id仅使用在大的模块上，class可用在重复使用率高及字级中 规避class与id重名 命名规范 规则命名采用小写加中划线-的方式，不允许使用大写字母或下划线_ 命名推荐采用更简明有语义单词进行组合，应尽量避免使用中文拼音，尤其是首字母简拼 DOM一律不准使用id挂载css，且避免id和class重名 规则名称中不应该包含颜色(red/blue)、大小(width/height)等信息，应该使用其意义或功能命名，而不是样式显示结果 禁止类名中出现ad字样，防止被广告插件屏蔽 取父级元素id/class命名部分命名123&lt;div id=&quot;main&quot;&gt; &lt;div class=&quot;main_firstnav&quot;&gt;&lt;div&gt;&lt;/div&gt; 书写规范 禁止直接为html的tag添加css样式，如： 1div &#123;color: red;&#125; 尽量避免使用!important 如果可以，颜色尽量用三位字符表示 0后面不需要单位，0.8px可以略写成.8px 如果没有边框时，不要写成 1border: 0; 应该写成 1border: 0 none; background、font等可以缩写的属性，尽量使用缩写形式，合并margin、padding、border的值时，尽量使用缩写 规范属性书写顺序 显示、位置属性(Positioning)display, position, left, top, float, clear, list-style 自身属性(Box model)width, height, margin, padding, border 背景、行高(Typographic)background, line-height 文本属性(Visual)color, font, text-decroration, text-align, white-space, vertical-align, word-wrap, word-break 其他(Other)cursor, z-index, zoom, opacity css3transform, transition, animation, box-shadow, border-radius hack12345678910111213141516171819202122232425262728293031323334.declaration-order &#123; /* Positioning */ position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: 100; /* Box model */ display: block; box-sizing: border-box; width: 100px; height: 100px; padding: 10px; border: 1px solid #e5e5e5; border-radius: 3px; margin: 10px; float: right; overflow: hidden; /* Typographic */ font: normal 13px &quot;Helvetica Neue&quot;, sans-serif; line-height: 1.5; text-align: center; /* Visual */ background-color: #f5f5f5; color: #fff; opacity: .8; /* Other */ cursor: pointer;&#125; 排版规范单行书写 多个selector共用一个样式集时，多个selector之间作为分隔标识的逗号后需要一个空格 每一个规则的大括号{前后都添加一个空格 属性名与值得冒号前不加空格，冒号之后加空格 每一个属性值后必须添加分号，并且分号后空格1selector, selector2, selector3 &#123; display: block; width: 100px; border: 1px solid #F00; &#125; 多行书写 多个selector共用一个样式集时，多个selector单独成行 每一个规则的大括号{前添加空格 属性名与值得冒号前不加空格，冒号之后加空格 每一个属性值后必须添加分号1234567selector,selector2,selector3 &#123; dispaly: block; width: 100px; border: 1px solid #F00;&#125; 链接的样式顺序a:link-&gt;a:visited-&gt;a:hover-&gt;a:active 正确使用display属性display属性会影响页面的渲染，请合理使用 display: inline后不应该再使用 width、height、margin、padding以及float； display: inline-block后不应该再使用float； display: block后不应该再使用vertical-align； display: table-*后不应该再使用margin或者float； 不要使用@import与&lt;link&gt;相比，@import要慢很多，不光增加额外的请求数，还会导致不可预料的问题，替代办法： 使用多个元素； 通过Sass或Less类似的CSS预处理器将多个CSS文件编译为一个文件 其他CSS文件合并工具 媒体查询将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘123456789.element &#123; ... &#125;.element-avatar &#123; ... &#125;.element-selected &#123; ... &#125;@media (max-width: 768px) &#123; .element &#123; ...&#125; .element-avatar &#123; ... &#125; .element-selected &#123; ... &#125;&#125; 其他 在可以不使用引号的情况下尽量不使用引号 使用单引号，不建议使用双引号 开发阶段的css 文件（非单条样式集），为了能够对开发人员友好，不要求压缩为单行。发布生产的css 文件，外联文件或内联片段都需要压缩为单行，且删除注释与非属性值内空格。 性能优化 选择器应该在满足功能的基础上尽量简洁，减少嵌套选择器的查询消耗 在保持代码解耦的前提下，尽量合并重复的样式，例如： 12h1&#123;color:red;&#125;p&#123;color:red;&#125; 应该写成 1color,p&#123;color:red&#125; css背景图要使用sprite技术，可按照相关度（是否模块、页面等）进行合并，并存储为web所用格式。图片优先使用png8格式保存，并适当压缩体积。在存在透明通道的情况下可使用png24图片，在色值较多的情况下，可使用jpg格式保存 充分利用html自身属性及样式继承原理减少代码量。例如 123&lt;ul&gt; &lt;li&gt;这里是标题&lt;span&gt;2016-8-7&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; 中定义 12345ul li&#123; position: relative; &#125;ul li span&#123; position: absolute; right: 0;&#125; 即可实现日期居右显示 提升CSS选择器性能CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免使用消耗更多匹配时间的选择器。而在这之前我们需要了解CSS选择器匹配的机制，如子选择器规则：1#header &gt; a &#123;font-weight:blod;&#125; CSS选择器是从右到左进行规则匹配。了解这个机制后，例子中看似高效的选择器在实际中的匹配开销是很高的，浏览器必须遍历页面中所有的a元素并且确定其父元素的id是否为header。如果把例子的子选择器改为后代选择器则会开销更多，在遍历页面中所有a元素后还需向其上级遍历直到根节点1#header a &#123; font-weight: bold;&#125; 理解了CSS选择器从右到左匹配的机制后，明白只要当前选择符的左边还有其他选择符，样式系统就会继续向左移动，直到找到和规则匹配的选择符，或者因为不匹配而退出 避免使用通用选择器 1.content * &#123; color: red; &#125; 浏览器匹配文档中所有的元素后分别向上逐级匹配class为content的元素，直到文档的根节点。因此其匹配开销是非常大的，所以应避免使用关键选择器是通配选择器的情况 避免使用标签或class选择器限制id选择器 1234/* Not recommended */button#backButton &#123;…&#125;/* Recommended */#newMenuIcon &#123;…&#125; 避免使用标签限制class选择器 1234/* Not recommended */treecell.indented &#123;…&#125;/* Recommended */.treecell-indented &#123;…&#125; 避免使用多层标签选择器，使用class选择器替换，减少css查找 1234/* Not recommended */treeitem[mailfolder=&quot;true&quot;] &gt; treerow &gt; treecell &#123;…&#125;/* Recommended */.treecell-mailfolder &#123;…&#125; 避免使用子选择器 123456/* Not recommended */treehead treerow treecell &#123;…&#125;/* Recommended */treehead &gt; treerow &gt; treecell &#123;…&#125;/* Much to recommended */.treecell-header &#123;…&#125; 使用继承 1234/* Not recommended */#bookmarkMenuItem &gt; .menu-left &#123; list-style-image: url(blah) &#125;/* Recommended */#bookmarkMenuItem &#123; list-style-image: url(blah) &#125; 常用的CSS命名规则页面结构 容器: container页头：header内容：content/container页面主体：main页尾：footer导航：nav侧栏：sidebar栏目：column页面外围控制整体佈局宽度：wrapper左右中：left right center 导航 导航：nav主导航：mainnav子导航：subnav顶导航：topnav边导航：sidebar左导航：leftsidebar右导航：rightsidebar菜单：menu子菜单：submenu标题: title摘要: summary 功能 标志：logo广告：banner登陆：login登录条：loginbar注册：register搜索：search功能区：shop标题：title加入：joinus状态：status按钮：btn滚动：scroll标籤页：tab文章列表：list提示信息：msg当前的: current小技巧：tips图标: icon注释：note指南：guild服务：service热点：hot新闻：news下载：download投票：vote合作伙伴：partner友情链接：link版权：copyright JavaScript编码规范变量声明 命名要有意义，可读性强 声明变量必须加上var关键字，严格控制作用域 私有变量名用下划线_开头 参数大于3个时，应以对象形式作为参数集传递 一般变量名用下划线分隔方式或者驼峰方式 驼峰方式命名的变量第一个字母小写，剩下的每个有意义的单词的首字母大写 12var class_name = &quot;sunny&quot;;var className = &quot;sunny&quot;; 常量必须使用大写字符，并用下划线分隔 1var ID_USER; 构造函数必须使用首字大写 123function Class()&#123; &#125; boolean类型的变量使用is或has开头 12var is Ready = false;var hasMoreCommands = false; 书写规范 即使只有一条语句也最好不要省略{} 123if (boolean) &#123; return;&#125; 使用{}代替new Object()，使用[]代替new Array() 1var arr = [], obj = &#123;&#125;; 每个语句结束必须使用分号 尽量不要让每行超过120字符超长的不可分割的代码例外，比如复杂的正则表达式运算符处换行时，运算符必须在新行的行首1234567if (user.isAuthenticated() &amp;&amp; user.isInRole(&apos;admin&apos;) &amp;&amp; user.hasAuthority(&apos;add-admin&apos;) || user.hasAuthority(&apos;delete-admin&apos;))&#123; // code&#125; 接口命名规范 可读性强，见名晓义 尽量不与jQuery社区已有的习惯冲突 尽量写全，不用缩写，除非是下面列表中约定的： options：表示选项，与 jQuery 社区保持一致，不要用 config, opts 等active：表示当前，不要用 current 等index：表示索引，不要用 idx 等trigger：触点元素triggerType：表示触发类型、方式context：表示传入的 this 对象object：推荐写全，不推荐简写为 o, obj 等element：推荐写全，不推荐简写为 el, elem 等length：不要写成 len, lprev：previous 的缩写next：next 下一个constructor：不能写成 ctoreasing：示动画平滑函数min：minimize 的缩写max：maximize 的缩写DOM：不要写成 dom, Dom.hbs：使用 hbs 后缀表示模版btn：button 的缩写link：超链接title：主要文本img：图片路径（img标签src属性）dataset：html5 data-xxx 数据接口theme：主题className：类名classNameSpace：class 命名空间 空格、缩进、空行 语句中的必要空格和缩进，缩进的单位为四个空格 =前后需要跟空格，建议数值操作符(如：+/-/*/%)两边留空 1var name = &quot;Tom&quot;; for循环条件中，分号后留一空格 123for( var i = 0; i &lt; 10; i++)&#123; // dosomething&#125; 变量声明语句，数组值，对象值及函数参数中的逗号后留一空格 1234var a = 0, b = 1, c = 2;var arr = [1, 2, 3];var obj = &#123;a: 1, b: 2, c: 3&#125;;function(a, b, c)&#123;&#125; 空行不要有空格，行尾不要有空格 逗号和冒号后一定要跟空格，点号前后不要出现空格 空对象和数组不要填入空格 不要吝啬空行，尽量使用空行将逻辑相关的代码块分割开，以提高程序的可读性 合理的格式化和缩进1234567891011121314151617181920212223var obj = &#123; getName: &quot;1&quot;, setName: &quot;0&quot;&#125;if (success) &#123; doSomething(1);&#125; else if (fail) &#123; doSomething(2);&#125; else &#123; doSomething(3);&#125;switch (variable) &#123; case &apos;1&apos;: // do... break; case &apos;2&apos;: // do... break; default: // do...&#125; 类型转换 建议转换成string时，使用+ &#39;&#39; 1234567// goodnum + &apos;&apos;;// badnew String(num);num.toString();String(num); 建议转换成number时，使用+ 12345// good+str;// badNumber(str); 使用parseInt时，建议加上进制 1parseInt(&quot;1&quot;, 10); True和False布尔值 下列值在布尔表达式中结果为false nullundefined‘’ // 空字符串0 //数字 而下面的为true ‘0’ // 字符串[] //空数组{} // 空对象 还有一些难以区分的表达式，以下表达式结果为true123456789101112131415161718192021Boolean(&apos;0&apos;) == true&apos;0&apos; != true0 != null0 == []0 == falseBoolean(null) == falsenull != truenull != falseBoolean(undefined) == falseundefined != trueundefined != falseBoolean([]) == true[] != true[] == falseBoolean(&#123;&#125;) == true&#123;&#125; != true&#123;&#125; != false 不要在Array上使用for infor-in循环只用于object/map/hash的遍历，对Array用for-in循环有时会出错，因为它不是从0到length - 1进行遍历，而是所有出现在对象及其原型链的键值12345678910111213141516171819202122// Not recommendedfunction printArray(arr) &#123; for (var key in arr) &#123; print(arr[key]); &#125;&#125;printArray([0,1,2,3]); // This works.var a = new Array(10);printArray(a); // This is wrong.a = document.getElementsByTagName(&apos;*&apos;);printArray(a); // This is wrong.// Recommendedfunction printArray(arr) &#123; var l = arr.length; for (var i = 0; i &lt; l; i++) &#123; print(arr[i]); &#125;&#125; 二元和三元操作符操作符始终写在前一行12345678var x = a ? b : c;var y = a ? longButSimpleOperandB : longButSimpleOperandC;var z = a ? moreComplicatedB : moreComplicatedC; 条件操作符三元操作符用于替代if条件判断语句123456789// Not recommendedif (val != 0) &#123; return foo();&#125; else &#123; return bar();&#125;// Recommendedreturn val ? foo() : bar(); &amp;&amp;和||二元布尔操作符是可短路的，只有在必要时才会计算到最后一项123456789101112131415// Not recommendedfunction foo(opt_win) &#123; var win; if (opt_win) &#123; win = opt_win; &#125; else &#123; win = window; &#125; // ...&#125;// Recommendedfunction foo(opt_win) &#123; var win = opt_win || window; // ...&#125; 12345678910111213// Not recommendedif (node) &#123; if (node.kids) &#123; if (node.kids[index]) &#123; foo(node.kids[index]); &#125; &#125;&#125;// Recommendedvar kid = node &amp;&amp; node.kids &amp;&amp; node.kids[index];if (kid) &#123; foo(kid);&#125; jQuery规范建议使用最新版本的jQuery，版本越新，性能越好 jQuery变量 存放jQuery对象的变量以$开头 将jQuery选择器返回的对象缓存到本地变量中复用 使用驼峰式命名变量12var $myDiv = $(&quot;#myDiv&quot;);$myDiv.click(function()&#123;...&#125;); jQuery选择器 尽可能的使用 ID 选择器，因为它会调用浏览器原生方法document.getElementById查找元素。当然直接使用原生document.getElementById方法性能会更好 在父元素中选择子元素使用.find()方法性能会更好，因为ID选择器没有使用到Sizzle选择器引擎来查找元素12345// Not recommendedvar $productIds = $(&quot;#products .class&quot;);// Recommendedvar $productIds = $(&quot;#products&quot;).find(&quot;.class&quot;); DOM操作 当要操作DOM元素的时候，尽量将其分离节点，操作结束后，再插入节点 使用字符串连接使用array.join要比.append()性能更好1234567891011121314151617181920// Not recommendedvar $myList = $(&quot;#list&quot;);for(var i = 0; i &lt; 10000; i++)&#123; $myList.append(&quot;&lt;li&gt;&quot;+i+&quot;&lt;/li&gt;&quot;);&#125;// Recommendedvar $myList = $(&quot;#list&quot;);var list = &quot;&quot;;for(var i = 0; i &lt; 10000; i++)&#123; list += &quot;&lt;li&gt;&quot;+i+&quot;&lt;/li&gt;&quot;;&#125;$myList.html(list);// Much to recommendedvar array = [];for(var i = 0; i &lt; 10000; i++)&#123; array[i] = &quot;&lt;li&gt;&quot;+i+&quot;&lt;/li&gt;&quot;;&#125;$myList.html(array.join(&apos;&apos;)); 事件 如果需要，对事件使用自定义的namespace，这样容易解绑特定的事件，而不会影响到此DOM元素的其他事件监听 对Ajax加载的DOM元素绑定事件时尽量使用事件委托，事件委托允许在父元素绑定事件，子代元素可以响应事件，也包括Ajax加载后添加的子代元素12345// Not recommended$(&quot;#list a&quot;).on(&quot;click&quot;, myClickHandler);// Recommended$(&quot;#list&quot;).on(&quot;click&quot;, &quot;a&quot;, myClickHandler); 链式写法 尽量使用链式写法而不是用变量缓存或者多次调用选择器的方法 当链式写法超过三次或者因为事件绑定变得复杂后，使用换行和缩进保持代码可读性123456$(&quot;#myDiv&quot;).addClass(&quot;error&quot;).show();$(&quot;#myLink&quot;) .addClass(&quot;bold&quot;) .on(&quot;click&quot;, myClickHandler) .on(&quot;mouseover&quot;, myMouseOverHandler) .show(); 性能优化避免不必要的DOM操作浏览器遍历 DOM 元素的代价是昂贵的。最简单优化DOM树查询的方案是，当一个元素出现多次时，将它保存在一个变量中，就避免多次查询 DOM 树了12345678910111213// Not recommendedfor (var i = 0; i &lt; 100; i++) &#123; document.getElementById(&quot;myList&quot;).innerHTML += &quot;&lt;span&gt;&quot; + i + &quot;&lt;/span&gt;&quot;;&#125;// Recommendedvar myList = &quot;&quot;;var myListHTML = document.getElementById(&quot;myList&quot;).innerHTML;for (var i = 0; i &lt; 100; i++) &#123; myList += &quot;&lt;span&gt;&quot; + i + &quot;&lt;/span&gt;&quot;;&#125;myListHTML = myList; 缓存数组长度循环无疑是和JavaScript性能非常相关的一部分，通过存储数组的长度，可以有效避免每次循环重新计算1234567891011var arr = new Array(1000), len, i;// Recommended - size is calculated only 1 time and then storedfor (i = 0, len = arr.length; i &lt; len; i++) &#123;&#125;// Not recommended - size needs to be recalculated 1000 timesfor (i = 0; i &lt; arr.length; i++) &#123;&#125; 异步加载第三方内容当你无法保证嵌入第三发内容可以正常工作的时候，你需要考虑用异步加载这些代码，以免阻塞整个页面加载1234567891011121314151617(function() &#123; var script, scripts = document.getElementsByTagName(&apos;script&apos;)[0]; function load(url) &#123; script = document.createElement(&apos;script&apos;); script.async = true; script.src = url; scripts.parentNode.insertBefore(script, scripts); &#125; load(&apos;//apis.google.com/js/plusone.js&apos;); load(&apos;//platform.twitter.com/widgets.js&apos;); load(&apos;//s.widgetsite.com/widget.js&apos;);&#125;()); 避免使用jQuery实现动画 禁止使用slideUp/Down() fadeIn/Out()等方法 尽量不使用animate()方法 注释 如无必要，勿增注释 如有必要，尽量详尽 单行注释12//名称var name = 0; 多行注释使用多个单行注释 123// code// code// code 函数/方法注释1234567891011121314151617/** * 函数描述 * * @param &#123;string&#125; p1 参数1的说明 * @param &#123;string&#125; p2 参数2的说明，比较长 * 那就换行了. * @param &#123;number=&#125; p3 参数3的说明（可选） * @return &#123;Object&#125; 返回值描述 */function foo(p1, p2, p3) &#123; var p3 = p3 || 10; return &#123; p1: p1, p2: p2, p3: p3 &#125;;&#125; sublime中安装DocBlock插件，方便注释编写","categories":[],"tags":[{"name":"-前端开发规范","slug":"前端开发规范","permalink":"http://yy709593266.github.io/blog/tags/前端开发规范/"}]},{"title":"HEXO搭建个人博客","slug":"20160611-start","date":"2016-06-11T08:09:43.000Z","updated":"2017-05-08T09:26:00.000Z","comments":true,"path":"2016/06/11/20160611-start/","link":"","permalink":"http://yy709593266.github.io/blog/2016/06/11/20160611-start/","excerpt":"第一次使用hexo搭建个人博客，记录下搭建全过程。","text":"第一次使用hexo搭建个人博客，记录下搭建全过程。 1、github上新建仓库blog； 2、安装hexo首先要安装node环境，以及git1$ npm install hexo -g 3、新建本地博客文件夹hexo init filename1$ hexo init &apos;blog&apos; 生成的文件夹中的source文件夹用来存放博客正文内容 source 4、创建新博客(文章)找到source文件夹，在该文件夹下的_posts文件夹下创建博客名为start的博客1$ hexo new &apos;start&apos; 5、更换主题(可选)：github上clone下nexT主题1git clone nexT&apos;url 注意将主题clone到theme文件夹中； 6、主题配置: http://theme-next.iissnan.com/包括：标签页，分类，关于等… 7、站点配置中添加1theme: next 8、发布本地博客预览hexo cleanhexo g：generator将md文件转换成html文件hexo server: 启动本地服务浏览器中输入localhost:4000预览 9、发布远程博客配置(这是我的)站点配置文件中添加配置文件1234deploy: type: git repository: https://github.com/yy709593266/yy709593266.github.io.git branch: master 10、发布1hexo deploy 11、访问个人博客网站：http://yy709593266.github.io/ 附：具体操作参考文档hexo中文文档 🙏：感谢大神对我的支持和帮助。棒棒哒。。。哈哈哈","categories":[],"tags":[{"name":"-hexo -博客 -github","slug":"hexo-博客-github","permalink":"http://yy709593266.github.io/blog/tags/hexo-博客-github/"}]}]}