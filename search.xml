<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[node和mongodb实例搭建]]></title>
      <url>http://yy709593266.github.io/blog/2018/11/05/20181105-node&mongodb/</url>
      <content type="html"><![CDATA[<p>初步使用<code>node</code>和<code>mongodb</code>搭建一个小实例，了解从前端到后端的整体流程。<a id="more"></a></p>
<h4 id="服务和路由"><a href="#服务和路由" class="headerlink" title="服务和路由"></a>服务和路由</h4><p>首先是启一个node服务，并将实例对应的几个页面路由搭建好，剩下的就是在路由文件中添加内容了。</p>
<ul>
<li><p><code>npm init</code>创建项目</p>
</li>
<li><p><code>npm install express jade moment mongoose --save</code>安装依赖包</p>
</li>
<li><p><code>app.js</code>创建入口文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.js</span></div><div class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span></div><div class="line"><span class="keyword">let</span> app = express()</div><div class="line"></div><div class="line"><span class="comment">//设置视图的根目录</span></div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</div><div class="line"><span class="comment">//设置默认模版引擎</span></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>)</div><div class="line"><span class="comment">//启动服务</span></div><div class="line">app.listen(port)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`server started on port <span class="subst">$&#123;port&#125;</span>`</span>)</div><div class="line"></div><div class="line"><span class="comment">//添加路由</span></div><div class="line"><span class="comment">//index page</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'实例首页'</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//detail page</span></div><div class="line">app.get(<span class="string">'/movie/:id'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'实例详情页'</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//admin page</span></div><div class="line">app.get(<span class="string">'/admin/movie'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'实例后台录入页'</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//list page</span></div><div class="line">app.get(<span class="string">'/admin/list'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'实例列表'</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>项目基本结构如下：</p>
<p><img src="https://raw.githubusercontent.com/yy709593266/blog_pictures/master/node_mongodb-start/Snip20181105_1.png" alt=""></p>
</li>
<li><p><code>node app.js</code>启动服务，浏览器中查看<a href="http://localhost:3000/" target="_blank" rel="external">localhost:3000</a></p>
</li>
</ul>
<h4 id="bower安装前端库"><a href="#bower安装前端库" class="headerlink" title="bower安装前端库"></a><code>bower</code>安装前端库</h4><p>项目中需要用到几个库通过<code>bower</code>安装下：<code>jquery</code>，<code>bootstrap</code></p>
<p><em>注意</em>：<code>bower</code>需要全局安装<code>npm install bower -g</code></p>
<p>这里用到了<code>bower</code>就要了解下<a href="http://www.cnblogs.com/aliwa/p/7677858.html" target="_blank" rel="external">bower和npm有什么区别</a></p>
<p>为了采用模块化开发，将通用的能提取的都提取出来，重新构建了项目目录</p>
<p><code>layout.jade</code>页面总体布局</p>
<p><code>head.jade</code>总体的css／js模块</p>
<p><code>page</code>文件夹用来放置jade页面</p>
<p>这里为了将所有的静态文件放在同一个文件中，需要在bootstrap和jquery之前进行一下配置，就像package一样，新建一个.bowerrc文件，告诉bower依赖安装在什么位置</p>
<h4 id="假数据的页面搭建"><a href="#假数据的页面搭建" class="headerlink" title="假数据的页面搭建"></a>假数据的页面搭建</h4><p>数据库建立之前使用假数据渲染所有页面，整体页面文件目录如下：</p>
<p><img src="https://github.com/yy709593266/blog_pictures/blob/master/node_mongodb-start/Snip20181118_5.png?raw=true" alt="整体页面文件目录"></p>
<p>假数据文件内容如下：</p>
<p><code>app.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">let</span> port = process.env.PORT || <span class="number">3000</span></div><div class="line"><span class="keyword">let</span> app = express()</div><div class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</div><div class="line"></div><div class="line"><span class="comment">//设置视图的根目录</span></div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views/pages'</span>)</div><div class="line"></div><div class="line"><span class="comment">//设置默认模版引擎</span></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>)</div><div class="line"></div><div class="line"><span class="comment">//查找静态资源的路径</span></div><div class="line">app.use(express.static(path.join(__dirname, <span class="string">'bower_components'</span>)))</div><div class="line"></div><div class="line"><span class="comment">//对post请求体的解析，然后能通过req.body对请求参数进行获取</span></div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</div><div class="line"><span class="comment">// app.use(bodyParser.urlencoded(&#123; extended: false &#125;))  // parse application/x-www-form-urlencoded  </span></div><div class="line"><span class="comment">// app.use(bodyParser.json()) // parse application/json </span></div><div class="line"></div><div class="line"><span class="comment">//启动服务</span></div><div class="line">app.listen(port)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`server started on port <span class="subst">$&#123;port&#125;</span>`</span>)</div><div class="line"></div><div class="line"><span class="comment">//添加路由</span></div><div class="line"><span class="comment">//index page</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'六个周 首页'</span>,</div><div class="line">        <span class="attr">movies</span>:[&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">1</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">2</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">3</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">4</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">5</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">6</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">7</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">8</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">9</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;,&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">            <span class="attr">_id</span>:<span class="number">10</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">        &#125;]</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//detail page</span></div><div class="line">app.get(<span class="string">'/movie/:id'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'detail'</span>, &#123;</div><div class="line">        <span class="attr">title</span>:<span class="string">'detail 详情页'</span>,</div><div class="line">        <span class="attr">movie</span>:&#123;</div><div class="line">            <span class="attr">doctor</span>:<span class="string">'六个周'</span>,</div><div class="line">            <span class="attr">counter</span>:<span class="string">'China'</span>,</div><div class="line">            <span class="attr">title</span>:<span class="string">'人生缘编程'</span>,</div><div class="line">            <span class="attr">year</span>:<span class="number">2019</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span>,</div><div class="line">            <span class="attr">language</span>:<span class="string">'汉语'</span>,</div><div class="line">            <span class="attr">flash</span>:<span class="string">'https://www.六个周.com/video/1226'</span>,</div><div class="line">            <span class="attr">summary</span>:<span class="string">'1.，生命太短暂，不要去做一些根本没有人想要的东西。——Ash Maurya。2，如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子。——David Leinweber。3，软件设计有两种方式：一种方式是，使软件过于简单，明显没有缺陷；另一种方式是，使软件过于复杂，没有明显的缺陷。——C.A.R. Hoare。4，软件开发往往是这样：最开始的 90% 代码占用了开始的 90% 的开发时间；剩下 10% 代码同样需要 90% 的开发时间。——Tom Cargill'</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//admin page</span></div><div class="line">app.get(<span class="string">'/admin/movie'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'admin'</span>, &#123;</div><div class="line">        <span class="attr">title</span>:<span class="string">'六个周 后台录入页'</span>,</div><div class="line">        <span class="attr">movie</span>:&#123;</div><div class="line">            <span class="attr">title</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">doctor</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">country</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">year</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">poster</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">flash</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">summary</span>:<span class="string">''</span>,</div><div class="line">            <span class="attr">language</span>:<span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//list page</span></div><div class="line">app.get(<span class="string">'/admin/list'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'list'</span>, &#123;</div><div class="line">        <span class="attr">title</span>:<span class="string">'六个周 列表页'</span>,</div><div class="line">        <span class="attr">movies</span>:[</div><div class="line">            &#123;</div><div class="line">                <span class="attr">title</span>:<span class="string">'Node.js指南'</span>,</div><div class="line">                <span class="attr">_id</span>:<span class="number">1</span>,</div><div class="line">                <span class="attr">doctor</span>:<span class="string">'六个周'</span>,</div><div class="line">                <span class="attr">country</span>:<span class="string">'China'</span>,</div><div class="line">                <span class="attr">year</span>:<span class="number">2019</span>,</div><div class="line">                <span class="attr">language</span>:<span class="string">'汉语'</span>,</div><div class="line">                <span class="attr">flash</span>:<span class="string">'https://www.jianshu.com/u/5842abb77bd1'</span>,</div><div class="line">                <span class="attr">summary</span>:<span class="string">'1.，生命太短暂，不要去做一些根本没有人想要的东西。——Ash Maurya。2，如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子。——David Leinweber。3，软件设计有两种方式：一种方式是，使软件过于简单，明显没有缺陷；另一种方式是，使软件过于复杂，没有明显的缺陷。——C.A.R. Hoare。4，软件开发往往是这样：最开始的 90% 代码占用了开始的 90% 的开发时间；剩下 10% 代码同样需要 90% 的开发时间。——Tom Cargill'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="mongodb创造前后端项目"><a href="#mongodb创造前后端项目" class="headerlink" title="mongodb创造前后端项目"></a><code>mongodb</code>创造前后端项目</h4><p>假数据传入后页面已经可以正常显示了，下面就需要结合数据库和后端来实现一个真正的应用了。<a href="https://cn.mongoosedoc.top/docs/api.html#schema_Schema-pre" target="_blank" rel="external">mongoose中文文档</a></p>
<h5 id="MongoDB的四大元素的理解"><a href="#MongoDB的四大元素的理解" class="headerlink" title="MongoDB的四大元素的理解"></a>MongoDB的四大元素的理解</h5><p>不同于关系型数据库，MongoDB作为文档型数据库，Scheme、model、collection、document是其中的四大元素。document是MongoDB里的基本存储单位，collection是众多同类document的集合。Schema定义了一类document的模板，让这一类document在数据库中有一个具体的构成、存储模式。而Schema仅仅是定义了Document是什么样子的，至于生成document和对document进行各种操作（增删改查）则是通过相对应的model来进行的。</p>
<p>　　需要说明的是MongoDB中实际上只有collection和document，Schema和model不过是定义和生成前二者过程中的工具而已。</p>
<h5 id="项目中创建数据库"><a href="#项目中创建数据库" class="headerlink" title="项目中创建数据库"></a>项目中创建数据库</h5><ul>
<li><p>在项目根目录下新建文件夹schemas（模式声明）、models（模型）、controllers。<br>分别在schemas中和models中添加movie.js文件</p>
</li>
<li><p>安装mongoose模块并在app.js中进行引入</p>
</li>
<li><p>将之前写死的数据通过数据获取和存储，这里拿出一个实例如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">    Movie.fetch(<span class="function">(<span class="params">err, movies</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">if</span>(err)&#123;</div><div class="line">            <span class="built_in">console</span>.log(err)</div><div class="line">        &#125;</div><div class="line">        res.render(<span class="string">'index'</span>, &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'首页'</span>,</div><div class="line">            <span class="attr">movies</span>: movies</div><div class="line">            <span class="comment">// movies:[&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:1,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:2,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:3,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:4,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:5,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:6,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:7,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:8,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:9,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     title:'Node.js指南',</span></div><div class="line">            <span class="comment">//     _id:10,</span></div><div class="line">            <span class="comment">//     poster:'http://img4.imgtn.bdimg.com/it/u=1178625225,3686148785&amp;fm=26&amp;gp=0.jpg'</span></div><div class="line">            <span class="comment">// &#125;]</span></div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里涉及到的方法有Movie的<code>fetch</code>（获取），<code>findById</code>（查找），<code>remove</code>（删除）几种方法。</p>
<p>这里，关于mongo数据库的命令行的基本操作和连接，以及可视化工具mongobooster的使用可以参考<a href="http://yy709593266.github.io/2018/06/03/20180603-node%E5%9F%BA%E7%A1%80/#more">Node基础</a>中第五章对mongo数据库的使用介绍。</p>
<h5 id="举例接口详解"><a href="#举例接口详解" class="headerlink" title="举例接口详解"></a>举例接口详解</h5><p>这里举例删除接口进行详细介绍：</p>
<p>因为这里删除不会跳转到一个新的路由中，只是在当前的table页中删除制定项，所以这里不能像其他接口那样，直接在app.js文件中处理</p>
<p>这里需要为删除页面单独引入一个js文件–&gt;admin.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除逻辑</span></div><div class="line"></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">".del"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> target = e.target</div><div class="line">        <span class="keyword">var</span> id =target.getAttribute(<span class="string">'data_id'</span>)</div><div class="line">        <span class="keyword">var</span> tr =$(<span class="string">'.item-id-'</span>+id)</div><div class="line">    </div><div class="line">        $.ajax(&#123;</div><div class="line">            <span class="attr">type</span>:<span class="string">"DELETE"</span>,</div><div class="line">            <span class="attr">url</span>:<span class="string">'/admin/list?id='</span>+id</div><div class="line">        &#125;)</div><div class="line">        .done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(res.code*<span class="number">1</span> ===<span class="number">200</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(tr.length&gt;<span class="number">0</span>)&#123;</div><div class="line">                    tr.remove()</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里通过ajax请求，走到app.js中，再对传入的id找到相应项，通过数据库查找并删除该项，删除成功后接口返回对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">code</span>: <span class="string">'200'</span>,</div><div class="line">    <span class="attr">message</span>: success,</div><div class="line">    <span class="attr">data</span>: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>admin.js中接收到接口返回的值，通过对code码是200的判断，对视觉上的表格数据进行删除（或者重新获取列表数据来对数据进行刷新）。</p>
<h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>到此为止，整个项目的主要功能包括</p>
<p>1.查看电影列表</p>
<p>2.增加电影</p>
<p>3.修改电影信息</p>
<p>4.删除电影</p>
<p>所有代码可以直接去<a href="https://github.com/yy709593266/node_mongodb-Start" target="_blank" rel="external">github</a>下载，安装完指定依赖后直接运行app.js文件<code>node app.js</code>后访问<a href="http://localhost:3000" target="_blank" rel="external">localhost:3000</a>即可</p>
<p><a href="https://www.jianshu.com/p/e4ae09c0dc14" target="_blank" rel="external">本文参考</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解析赋值]]></title>
      <url>http://yy709593266.github.io/blog/2018/10/27/%E8%A7%A3%E6%9E%90%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<p><code>ES6</code> 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构<code>（Destructuring）</code>。<a id="more"></a></p>
<h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><p>模式匹配–等号两遍模式相同，左边的变量会被赋予对应的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">let [foo, [[bar], baz]] = [1, [[2], 3]];</div><div class="line">foo // 1</div><div class="line">bar // 2</div><div class="line">baz // 3</div><div class="line"></div><div class="line">let [ , , third] = [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;];</div><div class="line">third // &quot;baz&quot;</div><div class="line"></div><div class="line">let [x, , y] = [1, 2, 3];</div><div class="line">x // 1</div><div class="line">y // 3</div><div class="line"></div><div class="line">let [head, ...tail] = [1, 2, 3, 4];</div><div class="line">head // 1</div><div class="line">tail // [2, 3, 4]</div><div class="line"></div><div class="line">let [x, y, ...z] = [&apos;a&apos;];</div><div class="line">x // &quot;a&quot;</div><div class="line">y // undefined</div><div class="line">z // []</div></pre></td></tr></table></figure>
<h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p><code>ES6</code>内部使用严格相等运算符<code>===</code>，因此只有当一个数组成员严格等于<code>undefined</code>默认值才会生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">let [foo = true] = [];</div><div class="line">foo // true</div><div class="line"></div><div class="line">let [x, y = &apos;b&apos;] = [&apos;a&apos;]; // x=&apos;a&apos;, y=&apos;b&apos;</div><div class="line">let [x, y = &apos;b&apos;] = [&apos;a&apos;, undefined]; // x=&apos;a&apos;, y=&apos;b&apos;</div><div class="line"></div><div class="line">function f() &#123;</div><div class="line">  console.log(&apos;aaa&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let [x = f()] = [1];</div><div class="line">x // 1</div></pre></td></tr></table></figure>
<h4 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h4><h5 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h5><p>对象的解构与数组的一个重要的不同：数组元素是按次序排列赋值；对象的属性没有次序，变量必须与属性同名才能取值，当然，找不到的依然是<code>undefined</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let &#123; bar, foo &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</div><div class="line">foo // &quot;aaa&quot;</div><div class="line">bar // &quot;bbb&quot;</div><div class="line"></div><div class="line">let &#123; foo: baz &#125; = &#123; foo: &apos;aaa&apos;, bar: &apos;bbb&apos; &#125;;</div><div class="line">baz // &quot;aaa&quot;</div><div class="line"></div><div class="line">let &#123; baz &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</div><div class="line">baz // undefined</div></pre></td></tr></table></figure>
<p>从上面实例中可以看出，对象的解构赋值其实内在机制是这样滴</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123; foo: foo, bar: bar &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</div><div class="line">foo // &quot;aaa&quot;</div><div class="line">bar // &quot;bbb&quot;</div></pre></td></tr></table></figure>
<p>真正被赋值的是后者（变量），并不是前者（模式），虽然我们只看到了前者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const node = &#123;</div><div class="line">  loc: &#123;</div><div class="line">    start: &#123;</div><div class="line">      line: 1,</div><div class="line">      column: 5</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let &#123; loc, loc: &#123; start &#125;, loc: &#123; start: &#123; line &#125;&#125; &#125; = node;</div><div class="line">line // 1</div><div class="line">loc  // Object &#123;start: Object&#125;</div><div class="line">start // Object &#123;line: 1, column: 5&#125;</div></pre></td></tr></table></figure>
<h5 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h5><p>和数组的解构赋值一样，默认值的生效条件是对象的属性值严格等于<code>undefined</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var &#123;x = 3&#125; = &#123;x: undefined&#125;;</div><div class="line">x // 3</div><div class="line"></div><div class="line">var &#123;x = 3&#125; = &#123;x: null&#125;;</div><div class="line">x // null</div></pre></td></tr></table></figure>
<p>对象的解构赋值可以很方便的将现有对象的方法赋值到某个变量，就像介样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let &#123; log, sin, cos &#125; = Math;</div><div class="line">// Math对象有log,sin,cos方法</div></pre></td></tr></table></figure>
<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 2, 3];</div><div class="line">let &#123;0 : first, [arr.length - 1] : last&#125; = arr;</div><div class="line">first // 1</div><div class="line">last // 3</div></pre></td></tr></table></figure>
<h4 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h4><p>字符串在解构赋值时会被转换成一个类似数组的对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const [a, b, c, d, e] = &apos;hello&apos;;</div><div class="line">a // &quot;h&quot;</div><div class="line">b // &quot;e&quot;</div><div class="line">c // &quot;l&quot;</div><div class="line">d // &quot;l&quot;</div><div class="line">e // &quot;o&quot;</div><div class="line"></div><div class="line">let &#123;length : len&#125; = &apos;hello&apos;;</div><div class="line">len // 5</div></pre></td></tr></table></figure>
<h4 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h4><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let &#123;toString: s&#125; = 123;</div><div class="line">s === Number.prototype.toString // true</div><div class="line">// 都说了123会自动转换为对象，既然是对象当前有toString方法</div><div class="line"></div><div class="line">let &#123;toString: s&#125; = true;</div><div class="line">s === Boolean.prototype.toString // true</div></pre></td></tr></table></figure>
<h4 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h4><h5 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function add([x, y])&#123;</div><div class="line">  return x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add([1, 2]); // 3</div><div class="line"></div><div class="line">[[1, 2], [3, 4]].map(([a, b]) =&gt; a + b);</div><div class="line">// [ 3, 7 ]</div></pre></td></tr></table></figure>
<h5 id="默认值-2"><a href="#默认值-2" class="headerlink" title="默认值"></a>默认值</h5><p>关于函数参数的解构赋值默认值有两种情况需要注意：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function move(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123;</div><div class="line">  return [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, 0]</div><div class="line">move(&#123;&#125;); // [0, 0]</div><div class="line">move(); // [0, 0]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function move(&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123;</div><div class="line">  return [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, undefined]</div><div class="line">move(&#123;&#125;); // [undefined, undefined]</div><div class="line">move(); // [0, 0]</div></pre></td></tr></table></figure>
<p>第一种比较容易理解，对<code>x</code>和<code>y</code>进行解构赋值，只要传进来的参数不是绝对等于<code>undefined</code>就会取传进来的参数，否则取默认值；</p>
<p>第二种是对函数的参数进行解构赋值，也就是说传进来是什么就是什么，如果不传就是默认值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Promise对象]]></title>
      <url>http://yy709593266.github.io/blog/2018/10/27/Promise%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p><code>Promise</code>是异步编程的一种解决方案，如果我们有几个异步操作，并且后一个操作需要前一个操作返回的数据才能执行，这样要实现有序的异步操作，通常是一层加一层嵌套下去。为了解决这个问题，<code>ES6</code>提出了<code>Promise</code>的实现。具体如何使用。。。<a id="more"></a></p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数。<code>resolve</code>函数的作用是，在异步操作成功时调用，并将异步操作的结果作为参数传递出去；<code>reject</code>函数的作用是，在异步操作失败时调用，并将异步操作报出的错误作为参数传递出去。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(resolve, ms, <span class="string">'success'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">timeout(<span class="number">100</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// success</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>Promise</code>实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。<code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是<code>Promise</code>对象的状态变为<code>resolved</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>rejected</code>时调用（一般忽略第二个参数，错误处理交给<code>catch</code>处理）。</p>
<h5 id="跑题–被忽视的setTimeout参数"><a href="#跑题–被忽视的setTimeout参数" class="headerlink" title="跑题–被忽视的setTimeout参数"></a>跑题–被忽视的<code>setTimeout</code>参数</h5><p>看到了惊奇的事情—<code>setTimeout</code>竟然还有第三个参数。。。</p>
<p>原来第三个参数就是传入第一个参数（函数）的参数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y, z</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x+y+z)</div><div class="line">&#125;</div><div class="line">setTimeout(sum, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></div></pre></td></tr></table></figure>
<h5 id="Promise执行时间"><a href="#Promise执行时间" class="headerlink" title="Promise执行时间"></a><code>Promise</code>执行时间</h5><p><code>Promise</code>新建后就会立即执行，<code>then</code>方法指定的回调函数会在当前脚本所有同步任务完成后才执行：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</div><div class="line">  resolve();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'resolved.'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Promise</span></div><div class="line"><span class="comment">// Hi!</span></div><div class="line"><span class="comment">// resolved</span></div></pre></td></tr></table></figure>
<h5 id="Promise参数"><a href="#Promise参数" class="headerlink" title="Promise参数"></a><code>Promise</code>参数</h5><p>如果调用<code>resolve</code>函数和<code>reject</code>函数时带有参数，那么它们的参数会被传递给回调函数。<code>reject</code>函数的参数通常是<code>Error</code>对象的实例，表示抛出的错误；<code>resolve</code>函数的参数除了正常的值以外，还可能是另一个<code>Promise</code>实例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fail'</span>)), <span class="number">3000</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(p1), <span class="number">1000</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">p2.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</div><div class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</div><div class="line"><span class="comment">// Error: fail</span></div></pre></td></tr></table></figure>
<p>上面代码中，<code>p1</code>是一个 Promise，3 秒之后变为<code>rejected</code>。<code>p2</code>的状态在 1 秒之后改变，<code>resolve</code>方法返回的是<code>p1</code>。由于<code>p2</code>返回的是另一个 Promise，所以，后面的<code>then</code>语句都变成针对后者（<code>p1</code>）。又过了 2 秒，<code>p1</code>变为<code>rejected</code>，导致触发<code>catch</code>方法指定的回调函数。</p>
<p>注意：</p>
<p>调用<code>resolve</code>或<code>reject</code>并不会终结 Promise 的参数函数的执行。一般来说，调用<code>resolve</code>或<code>reject</code>以后，Promise 的使命就完成了，后继操作应该放到<code>then</code>方法里面，而不应该直接写在<code>resolve</code>或<code>reject</code>的后面。所以，最好在它们前面加上<code>return</code>语句，这样就不会有意外：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  resolve(<span class="number">1</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;).then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(r);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> resolve(<span class="number">1</span>);</div><div class="line">  <span class="comment">// 后面的语句不会执行</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Promise方法"><a href="#Promise方法" class="headerlink" title="Promise方法"></a><code>Promise</code>方法</h4><h5 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a><code>Promise.prototype.then()</code></h5><p><code>then</code>方法返回的是一个新的<code>Promise</code>实例（注意，不是原来那个<code>Promise</code>实例）。因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法，或者<code>catch</code>方法。</p>
<p>采用链式的<code>then</code>，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个<code>Promise</code>对象（即有异步操作），这时后一个回调函数，就会等待该<code>Promise</code>对象的状态发生变化，才会被调用。</p>
<p><code>then</code>方法的第二个参数一般不使用，把错误处理控制权转交给其后面的<code>catch()</code>方法。</p>
<h5 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a><code>Promise.prototype.catch()</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p.then((val) =&gt; console.log(&apos;fulfilled:&apos;, val))</div><div class="line">  .catch((err) =&gt; console.log(&apos;rejected&apos;, err));</div><div class="line"></div><div class="line">// 等同于</div><div class="line">p.then((val) =&gt; console.log(&apos;fulfilled:&apos;, val))</div><div class="line">  .then(null, (err) =&gt; console.log(&quot;rejected:&quot;, err));</div></pre></td></tr></table></figure>
<p>异步操作抛出错误和<code>then</code>方法指定的回调函数，如果运行中抛出错误，都会被<code>catch</code>方法捕获：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">getJSON(&apos;/posts.json&apos;).then(function(posts) &#123;</div><div class="line">  // ...</div><div class="line">&#125;).catch(function(error) &#123;</div><div class="line">  // 处理 getJSON 和 前一个回调函数运行时发生的错误</div><div class="line">  console.log(&apos;发生错误！&apos;, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意这里说的：<em>处理 <code>getJSON</code>和 前一个回调函数运行时发生的错误</em>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getJSON(&apos;/post/1.json&apos;).then(function(post) &#123;</div><div class="line">  return getJSON(post.commentURL);</div><div class="line">&#125;).then(function(comments) &#123;</div><div class="line">  // some code</div><div class="line">&#125;).catch(function(error) &#123;</div><div class="line">  // 处理前面三个Promise产生的错误</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，一共有三个 Promise 对象：一个由<code>getJSON</code>产生，两个由<code>then</code>产生。它们之中任何一个抛出的错误，都会被最后一个<code>catch</code>捕获。这也就是为什么一般来说，不要在<code>then</code>方法里面定义 Reject 状态的回调函数（即<code>then</code>的第二个参数），总是使用<code>catch</code>方法。</p>
<p>一般总是建议，Promise 对象后面要跟<code>catch</code>方法，这样可以处理 Promise 内部发生的错误。<code>catch</code>方法返回的还是一个 Promise 对象，因此后面还可以接着调用<code>then</code>方法。</p>
<p>注意</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Promise.resolve()</div><div class="line">.catch(function(error) &#123;</div><div class="line">  console.log(&apos;oh no&apos;, error);</div><div class="line">&#125;)</div><div class="line">.then(function() &#123;</div><div class="line">  console.log(&apos;carry on&apos;);</div><div class="line">&#125;);</div><div class="line">// carry on</div></pre></td></tr></table></figure>
<p>上面的代码因为没有报错，跳过了<code>catch</code>方法，直接执行后面的<code>then</code>方法。此时，要是<code>then</code>方法里面报错，就与前面的<code>catch</code>无关了。</p>
<h5 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a><code>Promise.prototype.finally()</code></h5><p><code>finally</code>方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>
<p><code>finally</code>方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是<code>fulfilled</code>还是<code>rejected</code>。这表明，<code>finally</code>方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。</p>
<h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a><code>Promise.all()</code></h5><p><code>Promise.all()</code>接收一个参数，它必须是<em>可以迭代的</em>，比如<em>数组</em>。它通常用来处理一些并发的异步操作，即它们的结果互不干扰，但是又需要异步执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const p = Promise.all([p1, p2, p3]);</div></pre></td></tr></table></figure>
<p><code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。</p>
<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>
<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p>
<p>注意：如果作为参数的 <code>Promise</code>实例，自己定义了<code>catch</code>方法，那么它一旦被<code>rejected</code>，并不会触发<code>Promise.all()</code>的<code>catch</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//参数有catch</div><div class="line">const p1 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  resolve(&apos;hello&apos;);</div><div class="line">&#125;)</div><div class="line">.then(result =&gt; result)</div><div class="line">.catch(e =&gt; e);</div><div class="line"></div><div class="line">const p2 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  throw new Error(&apos;p2报错了&apos;);</div><div class="line">&#125;)</div><div class="line">.then(result =&gt; result)</div><div class="line">.catch(e =&gt; e);</div><div class="line"></div><div class="line">Promise.all([p1, p2])</div><div class="line">.then(result =&gt; console.log(result))</div><div class="line">.catch(e =&gt; console.log(&apos;all错了&apos;));</div><div class="line">// [&quot;hello&quot;, Error: p2报错了]</div></pre></td></tr></table></figure>
<p>上面代码中，<code>p1</code>会<code>resolved</code>，<code>p2</code>首先会<code>rejected</code>，但是<code>p2</code>有自己的<code>catch</code>方法，该方法返回的是一个新的 Promise 实例，<code>p2</code>指向的实际上是这个实例。该实例执行完<code>catch</code>方法后，也会变成<code>resolved</code>，导致<code>Promise.all()</code>方法参数里面的两个实例都会<code>resolved</code>，因此会调用<code>then</code>方法指定的回调函数，而不会调用<code>catch</code>方法指定的回调函数，如果参数中没有<code>catch</code>就不一样了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//参数无catch</div><div class="line">const p1 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  resolve(&apos;hello&apos;);</div><div class="line">&#125;)</div><div class="line">.then(result =&gt; result)</div><div class="line">.catch(e =&gt; e);</div><div class="line"></div><div class="line">const p2 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  throw new Error(&apos;p2报错了&apos;);</div><div class="line">&#125;)</div><div class="line">.then(result =&gt; result)</div><div class="line"></div><div class="line">Promise.all([p1, p2])</div><div class="line">.then(result =&gt; console.log(result))</div><div class="line">.catch(e =&gt; console.log(&apos;all错了&apos;));</div><div class="line">// all错了</div></pre></td></tr></table></figure>
<h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a><code>Promise.race()</code></h5><p><code>Promise.race()</code>和<code>Promise.all()</code>类似，都接收一个可以迭代的参数，但是不同之处是<code>Promise.race()</code>的状态变化不是全部受参数内的状态影响，一旦参数内有一个值的状态发生的改变，那么该<code>Promise</code>的状态就是改变的状态。就跟<code>race</code>单词的字面意思一样，谁跑的快谁赢。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const p = Promise.race([</div><div class="line">  fetch(&apos;/resource-that-may-take-a-while&apos;),</div><div class="line">  new Promise(function (resolve, reject) &#123;</div><div class="line">    setTimeout(() =&gt; reject(new Error(&apos;request timeout&apos;)), 5000)</div><div class="line">  &#125;)</div><div class="line">]);</div><div class="line"></div><div class="line">p</div><div class="line">.then(console.log)</div><div class="line">.catch(console.error);</div></pre></td></tr></table></figure>
<p>上面代码中，如果 5 秒之内<code>fetch</code>方法无法返回结果，变量<code>p</code>的状态就会变为<code>rejected</code>，从而触发<code>catch</code>方法指定的回调函数。</p>
<h5 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a><code>Promise.resolve()</code></h5><p>有时需要将现有对象转为 Promise 对象，<code>Promise.resolve</code>方法就起到这个作用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Promise.resolve(&apos;foo&apos;)</div><div class="line">// 等价于</div><div class="line">new Promise(resolve =&gt; resolve(&apos;foo&apos;))</div></pre></td></tr></table></figure>
<h5 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a><code>Promise.reject()</code></h5><p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为<code>rejected</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const p = Promise.reject(&apos;出错了&apos;);</div><div class="line">// 等同于</div><div class="line">const p = new Promise((resolve, reject) =&gt; reject(&apos;出错了&apos;))</div><div class="line"></div><div class="line">p.then(null, function (s) &#123;</div><div class="line">  console.log(s)</div><div class="line">&#125;);</div><div class="line">// 出错了</div></pre></td></tr></table></figure>
<p>注意</p>
<p><code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数。这一点与<code>Promise.resolve</code>方法不一致：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const thenable = &#123;</div><div class="line">  then(resolve, reject) &#123;</div><div class="line">    reject(&apos;出错了&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Promise.reject(thenable)</div><div class="line">.catch(e =&gt; &#123;</div><div class="line">  console.log(e === thenable)</div><div class="line">&#125;)</div><div class="line">// true</div></pre></td></tr></table></figure>
<p>上面代码中，<code>Promise.reject</code>方法的参数是一个<code>thenable</code>对象，执行以后，后面<code>catch</code>方法的参数不是<code>reject</code>抛出的“出错了”这个字符串，而是<code>thenable</code>对象。</p>
<p>解决Node回调地狱的不止有<code>Promise</code>，还有<code>Generator</code>和ES7提出的<code>Async</code>实现</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[20180605-ES6Proxy应用]]></title>
      <url>http://yy709593266.github.io/blog/2018/06/05/20180605-ES6Proxy%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><code>proxy</code>从字面意思就能看出：代理，也就是代理操作，在目标前进行一次“拦截”，外界对该对象的访问都必须先通过这一层“拦截”从而对外界的访问进行一个过滤处理。<a id="more"></a></p>
<h3 id="Proxy构造函数"><a href="#Proxy构造函数" class="headerlink" title="Proxy构造函数"></a>Proxy构造函数</h3><p>既然Proxy是构造函数，那就可以生成Proxy实例来进行使用<code>new Proxy(target, handler)</code>，其中<code>target</code>表示所要拦截的目标对象，<code>handler</code>也是一个对象，用来定制拦截行为</p>
<p><a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="external">来源</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node基础]]></title>
      <url>http://yy709593266.github.io/blog/2018/06/03/20180603-node%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p><code>Node</code>出来了这么久，我到现在都还没明白它是为啥出来的，到底为了解决什么问题，怎么用，什么情况下要用，工作也快一年了，感觉自己并没有什么长进，所以想下定决心好好看看<code>Node</code>到底是个什么神奇的东西，虽然现在还没用过，至少别人问起来能说一两句<a id="more"></a></p>
<h3 id="Node出现背景"><a href="#Node出现背景" class="headerlink" title="Node出现背景"></a><code>Node</code>出现背景</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>http请求由客户端（浏览器，app…）发送请求到服务器（<code>apache</code>，<code>tomcat</code>，<code>IIS</code>…），服务器从数据库（<code>mysql</code>，<code>oracle</code>…）拿取数据，或将数据存入数据库（数据传输<code>I／O</code>），服务器拿到数据以后对数据进行解析并传给客户端页面展示。我们想要做的优化就是要缩短客户端发送请求到接收请求之间的时间，是提升web服务器性能的关键。<br>平常开发的过程中，发送请求越快当然时长越短，但是这个请求快慢我们没法控制，因为这个直接由用户的网速决定；<br>所以我们只能着手控制服务器，可以提高服务器带宽，或者DNS加速的方式来加速响应速度，请求时长自然会缩短，但是由于成本也不会无上限的提高带宽；<br>还有就是通过代码的算法更加优秀来让响应速度更快，这个就取决于程序猿们了；<br>设计模式上使用多线程，即发送一个请求就开启一个线程，但是也不是越多越好，会占内存，可能造成内存阻塞，因此线程数也要做合理的限制。例如：饭店来一个客户就有一个服务员一对一服务，来一万个就有一万个服务员一对一服务，两个客户之间不会有冲突，虽然服务员能一对一服务，但是客户来吃饭，点餐，厨师只有一百个，这里就崩了，也就是服务器和数据库之间<code>I／O</code>阻塞了，因为数据库从磁盘中读取数据的速度都是有上限的。很多大型的项目，在后期都会遇到这种<code>I／O</code>阻塞问题，现在有很多解决方式（分布式…优化磁盘读取），但是无论如何优化，磁盘的读取都是有上限，任务巨多的时候还是会<code>I／O</code>阻塞。Ryan Dahl（<code>Node</code>爸比）的工作就是写高性能的web服务，对于高性能，异步<code>I／O</code>、事件驱动是基本原则，但是用C/C++写就太痛苦了。于是他开始设想用高级语言开发Web服务。他评估了很多种高级语言，发现很多语言虽然同时提供了同步<code>I／O</code>和异步<code>I／O</code>，但是开发人员一旦用了同步<code>I／O</code>，他们就再也懒得写异步<code>I／O</code>了，所以，最终，<code>Node</code>爸比选择了JavaScript，因为JavaScript是单线程（所以，<code>Node</code>也是）执行，根本不能进行同步<code>I／O</code>操作，JavaScript的这一“缺陷”导致了它只能使用异步<code>I／O</code>。</p>
<h4 id="三大特点"><a href="#三大特点" class="headerlink" title="三大特点"></a>三大特点</h4><p><code>Node</code>的三大特点就是如何解决服务器高性能瓶颈问题：单线程，非阻塞<code>I／O</code>以及事件驱动。具体怎么理解这三个特点呢？</p>
<h5 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h5><p><code>Node</code>不为每个客户连接创建新的线程，仅仅使用一个线程，当有用户连接就触发一个内部事件，通过非阻塞<code>I／O</code>和事件驱动机制让整个程序宏观上并行。这样操作系统不再有创建和销毁线程的时间开销了。</p>
<h5 id="非阻塞I／O"><a href="#非阻塞I／O" class="headerlink" title="非阻塞I／O"></a>非阻塞<code>I／O</code></h5><p>要说什么是非阻塞<code>I／O</code>首先要知道什么是阻塞<code>I／O</code>：<br>当在访问数据库取得数据的时候，传统的单线程机制整个线程将暂停下来，等待数据库返回结果才能执行后面的代码，也就是<code>I／O</code>阻塞了代码的执行。<br><code>Node</code>采用了非阻塞<code>I／O</code>机制，在执行了访问数据库的代码之后将立即转而执行后面的代码，把数据库返回结果的处理代码放在回调函数中。<br>当某个<code>I／O</code>执行完毕，将以事件的形式通知执行<code>I／O</code>操作的线程执行回调函数。</p>
<h5 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h5><p>客户端请求建立连接，提交数据等行为会出发相应的事件，<code>Node</code>一个时刻只能执行一个事件回调函数，但是在执行一个事件回调函数的中途可以转而处理其他事件（比如又有新用户建立连接了）然后返回继续执行原事件的回调函数。不管是新用户的请求还是老用户的<code>I／O</code>完成，都将以事件方式加入事件环等待调度。<br>举一个通俗点的例子，你在餐厅吃饭，如果当时店内生意比较好，你坐下来，服务员过来招待你，这时，另一桌也刚坐下并呼叫服务员。正常情况下，服务员肯定会想给你个菜单让你自己看看，看好了再叫他，接着去招呼那一桌的客人了，完了再给你端茶什么的。</p>
<h3 id="Node学习之前"><a href="#Node学习之前" class="headerlink" title="Node学习之前"></a><code>Node</code>学习之前</h3><h4 id="V8引擎"><a href="#V8引擎" class="headerlink" title="V8引擎"></a>V8引擎</h4><p>编程语言分为编译型语言和解释型语言两类，编译型语言在执行之前要先进行完全编译，而解释型语言一边编译一边执行，很明显解释型语言的执行速度慢于编译型语言，而javascript就是一种解释型脚本语言，而且，鉴于它是在前端执行，需要及时响应用户，所以要求它可以快速的解析以及执行。<br>随着web相关技术的发展，javascript所要承担的工作任务也越来越多，早就超越了当初的“表单验证”的范畴，这就更需要快速的解析和执行js脚本，V8引擎就是为解决这一问题而生。v8引擎是一款专门对js语言进行解释和执行的流程虚拟机，如果把v8引擎嵌入到浏览器中，那么我们的js代码就能被浏览器所执行，这样，如果我们把v8引擎嵌入到<code>Node</code>环境中，那么我们的js代码就能被服务器所执行，所以只要将v8引擎嵌入到不同的宿主环境中都可以执行我们的js代码，这样js的应用也就越来越广泛（万能的js由来）。<br>同时v8引擎没有同步<code>I/O</code>机制，且有强大的事件驱动机制，<code>Node</code>爸比2009年正式推出了基于JavaScript语言和V8引擎的开源Web服务器项目，命名为<code>Node</code>，最大的优势是借助JavaScript天生的事件驱动机制加V8高性能引擎，使编写高性能Web服务轻而易举，可以和系统进行交互。<br>注意：<code>Node</code>不是语言，是一个平台（包装后的v8引擎），语言还是js语言。</p>
<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><ul>
<li>所有的web资源都是放在web服务器中的</li>
<li>web服务器就是可以供外界访问web资源的一个软件</li>
<li>将web资源放到指定的目录当中，就可以通过对应的端口在浏览器中访问到<br>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//一个url地址</div><div class="line">http://www.cms.com:80/index.html</div><div class="line">//其中</div><div class="line">//`http`是访问的协议</div><div class="line">//`www.cms.com`是服务器的一个唯一域名，映射到的是一个IP地址</div><div class="line">//`80`是端口号：软件的门牌号</div><div class="line">`/index.html`等这些路径中有0或多个斜杠`/`隔开的字符表示服务器上的目录或文件</div></pre></td></tr></table></figure>
</li>
</ul>
<p>一个页面的js代码，图片等这些都是要通过http请求拿到的，因此雪碧图，webpack打包js代码文件这些能减少http请求。</p>
<h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4><p>客户端发送什么格式的数据，服务器返回什么格式的数据，需要通过http协议来约束双方的规范，即约束请求和响应的规则，只有双方协议达成一致才好通信交流。<br>http都是由请求和响应成对出现的。<br>请求的发送方式：</p>
<ul>
<li>通过浏览器地址</li>
<li>通过html中的表单（也就是接口访问）</li>
<li>通过a标签链接的<code>href</code>（点击跳转到新页面）</li>
<li>src属性<br>一般常用的http请求方式就是<code>get</code>和<code>post</code>两种：<br><code>get</code>请求会将参数显示在地址栏中，不安全，因此不能使用这种方式请求提交敏感信息；<code>get</code>方法有大小限制，最多只能提交1024个字符；<code>get</code>请求会保存在浏览器的浏览记录中；主要用来获取数据。<br><code>post</code>请求查询参数会以请求体的方式存在，不会出现在地址栏中，更安全；浏览数据不会被保存在浏览器的浏览记录中，相比<code>get</code>请求安全；可以传输的数据量大，可以达到2M；主要用来将数据传送到服务器端。</li>
</ul>
<h3 id="Node基础"><a href="#Node基础" class="headerlink" title="Node基础"></a><code>Node</code>基础</h3><p>直接从官网下对应版本的<code>Node</code>直接安装，然后打开命令行软件输入<code>node -v</code>如果可以看到版本的版本说明就安装成功了。如何运行呢？<br>1、直接进入<code>node</code>环境运行js代码。输入<code>node</code>进入<code>node</code>的环境，就可以进行编写并运行js代码了；<br>2、运行js文件，首先新建一个js文件，然后在命令行中指定到相应的文件位置，直接<code>node 文件名.js</code>即可直接运行js代码了</p>
<h4 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h4><p>ES6之前，js存在几个问题：<br>1、没有模块化<br>2、官方标准的标准库比较少<br>3、缺乏包管理系统<br>在开发过程中我们知道，当程序设计的规模达到了一定的程度，则必须对其进行模块化。但是，这样做就有一个前提，就是大家必须以同样的方式编写模块，否则不同人有不同的编写方式就乱套了，于是模块化规范出来了。<br>js中模块化规范有三种：<code>commonJS</code>,<code>AMD</code>,<code>CMD</code></p>
<h5 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a><code>commonJS</code></h5><p> <code>commonJS</code>API定义很多普通应用程序使用的API，它的终极目标是提供一个类似Java标准库，这样的话开发者可以使用它来编写应用程序，然后这些应用可以运行在不同的js解释器和不同的主机环境中。<code>Node</code>将js语言用于服务器端编程，那就必须使用模块化开发，因为在服务器端一定要与操作系统和其他的应用程序进行互动否则无法编程,也就是说<code>Node</code>是<code>commonJS</code>规范的实现。<br><code>commonJS</code>定义的模块分为三个部分：<br>1、模块引用（<code>require</code>，用来引入外部模块）<br>2、模块定义（<code>exports</code>用于导出当前模块的方法和变量）<br>3、模块标识（<code>module</code>代表模块本身）<br>在浏览器端<code>commonJS</code>规范运行会有一个问题，就是<code>require</code>模块加载都是同步的，这对服务器端不是一个问题，因为所有的模块都是放在本地硬盘可以同步加载完成，等待时间就是硬盘的读取时间，但是对于浏览器模块都放在服务器端，等待时间取决于网速的快慢，等待时间较长时会使得浏览器处于”假死“状态，因此浏览器的模块不能采用同步加载，只能采用异步加载，这就是<code>AMD</code>规范的诞生背景。</p>
<h5 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a><code>AMD</code></h5><p><code>commonJS</code>是主要为了JS在后端(<code>Node</code>)的表现制定的，他是不适合前端的，<code>AMD</code>(异步模块定义)出现了，它就主要为前端JS的表现制定规范。<code>AMD</code>采用异步方式加载模块，模块的加载不影响后面语句的运行，所依赖模块的语句都定义在一个回调函数中等待模块加载完成后执行，加载模块的方式和<code>commonJS</code>一样都是使用<code>require</code>，但是要求两个参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">require([module], callback)</div><div class="line">//[module]就是要加载的模块，callback就是加载成功后的回调函数</div></pre></td></tr></table></figure></p>
<p>一个简单的实例区别<code>commonJS</code>和<code>AMD</code>加载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//commonJS加载模块</div><div class="line">var math = require(&apos;math&apos;)</div><div class="line">math.add(2, 3)</div><div class="line"></div><div class="line">//AMD加载模块</div><div class="line">require([&apos;math&apos;], function(math)&#123;</div><div class="line">    math.add(2, 3)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>所以，很明显<code>AMD</code>比较适合浏览器环境，目前主要有两个js库实现了<code>AMD</code>规范：<code>require.js</code>和<code>curl.js</code>。<br><code>require.js</code>加载的模块采用<code>AMD</code>规范，模块必须采用特定的<code>define()</code>函数来定义：<br>1、不依赖其他模块的模块定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//math.js</div><div class="line">define(function()&#123;</div><div class="line">    ...</div><div class="line">    return ...</div><div class="line">&#125;)</div><div class="line">//加载方法</div><div class="line">//mian.js</div><div class="line">require([&apos;math&apos;, function(math)&#123;</div><div class="line"></div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<p>2、需要依赖其他模块的模块定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define([&apos;myLib&apos;], function(myLib)&#123;</div><div class="line">    ...</div><div class="line">    return ...</div><div class="line">&#125;)</div><div class="line">//当require函数加载这个模块时会先加载myLib.js文件</div></pre></td></tr></table></figure></p>
<h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a><code>CMD</code></h5><p><code>CMD</code>和<code>AMD</code>最明显的区别就是在模块定义时对依赖的处理不同<br>1、<em><code>AMD</code>推崇依赖前置，在定义模块的时候就要声明其依赖的模块</em><br>2、<em><code>CMD</code>推崇就近依赖，只有在用到某个模块的时候再去require</em><br>看个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports, module) &#123;</div><div class="line">    console.log(&apos;require module: main&apos;);</div><div class="line"></div><div class="line">    var mod1 = require(&apos;./mod1&apos;);</div><div class="line">    mod1.hello();</div><div class="line">    var mod2 = require(&apos;./mod2&apos;);</div><div class="line">    mod2.hello();</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        hello: function() &#123;</div><div class="line">            console.log(&apos;hello main&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面代码使用<code>SeaJS(CMD)</code>和<code>RequireJS(AMD)</code>执行的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//seaJS</div><div class="line">require module: main</div><div class="line">require module: mod1</div><div class="line">hello mod1</div><div class="line">require module: mod2</div><div class="line">hello mod2</div><div class="line">hello main</div><div class="line"></div><div class="line">//requireJS</div><div class="line">require module: mod1</div><div class="line">require module: mod2</div><div class="line">require module: main</div><div class="line">hello mod1</div><div class="line">hello mod2</div><div class="line">hello main</div></pre></td></tr></table></figure></p>
<h4 id="模块使用"><a href="#模块使用" class="headerlink" title="模块使用"></a>模块使用</h4><p>不管是哪种模块化方式，变量或者函数只能在当前模块中使用，如果想在别的模块中引用，必须有<code>exports</code>暴露与<code>require</code>引用。<br>而且，只有被暴露的变量或者函数才能被其他模块引用，没有暴露的依然不能被引用（也就是说<code>require</code>进来的模块其实就是代表的暴露变量的那个模块的<code>exports</code>对象，所以才是暴什么用什么）。<br>模块也分两种：文件模块和核心模块。引入的方法也所有不同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//引入我们自己写的文件模块，即使是在同一个文件路径下也要写上./</div><div class="line">require(&apos;./o1.js&apos;)</div><div class="line"></div><div class="line">//node自带的核心模块，就不用./路径</div><div class="line">require(&apos;http&apos;)</div></pre></td></tr></table></figure></p>
<h4 id="exports和require如何而来"><a href="#exports和require如何而来" class="headerlink" title="exports和require如何而来"></a><code>exports</code>和<code>require</code>如何而来</h4><p>其实每个<code>Node</code>文件都在最外层套了一个函数，这个函数有参数<code>exports</code>，<code>require</code>，<code>module</code>…，也是因为这样，我们才能通过<code>require</code>，<code>exports</code>这些方法来暴露和引用我们的模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//在js文件中打印arguments，发现有值，说明这个文件其实是一个函数</div><div class="line">console.log(arguments)</div><div class="line"></div><div class="line">//通过arguments的callee方法找到这个函数本身，发现它确实是一个函数Function</div><div class="line">console.log(arguments.callee)</div><div class="line"></div><div class="line">//以字符串形式打印出这个函数</div><div class="line">console.log(arguments.callee + &apos;&apos;)</div><div class="line"></div><div class="line">//此时会发现，其实就是在我们的文件内容的外部套了一层带有参数的函数，函数里面的内容还是我们写的文件内容</div></pre></td></tr></table></figure></p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180619_1.png" alt=""><br>也就是说虽然看起来我们只写了里面的内容，但是事实上它是有匿名函数包含的一个函数。可以通过在函数中打印<code>console.log(module)</code>和<code>console.log(exports)</code>证实<br>另外，<code>exports</code>和<code>module.exports</code>也有所区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(exports===module.exports)//true</div></pre></td></tr></table></figure></p>
<p>从代码可以验证这俩是一样的，但是还是有区别的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//01.js</span></div><div class="line">exports.str = <span class="string">'str'</span></div><div class="line">exports.fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fn'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//02.js</span></div><div class="line"><span class="keyword">let</span> rs = <span class="built_in">require</span>(<span class="string">'./01.js'</span>)</div><div class="line"><span class="built_in">console</span>.log(rs) <span class="comment">// &#123;str: 'str', fn: [Function]&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//01.js</span></div><div class="line">exports = &#123;</div><div class="line">    <span class="attr">str</span>: <span class="string">'str'</span>,</div><div class="line">    <span class="attr">fn</span>: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'fn'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//02.js</span></div><div class="line"><span class="keyword">let</span> rs = <span class="built_in">require</span>(<span class="string">'./01.js'</span>)</div><div class="line"><span class="built_in">console</span>.log(rs) <span class="comment">// &#123;&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//01.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">str</span>: <span class="string">'str'</span>,</div><div class="line">    <span class="attr">fn</span>: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'fn'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//02.js</span></div><div class="line"><span class="keyword">let</span> rs = <span class="built_in">require</span>(<span class="string">'./01.js'</span>)</div><div class="line"><span class="built_in">console</span>.log(rs) <span class="comment">// &#123;str: 'str', fn: [Function]&#125;</span></div></pre></td></tr></table></figure>
<p>原理可以理解为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let module = new Object()</div><div class="line">module.exports = new Object(&#123;name: &apos;name1&apos;&#125;)</div><div class="line">let exports = module.exports</div><div class="line">exports.name = &apos;kkk&apos;</div><div class="line">module.exports.name = &apos;kkk&apos;</div><div class="line">//所以exports通过点语法暴露和module.exports暴露时没有差别</div><div class="line">//如果exports暴露一个对象</div><div class="line">exports = &#123;name: &apos;kkk&apos;&#125;</div><div class="line">//这样其实就是等于将module和exports.module之间的联系切断了，内存地址直接发生了变化</div></pre></td></tr></table></figure>
<p>因此，<code>module.exports</code>包含了<code>exports</code>全部的功能，<code>exports</code>不能暴露一个对象，只能使用点语法。</p>
<h3 id="Node文件读写"><a href="#Node文件读写" class="headerlink" title="Node文件读写"></a><code>Node</code>文件读写</h3><h4 id="Buffer缓冲器"><a href="#Buffer缓冲器" class="headerlink" title="Buffer缓冲器"></a><code>Buffer</code>缓冲器</h4><p>js本身只能处理字符串数据类型，没有二进制数据类型，作为前端工程师我们也只是处理一些简单的字符串和<code>DOM</code>，不能处理二进制数据。</p>
<p>但在处理像<code>TCP</code>流或文件流时，必须使用到二进制数据。因此在 <code>Node</code>中，定义了一个 <code>Buffer</code> 类，该类用来创建一个专门存放二进制数据的缓存区，让 <code>Node</code> 处理二进制数据（实在太饿了，没忍住准备吃包方便面。。。）</p>
<h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><h5 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h5><p><code>Node</code>用来服务器端就是要对文件进行交互，比如本地文件发送到客户端等。<code>Node</code>就通过<code>fs</code>模块（<code>let fs = require(&#39;fs&#39;)</code>）来和文件系统进行交互，该模块提供标准的API对文件进行读写等操作（这里就说到上面的<code>Buffer</code>了，<code>fs</code>模块读取文件内容返回的就是一个<code>Buffer</code>）</p>
<p>介绍这么多，用一下就会觉得很神奇：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="comment">//Sync表示的都是同步的，会造成线程阻塞，可以使用相应的异步操作，这里只是test</span></div><div class="line"><span class="comment">//打开02.js，对它进行写write操作</span></div><div class="line"><span class="comment">//如果当前文件夹下没有02.js文件，就会自动创建一个</span></div><div class="line"><span class="comment">//如果已经有了这个02.js文件，执行同步打开这个操作会删除02.js里面的内容</span></div><div class="line"><span class="keyword">let</span> file = fs.openSync(<span class="string">'02.js'</span>, <span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="comment">//写入内容</span></div><div class="line">fs.writeFileSync(file, <span class="string">'我被写入内容啦！'</span>)</div><div class="line"></div><div class="line"><span class="comment">//保存并退出</span></div><div class="line">fs.closeSync(file)</div></pre></td></tr></table></figure>
<p>此时，控制台运行一下该文件–<code>node 01.js</code>，<code>02.js</code>文件中就会有<code>我被写入内容啦！</code>这句话，是不是很神奇。<code>Node</code>更多的API可以参考<a href="http://nodejs.cn/api/" target="_blank" rel="external">中文文档</a>。为了再看一遍这个神奇的操作，下面再做一个异步的操作</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="comment">//异步操作</span></div><div class="line"><span class="comment">//打开文件</span></div><div class="line">fs.open(<span class="string">'02.js'</span>,<span class="string">'w'</span>, (err, file)=&gt;&#123;</div><div class="line">    <span class="keyword">if</span>(!err)&#123;</div><div class="line">        <span class="comment">//写入内容</span></div><div class="line">        fs.writeFile(file, <span class="string">'我又被写入内容啦哈哈哈哈'</span>, (err)=&gt;&#123;</div><div class="line">            <span class="keyword">if</span>(!err)&#123;</div><div class="line">                <span class="comment">//写入成功</span></div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'写入成功'</span>)</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//保存关闭文件</span></div><div class="line">            fs.close(file, (err)=&gt;&#123;</div><div class="line">                <span class="keyword">if</span>(!err)&#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'文件保存并关闭成功'</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'打开文件失败'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>此时打开<code>02.js</code>文件看到<code>我又被写入内容啦哈哈哈哈</code>。</p>
<p>异步操作看到了，很多的嵌套回调函数。异步的好处就是即使这里在回调函数<code>fs.open</code>中发生了错误（不管是哪一层），<code>fs.open</code>后面的代码依然可以运行，它只是内部出错了不影响外面代码的执行。</p>
<p>还有一种写入内容的方式：文件流式写入<code>writeStream</code>。相当于在文件和<code>Node</code>服务器之间建立通道，通道打开后可以一直写入内容，写入结束就关闭通道。</p>
<h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><p>这里我们就不写同步的了，因为推荐都是使用异步方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line">fs.readFile(<span class="string">'02.js'</span>, (err, data)=&gt;&#123;</div><div class="line">    <span class="keyword">if</span>(!err)&#123;</div><div class="line">        <span class="comment">//读取的文件都是Buffer二进制流</span></div><div class="line">        <span class="built_in">console</span>.log(data)</div><div class="line">        <span class="comment">//&lt;Buffer e6 88 91 e5 8f 88 e8 a2 ab e5 86 99 e5 85 a5 e5 86 85 e5 ae b9 e5 95 a6 e5 93 88 e5 93 88 e5 93 88 e5 93 88&gt;</span></div><div class="line">        <span class="comment">//可以通过转换看看是不是我们02.js文件中的内容</span></div><div class="line">        <span class="built_in">console</span>.log(data.toString())</div><div class="line">        <span class="comment">//我又被写入内容啦哈哈哈哈</span></div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里只是读取了一个js文件，可以自行尝试读取一张图片等其他文件。读取文件同样存在一个流式读入方法<code>readStream</code>和<code>pipe</code>方法，通过通道将一个大文件切割成很多个小文件不断上传最后整合完成。</p>
<p>注意：针对图片，音频和视频这种文件格式，如果想看是否正确的读取了，不能简单的通过<code>data.toString()</code>方法，这样只能得到乱码，我们可以通过写入的方式新创建一个文件就能还原这个读取的文件了。</p>
<h3 id="Node数据库"><a href="#Node数据库" class="headerlink" title="Node数据库"></a><code>Node</code>数据库</h3><p>前端开发很少能用到数据库，但是又不能不了解这些，So。。。</p>
<p>这里选用的数据库是<code>MongoDB</code>，因为听说它和<code>Node</code>配一脸。</p>
<p>一般我们常听到的那些什么<code>mySQL</code>、<code>SQL Server</code>、<code>Oracle</code>这些都是关系型数据库，通过一张张表来建立联系；非关系型数据库就没有行和列的概念，而是用<code>JSON</code>来存储数据的，比如<code>MongoDB</code>、<code>Redis</code>等。</p>
<h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a><code>MongoDB</code></h4><p>是的，它就是和我们的<code>Node</code>配一脸的非关系型数据库。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>直接命令安装，因为官网不能直接下载，需要注册账号等乱七八糟的，所以这里找到了一个直接命令行安装的操作：</p>
<p>1、下载<code>curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.2.1.tgz</code></p>
<p>2、解压<code>tar -zxvf mongodb-osx-x86_64-3.2.1.tgz</code></p>
<p>3、复制解压之后的文件夹并新建一个文件夹<code>mkdir -p mongodb</code>，<code>cp -R -n mongodb-osx-x86_64-3.2.1/ mongodb</code></p>
<p>4、环境变量配置：可以将解压后的文件夹直接放到<code>usr/local</code>目录中，然后在环境变量文件<code>_bash.profile</code>中添加<code>mongodb</code>的环境变量，最后<code>source /Users/Yyuan/.bash_profile</code>让刚才修改的环境变量生效。</p>
<p>5、此时<code>echo $PATH</code>可以看到刚才修改的环境变量了</p>
<p>6、此时<code>mongo</code>可以看到版本号啦。</p>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>1、首先找到地方新建一个文件夹<code>data</code>，并在里面新建一个文件夹<code>db</code></p>
<p>2、命令行中输入<code>mongod</code>，可以看到结果信息，其中端口号是27017</p>
<p>3、可以看到默认路径是<code>/data/db</code>，打开终端直接输入命令<code>sudo mkdir -p /data/db</code>，到此就创建了符合默认路径的文件夹。如果想修改默认<code>data/db</code>的路径：<code>mongod --dbpath /Users/Yyuan/database/mongodb/data/db</code>。专家推荐，还是使用默认的路径比较好。</p>
<p>4、终端输入<code>mongod</code>发现报错</p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180702_13.png" alt=""></p>
<p>说明没有读写权限，加权限<code>sudo chown Yyuan /data/db</code></p>
<p>5、如果遇到下面的错误</p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180702_14.png" alt=""></p>
<p>说明没有找到用来存放数据的那个文件夹：打开终端，返回到根目录下然后<code>sudo mkdir -p /data/db</code>新建默认路径文件夹</p>
<p>6、此时再输入<code>mongod</code>，并在浏览器中打开<a href="http://localhost:27017/" target="_blank" rel="external">页面</a>会看到下面一段话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">It looks like you are trying to access MongoDB over HTTP on the native driver port.</div></pre></td></tr></table></figure>
<p>7、<code>mongod</code>是用来启动服务端的，另开一个窗口输入命令<code>mongo</code>打开命令行的客户端就可以来对数据库进行操作了，例如查看当前所有的数据库<code>show dbs</code>等等。。。</p>
<h5 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h5><p>1、首先清个屏：<code>cls</code>哈哈</p>
<p>2、然后我们来查看下当前的所有数据库：<code>show dbs</code></p>
<p>3、创建一个<code>school</code>数据库：<code>use school</code>（有就进入没有就创建了再进入）</p>
<p>4、不信，你可以看看你当前所在的位置<code>db</code>（这里就是<code>school</code>）</p>
<p>5、现在再来看看我们这个数据库中所有集合：<code>show collections</code>（刚创建的数据库当然啥也没有喽）</p>
<p>6、增：向<code>school</code>数据库中的学生集合<code>student</code>中插入一个学生，学生信息为<code>{id: &#39;001&#39;, name: &#39;Jack&#39;, age: 18, sex: &#39;男&#39;}</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.student.insert(&#123;id: &quot;001&quot;, name: &quot;Jack&quot;, age: &quot;18&quot;, sex: &quot;男&quot;&#125;)</div><div class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;) //插入成功</div></pre></td></tr></table></figure>
<p>7、查：查看当前<code>student</code>集合中所有数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.student.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5b3b8fb05dc9003f0524034d&quot;), &quot;id&quot; : &quot;001&quot;, &quot;name&quot; : &quot;Jack&quot;, &quot;age&quot; : &quot;18&quot;, &quot;sex&quot; : &quot;男&quot; &#125;	//查询结果</div></pre></td></tr></table></figure>
<h5 id="mongodb可视化工具"><a href="#mongodb可视化工具" class="headerlink" title="mongodb可视化工具"></a><code>mongodb</code>可视化工具</h5><p>上面那种命令行操作已经看到效果了，但是效率实在太低，所以这里使用一个可视化工具—-<code>RoboMongo</code>（傻瓜式安装，所以就不废话了），安装成功后<code>create</code>并<code>connect</code>后：</p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180703_16.png" alt=""></p>
<p>能看到我们刚才插入的信息了，在这里可以直接输入命令或者直接进行数据库的增删改查操作，具体的命令参考<a href="http://www.mongodb.org.cn/manual/" target="_blank" rel="external">mongodb中文手册</a>进行查看。</p>
<h5 id="mongoose基本操作"><a href="#mongoose基本操作" class="headerlink" title="mongoose基本操作"></a><code>mongoose</code>基本操作</h5><p>上面都是使用命令行或者可视化工具对数据库进行操作，这里使用<code>node</code>来对<code>mongodb</code>进行操作。</p>
<p>1、首先新建一个项目，并安装<code>mongoose</code>：<code>npm init</code>，<code>npm i mongoose</code></p>
<p>2、项目中新建一个js文件，先对数据库进行连接：<a href="https://mongoose.shujuwajue.com/guide/schemas.html" target="_blank" rel="external">参考mongoose的API</a></p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180708_18.png" alt=""></p>
<p>see！数据库连接成功啦！！！</p>
<p>3、创建<code>Schema</code>（模式对象）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//4、创建Schema模式对象</span></div><div class="line"><span class="keyword">let</span> Schema = mongoose.Schema</div><div class="line"><span class="keyword">let</span> personSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">age</span>: <span class="built_in">Number</span>,</div><div class="line">    <span class="attr">sex</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">default</span>: <span class="string">'男'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">chat</span>: <span class="built_in">String</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>相当于创建了一个文档的规则，字段名和值类型等等</p>
<p>4、创建<code>Model</code>对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//5、创建Model对象</span></div><div class="line"><span class="keyword">let</span> personModel = mongoose.model(<span class="string">'people'</span>, personSchema)</div></pre></td></tr></table></figure>
<p>相当于创建一个集合，集合符合之前创建的规则</p>
<p>5、插入文档</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//6、插入文档</span></div><div class="line">personModel.create(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'袁媛'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">27</span>,</div><div class="line">    <span class="attr">sex</span>: <span class="string">'女'</span>,</div><div class="line">    <span class="attr">chat</span>: <span class="string">'yuanyuan.com'</span></div><div class="line">&#125;, (err)=&gt;&#123;</div><div class="line">    <span class="keyword">if</span>(!err)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'插入成功'</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> err</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">personModel.create(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'任佳鑫'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">27</span>,</div><div class="line">    <span class="attr">chat</span>: <span class="string">'renjiaxin.com'</span></div><div class="line">&#125;, (err)=&gt;&#123;</div><div class="line">    <span class="keyword">if</span>(!err)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'插入成功'</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> err</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里插入了两条记录，一个男一个女，可以看到默认字段可以不传</p>
<p>6、<code>node 01.js</code>此时运行代码控制台打印插入成功，进入到可视化工具中看到<code>m_data</code>中已经有了一个名叫<code>peoples</code>的集合，其中有了两条记录。这样就实现了使用<code>node</code>来对<code>mongodb</code>进行操作。</p>
<h3 id="Node常用模块之URL模块"><a href="#Node常用模块之URL模块" class="headerlink" title="Node常用模块之URL模块"></a><code>Node</code>常用模块之<code>URL</code>模块</h3><p>URL竟然也是一个模块？这个模块我们平时有用到么？我怎么不记得了。。。</p>
<p>当然有，开发过程中，我们需要把一个URL地址中的某个部分获取到的时候就用到了，URL模块提供很多<a href="http://nodejs.cn/api/url.html" target="_blank" rel="external">API</a>可以直接帮助我们获取我们想要的东西，处理我们想要的结果等等。</p>
<h3 id="Node常用模块之HTTP模块"><a href="#Node常用模块之HTTP模块" class="headerlink" title="Node常用模块之HTTP模块"></a><code>Node</code>常用模块之<code>HTTP</code>模块</h3><h4 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建<code>http</code>服务</h4><p>首先我们创建一个<code>http</code>服务器，并给客户端返回数据：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、引入http模块</span></div><div class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"></div><div class="line"><span class="comment">//2、创建服务器</span></div><div class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">    <span class="comment">//req服务器请求，res服务器响应</span></div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">    res.end(<span class="string">'hello'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//3、监听服务器是否被访问</span></div><div class="line">server.listen(<span class="number">80</span>, <span class="string">'127.0.0.1'</span>)</div></pre></td></tr></table></figure>
<p>命令行<code>node 02.js</code>运行下，发现报错了：</p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180709_19.png" alt=""></p>
<p>原因是因为端口号被占用了，将<code>80</code>端口换成<code>8088</code>：<code>server.listen(8088, &#39;127.0.0.1&#39;)</code>重新运行后成功了，浏览器中打开<a href="127.0.0.1:8088" target="_blank" rel="external">127.0.0.1:8088</a>此时就能看到打印出来的<code>hello</code>了。</p>
<p>这里<code>Content-Type</code>值是<code>html</code>，所以如果在<code>res.end</code>之前加上这句<code>res.write(&#39;&lt;h1&gt;哈咯&lt;/h1&gt;&#39;)</code>，会发现浏览器中打印出了<code>h1</code>格式的文字，因此这里<code>Content-Type</code>还是比较重要的，反应了服务器响应的数据格式。</p>
<p>如果想看请求的数据，可以直接在打印<code>console.log(req)</code>来查看，例如在浏览器中输入<code>127.0.0.1/kkk</code>此时会看到打印出来的<code>req.url</code>是<code>/kkk</code>，前面的会被直接省略的。</p>
<h4 id="Node中的路由"><a href="#Node中的路由" class="headerlink" title="Node中的路由"></a><code>Node</code>中的路由</h4><p>像上面那种创建了一个服务器以后，不管浏览器地址怎么输入，虽然请求的<code>url</code>所有不同，但是显示的都是一样的值，因为服务器给出的响应值都是一样的。那怎么实现根据请求的<code>url</code>的不同来显示不同的文件，从而浏览器显示不同的内容呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、引入http模块</span></div><div class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="comment">//引入fs模块读取文件</span></div><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="comment">//2、创建服务器</span></div><div class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">    <span class="comment">//req服务器请求，res服务器响应</span></div><div class="line">    <span class="keyword">if</span>(req.url === <span class="string">'/page1.html'</span>)&#123;</div><div class="line">        <span class="comment">//根据路由显示page1.html页面</span></div><div class="line">        fs.readFile(<span class="string">'./page1.html'</span>, (err, data)=&gt;&#123;</div><div class="line">            <span class="keyword">if</span>(!err)&#123;</div><div class="line">                res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">                res.end(data)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">'/page2.html'</span>)&#123;</div><div class="line">        <span class="comment">//根据路由显示page2.html页面</span></div><div class="line">        fs.readFile(<span class="string">'./page2.html'</span>, (err, data)=&gt;&#123;</div><div class="line">            <span class="keyword">if</span>(!err)&#123;</div><div class="line">                res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">                res.end(data)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">'/'</span>)&#123;</div><div class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">        res.end(<span class="string">'我是根目录127.0.0.1'</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">        res.end(<span class="string">'访问的页面不存在'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//3、监听服务器是否被访问</span></div><div class="line">server.listen(<span class="number">8088</span>, <span class="string">'127.0.0.1'</span>)</div></pre></td></tr></table></figure>
<p>此时，可以在浏览器中访问看看输入不同的地址返回的是什么内容。</p>
<p><code>Node</code>中没有web容器，不是根据文件在文件夹中的路径来返回页面的，都是根据路由指定来返回内容的，只是在开发中我们都会将路由和文件路径对应上而已。</p>
<p>再来看一个例子：假如我们给<code>page1.html</code>加一个外联样式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//page1.html</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTTP!!!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>重启一下服务器，打开<code>127.0.0.1/page1.html</code>发现css中的样式并没有作用，这就是因为在<code>Node</code>中没有web容器的意思，根据文件路径来找文件是不行的。因为加载<code>css/index.css</code>文件也是要发送请求的，因此还是需要<code>Node</code>来加载这个文件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、引入http模块</span></div><div class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="comment">//2、创建服务器</span></div><div class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">    <span class="comment">//req服务器请求，res服务器响应</span></div><div class="line">    <span class="keyword">if</span>(req.url === <span class="string">'/page1.html'</span>)&#123;</div><div class="line">        ......</div><div class="line">        res.end(<span class="string">'我是根目录127.0.0.1'</span>)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">'/css/index.css'</span>)&#123;</div><div class="line">        fs.readFile(<span class="string">'./css/index.css'</span>, (err, data)=&gt;&#123;</div><div class="line">            <span class="keyword">if</span>(!err)&#123;</div><div class="line">                res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/css'</span>&#125;)</div><div class="line">                res.end(data)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">        res.end(<span class="string">'访问的页面不存在'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//3、监听服务器是否被访问</span></div><div class="line">server.listen(<span class="number">8088</span>, <span class="string">'127.0.0.1'</span>)</div></pre></td></tr></table></figure>
<p>此时再访问<code>127.0.0.1/page1.html</code>就能看到已经应用了样式表的页面，图片，视频，js文件等资源都是如此。</p>
<p>发现问题了吧？如果文件资源很多的时候直接写这个加载就直接写死了。。。这个，后面再说。</p>
<h4 id="http发送请求"><a href="#http发送请求" class="headerlink" title="http发送请求"></a><code>http</code>发送请求</h4><h5 id="http表单提交"><a href="#http表单提交" class="headerlink" title="http表单提交"></a><code>http</code>表单提交</h5><p>太久没写原生表单了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单提交<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8088"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span>男</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span>女</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>页面显示如下：</p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180711_23.png" alt=""></p>
<p>此时表单中写入内容后点击提交按钮就会发送请求就会跳转到服务器地址<code>http://127.0.0.1:8088/?name=yuanyuan&amp;age=12&amp;sex=%E5%A5%B3&amp;photo=jay1.png</code>通过get请求将内容发送出去，此时服务器就能拿到发送过来的内容。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</div><div class="line"></div><div class="line">http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(req.url === <span class="string">'/page2.html'</span>)&#123;</div><div class="line">        <span class="comment">//根据路由显示page2.html页面</span></div><div class="line">        fs.readFile(<span class="string">'./page2.html'</span>, (err, data)=&gt;&#123;</div><div class="line">            <span class="keyword">if</span>(!err)&#123;</div><div class="line">                res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">                res.end(data)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//点击表单跳转地址</span></div><div class="line">        <span class="keyword">let</span> myUrl = url.parse(req.url, <span class="literal">true</span>)</div><div class="line">        <span class="keyword">let</span> queryObj = myUrl.query</div><div class="line">        <span class="built_in">console</span>.log(queryObj)   <span class="comment">//&#123; name: 'yuanyuan', age: '12', sex: '女', photo: 'jay1.png' &#125;</span></div><div class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">        res.end(<span class="string">'提交ok'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;).listen(<span class="number">8088</span>, <span class="string">'127.0.0.1'</span>)</div></pre></td></tr></table></figure>
<p>这里拿到<code>queryObj</code>就是提交过来的内容，就可以对其进行下一步操作了。</p>
<h5 id="表单上传图片处理"><a href="#表单上传图片处理" class="headerlink" title="表单上传图片处理"></a>表单上传图片处理</h5><p>上面表单上传了一张图片，服务器获取到的只是这个图片的名称，对于图片、视频音频等这些非普通类型的内容，就需要对这些内容进行一些处理了。通常我们会使用<code>fs</code>模块进行处理，但是在真实的开发环境中不会使用这种原生的方法，而是借助一些第三方的插件来实现，这里使用<code>formidable</code>（安装：<code>npm i -S formidable</code>）。</p>
<p>使用post请求来提交图片，因为一般提交内容到服务器都是使用的post方式，表单需要作一点修改：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单提交<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8088/postmsg"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同样我们的服务也要修改一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">let</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>)</div><div class="line"><span class="keyword">let</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</div><div class="line"></div><div class="line">http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(req.url === <span class="string">'/page2.html'</span>)&#123;</div><div class="line">        <span class="comment">//根据路由显示page2.html页面</span></div><div class="line">        fs.readFile(<span class="string">'./page2.html'</span>, (err, data)=&gt;&#123;</div><div class="line">            <span class="keyword">if</span>(!err)&#123;</div><div class="line">                res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=UTF-8'</span>&#125;)</div><div class="line">                res.end(data)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//点击表单跳转地址</span></div><div class="line">        <span class="keyword">if</span>(req.url === <span class="string">'/postmsg'</span> &amp;&amp; req.method.toLowerCase() === <span class="string">'post'</span>)&#123;</div><div class="line">            <span class="comment">//1、实例化对象</span></div><div class="line">            <span class="keyword">let</span> form = <span class="keyword">new</span> formidable.IncomingForm()</div><div class="line">            <span class="comment">//2、设置上传的文件路径</span></div><div class="line">            form.uploadDir = <span class="string">'./uploads'</span></div><div class="line">            <span class="comment">//3、保存扩展名</span></div><div class="line">            form.keepExtensions = <span class="literal">true</span>;</div><div class="line">            <span class="comment">//4、获取表单内容</span></div><div class="line">            form.parse(req, (err, fields, files)=&gt;&#123;</div><div class="line">                res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain;charset=UTF-8'</span>&#125;)</div><div class="line">                res.write(<span class="string">'received upload'</span>)</div><div class="line">                res.end(util.inspect(&#123;<span class="attr">fields</span>: fields, <span class="attr">files</span>: files&#125;))</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).listen(<span class="number">8088</span>, <span class="string">'127.0.0.1'</span>)</div></pre></td></tr></table></figure>
<p>此时本地上传的图片就可以保存到<code>uploads</code>这个文件夹中了。</p>
<p>注意：如果你发现你点击提交后打印出来的<code>files</code>对象是一个空对象，这说明没有需要上传的内容，此时上传文件路径<code>uploads</code>也是空的，此时在<code>form</code>表单中加上<code>enctype=&quot;multipart/form-data&quot;</code>，表单中<code>enctype=&quot;multipart/form-data&quot;</code>的意思是设置表单的<a href="https://www.baidu.com/s?wd=MIME&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="external">MIME</a>编码。默认情况，这个编码格式是<code>application/x-www-form-urlencoded</code>，不能用于文件上传；只有使用了<code>multipart/form-data</code>，才能完整的传递文件数据，进行下面的操作。</p>
<h3 id="Epress框架"><a href="#Epress框架" class="headerlink" title="Epress框架"></a><code>Epress</code>框架</h3><p>是目前最流行的<code>Node</code>后端框架之一，<code>Express</code>和<code>Node</code>的关系相当于<code>jQuery</code>和<code>js</code>之间的关系，但是它没有对<code>Node</code>进行二次抽象，只是在其之上扩展了对web应用所需的基本功能。类似的框架还有<code>Koa.js</code>、<code>egg.js</code>，<code>hapi.js</code>。</p>
<h4 id="安装Express"><a href="#安装Express" class="headerlink" title="安装Express"></a>安装<code>Express</code></h4><p>我们初始化一个项目<code>npm init</code>，并在项目中安装<code>npm i express --save</code>。</p>
<p>和学习<code>vue</code>一样，我们首先从引入<code>express</code>这个模块学习开始，到做项目的时候我们再用它的脚手架</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//01.js</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"></div><div class="line"><span class="comment">//1、创建express实例</span></div><div class="line"><span class="keyword">let</span> app = express()</div><div class="line"></div><div class="line"><span class="comment">//2、路由</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.send(<span class="string">'hello world'</span>)</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">'/html5'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.send(<span class="string">'hello html5'</span>)</div><div class="line">&#125;)</div><div class="line">app.listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure>
<p>中断运行<code>node 01.js</code>，此时浏览器中打开根目录<a href="127.0.0.1:3000" target="_blank" rel="external">127.0.0.1:3000</a>就能看到<code>hello world</code>，<a href="127.0.0.1:3000/html5" target="_blank" rel="external">127.0.0.1:3000/html5</a>看到<code>hello html5</code>了（还记得上面使用<code>http</code>模块创建服务器么，是不是很类似，只不过这里更加简介方便了）。</p>
<p>这里路由写的是什么浏览器中输入相应的地址就能返回回调函数中想要返回的内容。</p>
<h5 id="托管静态文件"><a href="#托管静态文件" class="headerlink" title="托管静态文件"></a>托管静态文件</h5><p>当我们使用原生的<code>Node</code>来访问静态文件时，我们需要拿到访问的路由，通过对路由的分割处理拿到我们想要访问的文件名以及文件的后缀名，然后通过<code>fs</code>模块去所在当前文件夹中拿到想要访问的文件再显示在浏览器中（反正就是很麻烦。。。）。我们来看看使用<code>express</code>是多么简单明了的：</p>
<p>当前文件夹中存在一个名为<code>public</code>的文件夹，其中有一个<code>index.html</code>文件和名为<code>css</code>的文件夹且其中有一个文件<code>index.css</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">let</span> app = express()</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'./public'</span>))</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.send(<span class="string">'hello world'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure>
<p>此时访问<a href="127.0.0.1:3000" target="_blank" rel="external">127.0.0.1:3000</a>这个根目录就会默认去访问<code>public</code>文件夹，由于访问文件夹时是默认寻找其中的<code>index.html</code>文件，所以也就是默认访问了<code>public</code>文件中的<code>index.html</code>文件；访问<a href="127.0.0.1:3000/css/index.css" target="_blank" rel="external">127.0.0.1:3000/css/index.css</a>返回的是<code>index.css</code>文件的内容（是不是超级方便）。</p>
<p>如果不想根目录就访问静态资源的话</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/source'</span>,express.static(<span class="string">'./public'</span>))</div></pre></td></tr></table></figure>
<p>这样一来，访问根目录还是返回<code>hello world</code>，<a href="127.0.0.1:3000/source" target="_blank" rel="external">127.0.0.1:3000/source</a>才是访问静态资源的目录。具体可以查阅<a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="external">express的API</a>。</p>
<p><em>注意：访问文件夹时默认寻找指定文件夹中的<code>index.html</code>文件。</em></p>
<h5 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h5><p>1、首先安装模版<code>npm i ejs --save</code></p>
<p>2、服务代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//01.js</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">let</span> app = express()</div><div class="line"></div><div class="line"><span class="comment">//指定视图所在的位置</span></div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</div><div class="line"><span class="comment">//注册模版引擎</span></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>)</div><div class="line"></div><div class="line"><span class="comment">//使用模版引擎</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123;<span class="string">'lists'</span>: [<span class="string">'章三'</span>, <span class="number">18</span>, <span class="string">'篮球'</span>]&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure>
<p>3、创建一个<code>views</code>的文件夹和<code>01.js</code>平级，里面创建一个<code>index.ejs</code>，内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//index.ejs</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;%</div><div class="line">            for(var i =0; i&lt;lists.length; i++)&#123;</div><div class="line">        %&gt;</div><div class="line">        &lt;li&gt;&lt;%= lists[i] %&gt;&lt;/li&gt;</div><div class="line">        &lt;%</div><div class="line">            &#125;</div><div class="line">        %&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>4、浏览器中输入地址<a href="127.0.0.1:3000" target="_blank" rel="external">127.0.0.1:3000</a>可以看到传入的<code>lists</code>以<code>li</code>的形式显示，表示页面中接收到了传入的参数并将其渲染。</p>
<h4 id="应用生成器"><a href="#应用生成器" class="headerlink" title="应用生成器"></a>应用生成器</h4><p>在开发<code>vue</code>项目时，我们使用<code>vue-cli</code>来生成项目的一个整体架构，<code>express</code>也有这样一个应用生成器（一般我称作脚手架），可以快速的生成一个项目的骨架。</p>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p>以管理员身份全局安装：<code>sudo npm i express-generator -g</code></p>
<p>全局安装好以后就可以使用其来生成一个项目了</p>
<p><em>注意：全局安装必须使用管理员身份，否则会报错</em></p>
<h5 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h5><p>1、上面已经全局安装了<code>express</code>的脚手架，找到一个你想要放置项目的目录，然后设置模版引擎（视图引擎）为<code>ejs</code>，项目名称为<code>expressProject</code>，命令行语句为：<code>express --view=ejs expressProject</code></p>
<p>生成项目骨架如下</p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180719_1.png" alt=""></p>
<p>2、根据提示，进入项目中：<code>cd expressProject</code></p>
<p>3、安装项目依赖：<code>npm install</code></p>
<p>4、运行项目：<code>DEBUG=expressprject:* npm start</code></p>
<p>5、运行成功后，浏览器中输入地址<a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a>访问项目成功页面：</p>
<p><img src="http://7xvmm0.com1.z0.glb.clouddn.com/Snip20180719_2.png" alt=""></p>
<p>6、打开项目的<code>package.json</code>文件，里面有一句</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"node ./bin/www"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明以后我们启动项目只需要命令行中输入<code>npm start</code>或者<code>node ./bin/www</code>即可；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js文件</span></div><div class="line"><span class="keyword">let</span> createError = <span class="built_in">require</span>(<span class="string">'http-errors'</span>);</div><div class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">let</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</div><div class="line"><span class="keyword">let</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 引入路由文件</span></div><div class="line"><span class="keyword">let</span> indexRouter = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</div><div class="line"><span class="keyword">let</span> usersRouter = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 生成express实例</span></div><div class="line"><span class="keyword">let</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// view engine setup</span></div><div class="line"><span class="comment">// 设置视图引擎</span></div><div class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 使用引入的包文件</span></div><div class="line">app.use(logger(<span class="string">'dev'</span>));</div><div class="line">app.use(express.json());</div><div class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</div><div class="line">app.use(cookieParser());</div><div class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</div><div class="line"></div><div class="line"><span class="comment">// 让用户访问路由找到对应的文件</span></div><div class="line">app.use(<span class="string">'/'</span>, indexRouter);</div><div class="line">app.use(<span class="string">'/users'</span>, usersRouter);</div><div class="line"></div><div class="line"><span class="comment">// catch 404 and forward to error handler</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  next(createError(<span class="number">404</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// error handler</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// set locals, only providing error in development</span></div><div class="line">  res.locals.message = err.message;</div><div class="line">  res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err : &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="comment">// render the error page</span></div><div class="line">  res.status(err.status || <span class="number">500</span>);</div><div class="line">  res.render(<span class="string">'error'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = app;</div></pre></td></tr></table></figure>
<p><code>public</code>：用来存放静态资源文件，例如图片资源，<code>js</code>文件以及<code>css</code>文件；</p>
<p><code>routers</code>：存放所有路由文件</p>
<h4 id="到此为止"><a href="#到此为止" class="headerlink" title="到此为止"></a><code>到此为止</code></h4><p>通过上面的介绍了解了<code>express</code>生成器初始化一个项目，现在根据项目的基本配置往相应的文件夹中写入内容即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vue生命周期钩子]]></title>
      <url>http://yy709593266.github.io/blog/2018/05/29/20180529-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/</url>
      <content type="html"><![CDATA[<p>从地产云到云眸的信息发布系统，再到现在的基线，一直都在用vue框架，感觉自己已经是个废人了，原生js也忘记的差不多了，vue也只是会用那么一丢丢，至于原理啊，生命周期啊这些都不是很懂，月底要交一篇经验案例，想了半天觉得自己啥经验案例也没有，只能好好理解一下vue的生命周期钩子，看能不能写一篇经验案例吧。<a id="more"></a></p>
<h3 id="vue有哪些生命周期钩子"><a href="#vue有哪些生命周期钩子" class="headerlink" title="vue有哪些生命周期钩子"></a>vue有哪些生命周期钩子</h3><p>要理解vue的生命周期钩子，首先要知道它到底有哪些生命周期钩子</p>
<ul>
<li>beforeCreate</li>
<li>created</li>
<li>beforeMount</li>
<li>mounted</li>
<li>beforeUpdate</li>
<li>updated</li>
<li>beforeDestroy</li>
<li>destroyed</li>
<li>activated</li>
<li>deactivated<br>vue的这些生命周期钩子有些是和组件相关的，比如activated和deactivated，常用的也就其中几个而已。</li>
</ul>
<h3 id="从生命钩子中看实例的属性和方法"><a href="#从生命钩子中看实例的属性和方法" class="headerlink" title="从生命钩子中看实例的属性和方法"></a>从生命钩子中看实例的属性和方法</h3><p>首先是有初始数据的DOM渲染，给实例定义一个方法和一个属性，在不同的生命周期钩子中打印其值：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180529-225049@2x.png" alt=""><br>此时这里的arr是初始化定义的，如果此时的arr是通过接口异步获取的又会怎么样呢，下面是使用定时器来模拟的异步获取数据：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180529-230418@2x.png" alt=""><br>到此为止我们可以看到，mounted里面我们只是对初始数据的DOM渲染完毕，可以获取到DOM<br>这里需要注意的是，定时器setTimeout是被加在事件队列的最后来进行执行的，所以即使它是写在created中，但是还是mounted先执行，然后再执行setTimeout中的操作。<br>从打印的值可以看出，异步接口获取值并赋值以后还是没有等到更新，此时我们可到另外一个钩子，那就是update，所以我们看看update之前和update之后是不是能监测到属性值的变化<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180529-231145@2x.png" alt=""><br>可以看到，update确实监测到了属性值的变化，那我们是不是就要在created中获取异步值，然后update这个值来进行操作呢？当然不是，因为如果在这个setTimeout后面还有一个setTimeout会对找个属性进行赋值，那此时update就会监测到两次属性值的变化，但是业务是只需要我们在最后一次更新后对拿到数据对页面进行操作，因此并不建议这样做。<br>看下面一个使用了nextTick的例子<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180529-233338@2x.png" alt=""><br>为了在数据变化之后等待Vue完成更新DOM ，可以在数据变化之后立即使用Vue.nextTick(callback) 。这样回调函数在DOM更新完成后就会调用，主要用于对某一个数据的某一次具体的变化进行操作<br>至于nextTick的具体的使用可以先看看<a href="https://cn.vuejs.org/v2/guide/reactivity.html#search-query-sidebar" target="_blank" rel="external">vue的深入响应式原理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vue+webpack如何配置]]></title>
      <url>http://yy709593266.github.io/blog/2018/01/25/20180125-vue+webpack%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>通常，在新建一个项目的时候，我都是用直接用vue的脚手架来生成的，然后在里面添加内容即可。其实，对于它自动生成的东西我是不太懂的，也就只会写一些页面啊路由什么的，自动生成的一些webpack的配置之类的如果根据项目需求修改配置的话，我是一大脸懵逼的，这里不使用vue的脚手架，而是从零开始一步步的搭建一个vue+webpack的项目。<a id="more"></a></p>
<h3 id="如何从零开始一个vue-webpack的项目"><a href="#如何从零开始一个vue-webpack的项目" class="headerlink" title="如何从零开始一个vue+webpack的项目"></a>如何从零开始一个vue+webpack的项目</h3><p>1、新建一个项目文件夹（vue+webpack_config），然后在该文件夹下初始化一个项目<br><code>npm init</code><br>初始化过程中出现的选项可以自行填一下，最后选择yes后会在项目文件夹下生成一个package.json文件</p>
<p>2、安装我们这个项目的基本模块vue和webpack，安装vue的话又需要安装vue-loader<br><code>npm i webpack vue vue-loader --save</code><br>安装完成后会自动生成一个node-modules文件夹<br>（另：–save安装的插件会被写入到dependencies对象中，–save-dev安装的插件会被写入到devDependencies对象中，devDependencies里面的插件只用于开发环境，不用于生产环境，而 dependencies是需要发布到生产环境的，虽然我还没弄明白为什么开发环境需要的东西生产环境下竟然会不需要。。。）</p>
<p>3、安装完会出现一个npm的warn，让我们安装css-loader、vue-tamplate-compiler依赖，根据提示继续安装<br><code>npm i css-loader vue-template-compiler --save</code><br>到此，基本的一个项目初始化雏形完成<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/vuewebpack1.jpeg" alt=""></p>
<h3 id="如何配置webpack来加载我们的非js的静态文件"><a href="#如何配置webpack来加载我们的非js的静态文件" class="headerlink" title="如何配置webpack来加载我们的非js的静态文件"></a>如何配置webpack来加载我们的非js的静态文件</h3><p>4、下面是项目文件，首先新建一个文件夹，用来存放源码（src）</p>
<ul>
<li>首先在src目录下新建一个app.vue文件，并且在该文件中把vue的基本结构写好，vue的文件格式由template、script和style组成，这里写一个测试的页面如下<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180314-220521@2x.png" alt=""><br>但是我们的浏览器是不能直接运行vue文件的(可以直接运行html文件)，所以下面我们需要解决的问题就是如何让这个文件可以运行在浏览器中</li>
<li>新建一个webpack.config.js文件和src文件夹平级，用来打包我们的前端资源（包括js,css,图片，字体等），这些资源都是需要通过http请求去加载的，这些加载可以使用一个js文件作为入口，并在webpack.config.js文件中进行配置，我们将入口文件定义在src文件夹下，命名为index.js<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180314-230019@2x.png" alt=""></li>
<li>src下的app.vue作为一个组件需要手动挂载到html中去（否则就是一个独立的文件，没有实际意义），所以需要在入口文件index.js中进行挂载<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180314-224734@2x.png" alt=""></li>
<li>现在去package.json文件中添加一行代码<code>build: webpack --config webpack.config.js&quot;</code><br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180315-222432@2x.png" alt=""><br>如果直接在命令行里面执行webpack命令的话执行的是全局的webpack，可能和我们安装在node_modules中的webpack版本不一样，所以还是使用在package.json中运行webpack命令。</li>
<li>然后在命令行执行一下<code>npm run build</code>，发现报错了<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180315-225105@2x.png" alt=""><br>因为webpack原生是只支持js的文件类型，并且支持的语法只有ES5的语法，因此需要配置一些内容来让它可以处理超出它能力范围的文件和语法，所以下一步就是配置vue文件的loader:在webpack.config.js中加一个配置如下：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180315-231258@2x.png" alt=""><br>此时在命令行中再执行一次<code>npm run build</code>，没有再报错，并且根目录下多出了一个dist文件夹，里面有一个bundle.js(包含webpack做的事情，和vue源码，以及我们创建的页面内容)。<br>所以，webpack要做的事情，就是将不同的静态资源的类型打包成一个js，这样我们在html中去引用这个js的时候就可以正常的运行其中的js内容，作为前端，希望能把很多零碎的js打包在一起，可以减少http请求。</li>
<li>下面将各种文件的loader都配置上：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180316-220503@2x.png" alt=""><br>这只是在webpack中对不同格式的文件进行了loader配置，下面就是对这些loader进行安装(其中url-loader是基于file-loader的，所以还需要安装file-loader，css-loader和vue-loader项目开始时候就已经安装过了)：<br><code>npm install style-loader url-loader file-loader</code></li>
<li><p>安装成功这些loader后就可以在js中import这些非js的内容了。现在在src目录下新建一些非js类型的文件如下，同时在入口文件index.js中对这些文件进行引入：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180316-230118@2x.png" alt=""><br>其中test.css文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">    color: aqua;</div><div class="line">    background-image: url(&apos;../images/jay4.png&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>此时打个包看一下webpack打包的结果，执行一下<code>npm run build</code>，可以看到dist目录，css文件已经通过loader写入了bundle.js文件中，而css中引入的图片文件也同样打包到了dist目录下，图片名称也是按照我们在webpack.config.js中的命名规则来的。</p>
</li>
<li><p>已知在项目中我们很少会直接写css，通常都是写less、scss或者styl，那么如何配置webpack使它能够处理这些css的预处理器呢？下面对其进行配置，在webpack.config.js文件中配置：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180319-231423@2x.png" alt=""><br>配置完以后同样需要在安装依赖，在命令行中安装所需要的包及其依赖包，即<code>npm i stylus-loader stylus</code><br>同时，为了验证webpack可以处理这些预处理器，我们新建了一个<code>.styl</code>的文件在styles目录下，并将其命名为<code>test-stylus.styl</code>，用于设置字体大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">    font-size 20px</div></pre></td></tr></table></figure>
<p>同样的，写完以后还需要在入口文件index.js中引入该文件（同引入<code>test.css</code>文件方法一样）<br>最后进行<code>npm run build</code>打包，发现在打包后的bundle.js中已经将styl文件中的<code>font-size：20px</code>处理成css内容并写入其中</p>
</li>
</ul>
<h3 id="如何配置webpack-dev-server来使我们的开发效率提高"><a href="#如何配置webpack-dev-server来使我们的开发效率提高" class="headerlink" title="如何配置webpack-dev-server来使我们的开发效率提高"></a>如何配置webpack-dev-server来使我们的开发效率提高</h3><ul>
<li>webpack-dev-server其实是webpack的包，既然说是包了，当然首先得安装，命令行首先得搞起<code>npm i webpack-dev-server</code></li>
<li>安装完成之后，在package.js中做如下改动：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180319-234602@2x.png" alt=""><br>上一句的build是使用webpack去启动了webpack.config.js文件<br>下面的dev就是使用webpack-dev-server,去启动这个配置文件来为我们的项目代码进行打包，使用webpack-dev-server会带给和webpack处理不一样的效果，是专门用于开发环境的<br>因为我们使用的是同一个配置文件，因此对于这个webpack.config.js配置文件，我们还需要增加一些专门的配置来适应webpack-dev-server启动的开发模式：<br>首先就是在webpack.config.js中的module.exports对象中添加一行<code>target:web</code>，表示我们是要在浏览器中运行的<br>然后，因为这个配置文件我们是需要用在正式环境和开发环境下的，所以需要对于不同的环境我们需要在配置文件中作出判断，那么如何作出判断呢：这里我们先安装一个npm的包<code>npm i cross-env</code>,这个包是用来兼容window和Mac不同系统上定义环境变量的方法，安装完成后就可以统一设置环境变量了，如下：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180326-215644@2x.png" alt=""></li>
<li>如此,使用<code>NODE_ENV</code>变量就可以用来区分开发环境和正式环境了，现在就可以在公用的config的配置文件中对开发环境和正式环境作不同的判断从而配置不同的内容：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180326-221008@2x.png" alt=""></li>
<li>目前为止，我们编译的结果中(dist目录下)只有js文件和图片，没有一个html可以容纳js文件，也就是我们还看不到我们的页面内容项目还跑不起来，因此我们需要一个html作为我们项目页面的入口。下面的问题就是我们如何在项目中添加html文件而且还能让它包含我们的js？<br>答案：我们在项目中安装一个webpack的包(<code>npm i html-webpack-plugin</code>)，并在配置文件webpack.config.js中引入和进行相关配置<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180326-223514@2x.png" alt=""></li>
<li>运行代码，<code>npm run dev</code>报错如下：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180408-224832@2x.png" alt=""><br>有猿友说如果你的webpack-dev-server是2.x的，就要安装3.x的webpack，如果你的webpack-dev-server是3.x的就需要安装4.x的webpack，看了一下我的webpack-dev-server是3.x的，果断降级了webpack-dev-server的版本<code>npm i webpack-dev-server@^2</code>，就不会报这个错了（本来是想升级webpack的版本的，但是看到说是升级会出现一堆坑，果然选择了捷径，果然一次就成功了。后面有时间的话试一下升级，踩一下那些坑）。下面是成功后的结果，果然好看了很多，哈哈哈<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/WX20180408-231430@2x.png" alt=""><br>下面直接访问localhost:8000就能看到浏览器可以运行我们的内容了。。。。。。<br>到此为止，vue和webpack的的基本配置已经结束了，没有使用vue-cli也可以运行vue文件了！<br><a href="https://github.com/yy709593266/vue_webpack-config" target="_blank" rel="external">代码下载</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些后知后觉的笔面试题]]></title>
      <url>http://yy709593266.github.io/blog/2016/11/19/20161119-%E7%AC%94%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>找工作的日子是难熬的，找完工作的日子是无聊的，难得无聊的日子也不能自我放弃喽，趁着这个悠（wu）闲（liao）的日子里，把那些月子里锻（zhe）炼（mo）我的笔试和面试遇题做一个集锦，以备不时之需（😂😂）<a id="more"></a></p>
<p>1、给定几个数，写出一个方法，将这几个数拼接出最大整数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function MaxNum(arr)&#123;</div><div class="line">	arr = arr.sort();</div><div class="line">	var len = arr.length;</div><div class="line">	var result = &quot;&quot;;</div><div class="line">	for(var i = len - 1; i &gt;= 0; i--) &#123;</div><div class="line">		result += arr[i];</div><div class="line">	&#125;</div><div class="line">	return parseInt(result);</div><div class="line">&#125;</div><div class="line">var arr = [1, 13, 5];</div><div class="line">console.log(MaxNum(arr));		//5131</div></pre></td></tr></table></figure></p>
<p><code>arrayObject.sort(sortby)</code>方法会调用每个数组项的<code>toString()</code>转型方法，然后比较得到的字符串，以确定顺序。参数可选，在没有使用参数的时候，按照字符串编码的顺序进行排序；如果想按照其它标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字，比较函数应该具有两个参数a和b，其返回值如下，若a小于b，在排序后的数组中a应该出现在b之前，则返回一个小于0的值，若a等于b，则返回0，若a大于b，则返回一个大于0的值，sort根据这个函数返回的结构对这个数组进行冒泡排序(即，根据返回－1的那个条件来排序)，假如我们想要降序排序这个数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 13, 5];</div><div class="line">function compare(a, b)&#123;</div><div class="line">	if(a &lt; b) &#123;</div><div class="line">		return -1;</div><div class="line">	&#125;else if(a &gt; b) &#123;</div><div class="line">		return 1;</div><div class="line">	&#125;else &#123;</div><div class="line">		return 0;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">arr.sort(compare);</div><div class="line">console.log(arr);		//[1, 5, 13]</div></pre></td></tr></table></figure></p>
<p>2、我太懒了。。。待续</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从psd photo到css style]]></title>
      <url>http://yy709593266.github.io/blog/2016/09/04/20160904(psd-css)/</url>
      <content type="html"><![CDATA[<p>如何将视觉美眉给的psd图用CSS样式表示出来对于前端工作人员来说是一个很重要的问题，特别是细节，比如颜色、阴影效果等。因为对photoshop本来就不是很熟，所以对平时自己慢慢积累用到的一些关于photoshop的技巧和方法实时记下来，以免回头一顿火锅的时间就给忘了（此时在北京实习的日子很是想念火锅，重庆火锅！对！我很爱吃火锅！！！）。<a id="more"></a></p>
<h3 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ul>
<li>工具栏自动选择图层选中</li>
<li>窗口中打开图层工具条</li>
<li>选中想要切的图，点击后图层工具栏中会自动选中该图层</li>
<li>图层工具栏中在选中的图层上右击－&gt;转换成智能对象</li>
<li>图层工具栏中双击已被转换成智能对象的图层前面的图标</li>
<li>弹出的窗口点击确定（现在就自动新建了一个画布将你要切的图复制过去了）</li>
<li>新建的画布中存储刚切出来的图并保存为web存储格式即可<br>注意⚠️：如果想要切的图是几个图层的话就可以按住<code>Ctrl</code>键，同时选中后再一起转换成智能对象，后面的步骤都相同。<br>🙏：感谢叶师傅</li>
</ul>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>如果想要的图是100＊100的，而psd给的该图标的大小只有80＊70，为了得到想要的大小的图100＊100，可以给图指定一个大小（100＊100）再切，这样切出来的图不会失真而且大小还是自己想要的（给多余的宽高背景都透明）。</p>
<ul>
<li>工具栏自动选中图层选中</li>
<li>窗口中打开图层工具栏</li>
<li>选中想要切的图，点击后图层工具栏中会自动选中该图层</li>
<li>按住<code>Alt</code>键同时点击图层窗口中选中图层前面的小眼睛（以此来隐藏其它图层）</li>
<li>选中选框工具，并在上面工具栏中样式选中固定大小（或者固定比例），输入宽高值，得到自定义选框</li>
<li>点击psd图移动选框位置使得想要切的图在选框居中位置（大概居中，还没发现一个绝对居中的方法）</li>
<li>点击裁切工具确定裁切并保存为web存储格式即可<br>注意⚠️：裁切完以后一定要到历史工具栏中恢复一下，不然整张图就没切成这么一点了，原图就没啦。</li>
</ul>
<h3 id="获取阴影效果"><a href="#获取阴影效果" class="headerlink" title="获取阴影效果"></a>获取阴影效果</h3><p>有时候视觉美眉给的一张psd图有些部分会是阴影效果，这时候写CSS样式时，需要根据psd给定的阴影效果写参数：</p>
<ul>
<li>选中阴影元素</li>
<li>图层工具栏中双击该图层（双击空白处）</li>
<li>出现一个弹窗，里面有该阴影的信息，现在根据这些信息就能计算出CSS样式中box－shadow的值了<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160907-1.jpg" alt=""><br>已知box－shadow值有五个参数，根据以上信息计算出五个参数具体值：<br>参数1: 距离＊cos(180-角度)px;<br>参数2: 距离＊sin(180-角度)px;<br>参数3: (大小－参数4)px;<br>参数4: 大小＊扩展(0%-100%)px;<br>参数5: rgba()(点击混合后面一个颜色区域可以获取rgb值，a不透明度)。<br>这种图给出的值计算出来的box－shadow参数值就是：<br>参数1: 20＊cos(90) = 0px;<br>参数2: 20＊sin(90) = 20px;<br>参数3: 25-0 ＝ 25px;<br>参数4: 25＊0% ＝ 0px;<br>参数5: rgba(113, 135, 169, .25)。<br>即<code>box-shadow: 0px 20px 25px 0px rgba(113, 135, 169, .25)</code>。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript继承]]></title>
      <url>http://yy709593266.github.io/blog/2016/08/29/20160829(javascript%E7%BB%A7%E6%89%BF)/</url>
      <content type="html"><![CDATA[<p>javascript在ES6之前，我们通过构造函数来创造一个类，并且通过原型来扩展属性，然后可以这样实现继承，这里主要说明这种继承方式各个构造函数原型之间的关系，顺便聊聊如何通过ES6实现继承。<a id="more"></a></p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Person(name, age, sex)&#123;</div><div class="line">	this.name = name;</div><div class="line">	this.age = age;</div><div class="line">	this.sex = sex;</div><div class="line">&#125;</div><div class="line">Person.prototype.personLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);</div><div class="line">console.log(person1);</div></pre></td></tr></table></figure>
<p>实例化一个Person命名为person1：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-1.jpg" alt=""><br>一个对象A的<code>_proto_</code>属性指向的那个对象B就是它的原型对象（或者叫上级对象，父对象）。</p>
<h3 id="继承－1"><a href="#继承－1" class="headerlink" title="继承－1"></a>继承－1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function Person(name, age, gender) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.age = age;</div><div class="line">	this.gender = gender;</div><div class="line">&#125;</div><div class="line">Person.prototype.personLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Personal(name, age, gender, occupation, hobby) &#123;</div><div class="line">	Person.call(this, name, age, gender);</div><div class="line">	this.occupation = occupation;</div><div class="line">	this.hobby = hobby;</div><div class="line">&#125;</div><div class="line">Personal.prototype = Object.create(Person.prototype);</div><div class="line">// Personal.prototype.constructor = Personal;		//显示声明Personal类的constructor</div><div class="line">Personal.prototype.personalLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);</div><div class="line">console.log(person1);</div><div class="line">let personal1 = new Personal(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;);</div><div class="line">console.log(personal1);</div></pre></td></tr></table></figure>
<p>实例化一个Personal命名为personal1:<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-2.jpg" alt=""><br><code>Object.create()</code>是一种新的对象创建方式，第一个参数必需，要用作原型的对象，第二个参数可选，包含一个或多个属性描述符的javascript对象。</p>
<h3 id="继承－2"><a href="#继承－2" class="headerlink" title="继承－2"></a>继承－2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">function Person(name, age, gender) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.age = age;</div><div class="line">	this.gender = gender;</div><div class="line">&#125;</div><div class="line">Person.prototype.personLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Personal(name, age, gender, occupation, hobby)&#123;</div><div class="line">	Person.call(this, name, age, gender);</div><div class="line">	this.occupation = occupation;</div><div class="line">	this.hobby = hobby;</div><div class="line">&#125;</div><div class="line">Personal.prototype = Object.create(Person.prototype);</div><div class="line">Personal.prototype.constructor = Personal;</div><div class="line">Personal.prototype.personalLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Biology(name, age, gender, occupation, hobby) &#123;</div><div class="line">	Personal.call(this, name, age, gender, occupation, hobby);</div><div class="line">&#125;</div><div class="line">Biology.prototype = Object.create(Personal.prototype);</div><div class="line">Biology.prototype.constructor = Biology;</div><div class="line">Biology.prototype.biologyLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);</div><div class="line">console.log(person1);</div><div class="line"></div><div class="line">let personal1 = new Personal(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;);</div><div class="line">console.log(personal1);</div><div class="line"></div><div class="line">let biology = new Biology(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;)</div><div class="line">console.log(biology1);</div></pre></td></tr></table></figure>
<p>实例化一个Biology命名为biology1：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-3.jpg" alt=""><br>以此类推实现继承。</p>
<h3 id="ES6类"><a href="#ES6类" class="headerlink" title="ES6类"></a>ES6类</h3><p>ES6中出现了类的概念，ES6提供了更多的语法躺，可以直接创造一个类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">	constructor(name, age, sex) &#123;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">		this.sex = sex;</div><div class="line">	&#125;</div><div class="line">	personLogAge()&#123;</div><div class="line">		console.log(this.age);</div><div class="line">	&#125;</div><div class="line">	personLogName()&#123;</div><div class="line">		console.log(this.name);</div><div class="line">	&#125;</div><div class="line">	personLogSex()&#123;</div><div class="line">		console.log(this.sex);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;yuan&apos;, 17, &apos;female&apos;);</div><div class="line">console.log(person1);</div></pre></td></tr></table></figure></p>
<p>通过ES6方法定义一个类，实例化一个Person命名为person1：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-4.jpg" alt=""><br>ES6方法写的类内部所有定义的方法都是不可枚举的（non－enumberable），这也就是为什么实例只能看到它的属性值，使用<code>Object.keys(person1)</code>可以看到可以枚举的属性只有<code>[&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;]</code>，这一点和ES5行为不一致。</p>
<h3 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">	constructor(name, age, sex) &#123;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">		this.sex = sex;</div><div class="line">	&#125;</div><div class="line">	personLogAge()&#123;</div><div class="line">		console.log(this.age);</div><div class="line">	&#125;</div><div class="line">	personLogName()&#123;</div><div class="line">		console.log(this.name);</div><div class="line">	&#125;</div><div class="line">	personLogSex()&#123;</div><div class="line">		console.log(this.sex);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Personal extends Person &#123;</div><div class="line">	constructor(name, age, sex, occupation, hobby) &#123;</div><div class="line">		super(name, age, sex);</div><div class="line">		this.occupation = occupation;</div><div class="line">		this.hobby = hobby;</div><div class="line">	&#125;</div><div class="line">	personalLogAge()&#123;</div><div class="line">		console.log(this.age);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;yuan&apos;, 17, &apos;female&apos;);</div><div class="line">console.log(person1);</div><div class="line">let personal1 = new Personal(&apos;xiao&apos;, 21, &apos;male&apos;, &apos;web&apos;, &apos;coding&apos;);</div><div class="line">console.log(personal1);</div></pre></td></tr></table></figure>
<p>Personal类继承了Person类，实例化一个Personal命名为personal1:<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-5.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IE9-jQuery-ajax]]></title>
      <url>http://yy709593266.github.io/blog/2016/08/03/20160803(IE9-jQuery-ajax)/</url>
      <content type="html"><![CDATA[<p>最近项目中使用jQuery的ajax发送跨域请求获取数据时，在IE9中请求未发送出去，最后找到大神解决了<a id="more"></a></p>
<h3 id="一般的请求"><a href="#一般的请求" class="headerlink" title="一般的请求"></a>一般的请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">	type: &apos;GET&apos;,</div><div class="line">	crossDomain: true,</div><div class="line">	success: function(msg)&#123;</div><div class="line">		//do something with your recieved message</div><div class="line">	&#125;,</div><div class="line">	error: function()&#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="兼容IE9的请求"><a href="#兼容IE9的请求" class="headerlink" title="兼容IE9的请求"></a>兼容IE9的请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">if(window.XDomainRequest)&#123;</div><div class="line">	var xdr = new XDomainRequest();</div><div class="line">	var query = yourUrl;</div><div class="line">	if(xdr) &#123;</div><div class="line">		xdr.onload = function()&#123;</div><div class="line">			var msg = JSON.parse(xdr.responseText);</div><div class="line">			// do something with your recieved message</div><div class="line">		&#125;;</div><div class="line">		xdr.onerror = function()&#123;&#125;;</div><div class="line">		xdr.open(&apos;GET&apos;, query);</div><div class="line">		xdr.send();</div><div class="line">	&#125;</div><div class="line">&#125;else &#123;</div><div class="line">	$.ajax(&#123;</div><div class="line">		type: &apos;GET&apos;,</div><div class="line">		url: yourUrl,</div><div class="line">		crossDomain: true,</div><div class="line">		success: function(msg)&#123;</div><div class="line">			//do something with your recieved message</div><div class="line">		&#125;,</div><div class="line">		error: function()&#123;&#125;	</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>🙏：感谢阔阔师傅</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ajaxFileUpload插件上传图片]]></title>
      <url>http://yy709593266.github.io/blog/2016/07/26/20160726(ajaxFileUpload%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0)/</url>
      <content type="html"><![CDATA[<p>最近在项目中遇到一个照片上传的需求，用到了ajaxFileUpload的jQuery插件，中间遇到很多问题，不是缺少函数定义就是出现只能上传一次的问题，在这里对ajaxFileUpload插件使用中的问题做个总结。<a id="more"></a></p>
<h3 id="插件引入"><a href="#插件引入" class="headerlink" title="插件引入"></a>插件引入</h3><p>因为ajaxFileUpload插件是基于jQuery的插件，所以引入这个插件之前需要先引入jQuery插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;ajaxFileUpload.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="问题一-handleError"><a href="#问题一-handleError" class="headerlink" title="问题一:handleError"></a>问题一:handleError</h3><p>input标签提供一个直接上传文件的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line">&lt;input name=&quot;file&quot; id=&quot;upload&quot; type=&quot;file&quot;&gt;</div><div class="line"></div><div class="line">//js</div><div class="line">$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123;</div><div class="line">	$.ajaxFileUpload(&#123;</div><div class="line">		url: &apos;xxx/xxx/xxx&apos;,	//请求地址</div><div class="line">		type: &apos;post&apos;,		//请求方式</div><div class="line">		secureuri: false,	//是否启用安全提交，默认false</div><div class="line">		fileElementId: &apos;upload&apos;,//上传input的id</div><div class="line">		success: function(data, status)&#123;</div><div class="line">			console.log(data);</div><div class="line">		&#125;,</div><div class="line">		error: function(data, status, e)&#123;</div><div class="line">			console.log(data.msg);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里选中图片确定以后触发input的onchange事件，此时发送请求将图片信息传给后台并获取后台返回数据，这里后台会给每次提交的图片返回一个特定的id，提交时候就将这个id提交给后台将图片保存起来，以后要访问图片就将src指定这张图片地址就行了。如果点击选中图片后再删除这张图片，那么虽然这张图片点击选中时后台返回了一个指定id，但是在提交表单的时候这张图片的id是不需要传给后台的，因为用户可能手抖点错了照片，不需要保存这张先选中后来被删除的照片的地址的(有点绕)。<br>第一个问题就是，提示<code>handleError is not a function</code>，根据网上搜到的解决办法，就是复制一份这个函数到ajaxFileUpload函数中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">handleError: function(s, xhr, status, e)&#123;</div><div class="line">	// If a local callback was specified, file it</div><div class="line">	if(s.error)&#123;</div><div class="line">		s.error.call(s.context || s, xhr, status, e);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//File the global callback</div><div class="line">	if(s.global)&#123;</div><div class="line">		(s.context ? jQuery(s.context) : jQuery.event).trigger(&quot;ajaxError&quot;, [xhr, s, e]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里有一份已经添加完handleError函数的<a href="http://pan.baidu.com/s/1mhBW0S4" target="_blank" rel="external">ajaxFileUpload</a>文件，好了，这样就不会报<code>handleError is not a function</code>的错了。</p>
<h3 id="问题二：data"><a href="#问题二：data" class="headerlink" title="问题二：data"></a>问题二：data</h3><p>请求success时候返回的数据data应该就是后台返回的我们需要的值了，但是直接console.log出来发现，又有问题了，数据被一层不知道哪儿来的标签包住了，这里我们需要对接收到的data进行一次处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//js</div><div class="line">$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123;</div><div class="line">	$.ajaxFileUpload(&#123;</div><div class="line">		url: &apos;xxx/xx/xx&apos;,</div><div class="line">		type: &apos;post&apos;,</div><div class="line">		secureuri: false,</div><div class="line">		fileElementId: &apos;upload&apos;,</div><div class="line">		success: function(data, status)&#123;</div><div class="line">			var str = $(data).find(&quot;body&quot;).text();		//获取返回的字符串</div><div class="line">			var json = $.parseJSON(str);				//把字符串转化成json对象</div><div class="line">			console.log(json);							//我们需要的数据</div><div class="line">		&#125;,</div><div class="line">		error: function(data, status, e)&#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>虽然我也不造具体什么原因，反正这样写就没得问题啦，先解决燃眉之急，再追究其所以然。</p>
<h3 id="问题三：onchange"><a href="#问题三：onchange" class="headerlink" title="问题三：onchange"></a>问题三：onchange</h3><p>上面问题都解决以后可以上传图片并获得图片id了，但是只能上传一张图片，再点击上传一张就不行了，网上查了资料说是ajaxFileUpload插件，它会把原来的file元素替换成新的file元素，所以之前绑定在旧的input上的change事件就失效了，需要重新绑定一次，试了一下果然有效，不过代码需要重新编排一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$(&apos;#upload&apos;).on(&apos;change&apos;, upload);</div><div class="line"></div><div class="line">function upload()&#123;</div><div class="line">	if(true)&#123;</div><div class="line">		//根据需求相关操作</div><div class="line">		ajaxFileUpload();</div><div class="line">	&#125;else if(ddd)&#123;</div><div class="line"></div><div class="line">	&#125;else &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function ajaxFileUpload()&#123;</div><div class="line">	$.ajaxFileUpload(&#123;</div><div class="line">		url: &apos;xxx/xx/xx&apos;,</div><div class="line">		type: &apos;post&apos;,</div><div class="line">		secureuri: false,</div><div class="line">		fileElementId: &apos;upload&apos;,</div><div class="line">		success: function(data, status)&#123;</div><div class="line">			var str = $(data).find(&quot;body&quot;).text();</div><div class="line">			var json = $.parseJSON(str);</div><div class="line">			// idList是需要提交给后台的用来放置图片id的数组</div><div class="line">			idList.push(json.result[0].id);</div><div class="line">		&#125;,</div><div class="line">		complete: function(xmlHttpRequest)&#123;</div><div class="line">			$(&quot;#upload&quot;).replaceWith(&apos;&lt;input type=&quot;file&quot; id=&quot;upload&quot; name=&quot;file&quot; class=&quot;hidden&quot;&gt;&apos;);</div><div class="line">			$(&quot;#upload&quot;).on(&quot;change&quot;, upload);</div><div class="line">		&#125;,</div><div class="line">		error: function(data, status, e)&#123;</div><div class="line">			//error</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，照片上传没问题了，再把需要提交的表单数据提交给后台就👌了。</p>
<h3 id="获取图片大小"><a href="#获取图片大小" class="headerlink" title="获取图片大小"></a>获取图片大小</h3><p>上传图片往往需要对用户上传图片大小进行限制，这里插入一段上传图片点击确定获取图片大小的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;获取图片大小&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot; onchange=&quot;getSize()&quot;&gt;</div><div class="line"></div><div class="line">	&lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		var size = 0;</div><div class="line">		function getSize()&#123;</div><div class="line">			//js原生方法</div><div class="line">			var file = document.getElementById(&quot;upload&quot;);</div><div class="line">			size = file.files[0].size;</div><div class="line">			var mSize = (size/1048576).toFixed(2);	//单位是兆M</div><div class="line">			console.log(mSize);</div><div class="line"></div><div class="line">			//jQuery方法</div><div class="line">			//size = $(&quot;#upload&quot;)[0].files[0].size;</div><div class="line">			//var mSize = (size/1048576).toFixed(2);</div><div class="line">			//console.log(mSize);</div><div class="line">		&#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="类型为file的input的样式"><a href="#类型为file的input的样式" class="headerlink" title="类型为file的input的样式"></a>类型为file的input的样式</h3><p>这里既然说到这个type值是file的input标签，就来说下如何修改这种input的样式，一般默认的样式是很难看的，直接给input添加class样式修改又不起作用，所以就需要一点技巧。</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>先把input按钮的透明度opacity设置为0，然后用a标签包裹该input，实现美化效果，这样美化后input的使用还是不变的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;file input&lt;/title&gt;</div><div class="line">	&lt;style&gt;</div><div class="line">		.upload-a&#123;</div><div class="line">			padding: 4px 10px;</div><div class="line">			height: 20px;</div><div class="line">			line-height: 20px;</div><div class="line">			position: relative;</div><div class="line">			cursor: pointer;</div><div class="line">			color: #888;</div><div class="line">			background-color: #fafafa;</div><div class="line">			border: 1px solid #ddd;</div><div class="line">			border-radius: 4px;</div><div class="line">			overflow: hidden;</div><div class="line">			display: inline-block;</div><div class="line">			text-decoration: none;</div><div class="line">		&#125;</div><div class="line">		.upload-a input &#123;</div><div class="line">			opacity: 0;</div><div class="line">			position: absolute;</div><div class="line">			font-size: 100px;</div><div class="line">			right: 0;</div><div class="line">			top: 0;</div><div class="line">			cursor: pointer;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;a href=&quot;javascript:;&quot; class=&quot;upload-a&quot;&gt;</div><div class="line">		&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot;&gt;点击这里上传文件</div><div class="line">	&lt;/a&gt;</div><div class="line">	&lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123;</div><div class="line">			//选择成功以后执行的事件</div><div class="line">		&#125;);</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>这个方法<code>a</code>标签和<code>input</code>标签是同级的，只不过将<code>input</code>的<code>display</code>值设置了<code>none</code>，点击<code>a</code>标签的时候就触发<code>input</code>的<code>click</code>事件，再执行后面的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;file input&lt;/title&gt;</div><div class="line">	&lt;style&gt;</div><div class="line">		.upload &#123;</div><div class="line">			padding: 4px 10px;</div><div class="line">			height: 20px;</div><div class="line">			line-height: 20px;</div><div class="line">			position: relative;</div><div class="line">			cursor: pointer;</div><div class="line">			color: #888;</div><div class="line">			background-color: #fafafa;</div><div class="line">			border: 1px solid #ddd;</div><div class="line">			border-radius: 4px;</div><div class="line">			overflow: hidden;</div><div class="line">			display: inline-block;</div><div class="line">			text-decoration: none;</div><div class="line">		&#125;</div><div class="line">		.hidden &#123;</div><div class="line">			display: none;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;a class=&quot;upload&quot;&gt;点击这里上传文件&lt;/a&gt;</div><div class="line">	&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot; class=&quot;hidden&quot;&gt;</div><div class="line">	&lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		$(&apos;.upload&apos;).on(&apos;click&apos;, function()&#123;</div><div class="line">			$(&apos;#upload&apos;).click();</div><div class="line">		&#125;);</div><div class="line">		$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123;</div><div class="line">			//选择成功以后执行的事件</div><div class="line">		&#125;);</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>第二种方法需要注意⚠️一个问题，这里的<code>$(&#39;#upload&#39;)</code>的<code>change</code>事件需要放在<code>$(&#39;.upload&#39;)</code>的<code>click</code>事件的外面。如果放在里面的话，那么每次触发click事件就会注册一个change事件监听器，这样的话，第一次点击上传会上传一张，第二次点击上传会上传两张（因为，第二次click以后就会注册两个change事件监听器），以此类推，每次点击都会增加一个监听器。<br>🙏：感谢纪师傅</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello Vue!]]></title>
      <url>http://yy709593266.github.io/blog/2016/07/08/20160708(helloVue)/</url>
      <content type="html"><![CDATA[<p>其实看<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">vue的教程</a>我们知道，可以像使用jQuery一样来使用vue.js，即直接使用<code>&lt;script&gt;&lt;/script&gt;</code>标签加载进去就可以使用它了，这里主要讲的是使用npm安装vue的时候我遇到一些问题 <a id="more"></a></p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1、首先保证你已经安装了node和npm<br>2、打开Git，映射npm到cnpm<br><code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>(Mac下影射命令为<code>$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</code>)<br>3、安装vue-cli<br><code>$ cnpm i -g vue-cli</code><br>(Mac下命令为<code>$ sudo cnpm i -g vue-cli</code>)<br>4、<code>cd</code>到一个你放置项目的文件夹，创建webpack项目并且下载依赖<br><code>$ vue init webpack hellovue</code><br>出现的选项可以直接点击enter跳过<br>5、定位到项目中<br><code>$ cd hellovue</code><br>6、安装依赖模块<br><code>$ cnpm i</code><br>7、运行应用<br><code>$ cnpm run dev</code><br>现在可以在<code>localhost:8080</code>上查看我们的应用了。<br>注：如果这时候需要使用npm安装其他的库，比如路由和XHR库的话，需要重新打开一个Git窗口</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我运行的时候出现的是空白页，而且控制台报错了，说<code>main.js</code>文件中的import错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import App from &apos;./App&apos;</div></pre></td></tr></table></figure></p>
<p>这里我们需要使用require加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var Vue = require(&apos;vue&apos;);</div><div class="line">var App = require(&apos;./App.vue&apos;);</div></pre></td></tr></table></figure></p>
<p>这样就能正常运行第一个vue程序Hello World!了。<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/23BF.tmp.jpg" alt=""><br>后面就在里面添加内容或者文件就行了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从插件开发了解jQuery源码]]></title>
      <url>http://yy709593266.github.io/blog/2016/06/23/20160623(jQuery-%E6%8F%92%E4%BB%B6)/</url>
      <content type="html"><![CDATA[<p>想要开发jQuery插件，首先必须了解并熟悉jQuery源码，了解它的整体架构以及方法的实现，这里主要对jQuery插件开发相关的方法并加上自己的理解来进行阐述jQuery源码相关知识，从而让你找到适合自己的方法去理解和开发一个jQuery插件。<a id="more"></a></p>
<h3 id="jQuery的总体架构"><a href="#jQuery的总体架构" class="headerlink" title="jQuery的总体架构"></a>jQuery的总体架构</h3><p>打开jQuery的源码，会发现这样的代码结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function (window, undefined) &#123;</div><div class="line">	// jquery code</div><div class="line">&#125;)(window)</div></pre></td></tr></table></figure></p>
<p>通过定义一个自调用的匿名函数，创建一个私有空间，该私有空间的变量和方法，不会破坏全局的命名空间。jQuery被应用在成千上万的JavaScript程序中，必须确保jQuery创建的变量不能和导入它的程序所使用的变量发生冲突。既然作用范围在这个匿名函数中，怎么被别人使用呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.jQuery = window.$ = jQuery</div></pre></td></tr></table></figure></p>
<p>这里让jQuery库中最重要的jQuery对象成为了window对象的一个属性，这样就可以在其他地方像使用window.document来使用jQuery对象了，而$是jQuery的同名对象</p>
<h3 id="构造jQuery对象"><a href="#构造jQuery对象" class="headerlink" title="构造jQuery对象"></a>构造jQuery对象</h3><p>jQuery对象不是通过new jQuery创建的，而是通过new jQuery.fn.init创建的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var jQuery = function(selector, context)&#123;</div><div class="line">	return new jQuery.fn.init(selector, context);</div><div class="line">&#125;</div><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line">	init: function(selector, context)&#123;</div><div class="line">	//init的功能是对传进来的selector参数进行分析，进行各种不同的处理，然后生成jQuery对象</div><div class="line">	&#125;</div><div class="line">	//...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jQuery对象就是jQuery.fn.init对象，这样构造jQuery对象的方法，如果执行new jQuery()生成的jQuery对象会被抛弃，最后返回jQuery.fn.init对象，因此可以直接调用jQuery(selector, context)，没有必要使用new关键字。<br>关于new出来的init和直接return的init有什么区别呢？<br>如果是直接return的init的话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var jQuery = function(selector, context) &#123;</div><div class="line">   return  jQuery.prototype.init();</div><div class="line">&#125;</div><div class="line">jQuery.prototype = &#123;</div><div class="line">    init:function()&#123;</div><div class="line">    	this.age = 10;</div><div class="line">        return this;</div><div class="line">    &#125;,</div><div class="line">    name:function()&#123;</div><div class="line">    	console.log(&apos;name&apos;);</div><div class="line">    &#125;,</div><div class="line">    age: 20</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当执行jQuery()返回如下:<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/7A11.tmp.jpg" alt=""><br>jQuery()返回的是jQuery类的实例，init中的this其实也是指向jQuery类的实例。<br>如果是new出来的init的话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var jQuery = function(selector, context) &#123;</div><div class="line">   return  new jQuery.prototype.init();</div><div class="line">&#125;</div><div class="line">jQuery.prototype = &#123;</div><div class="line">    init:function()&#123;</div><div class="line">    	this.age = 10</div><div class="line">        return this;</div><div class="line">    &#125;,</div><div class="line">    name:function()&#123;</div><div class="line">    	console.log(&apos;name&apos;);</div><div class="line">    &#125;,</div><div class="line">    age: 20</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行jQuery()返回如下：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/5DEC.tmp.jpg" alt=""><br>此时抛出错误，无法找到这个方法，所以显然就是new出来的init和jQuery类的this已经分离了。那么init想要访问到jQuery类原型上的属性和方法的话，实现的关键就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line">	init: function(selector, context)&#123;</div><div class="line">	//init的功能是对传进来的selector参数进行分析，进行各种不同的处理，然后生成jQuery对象</div><div class="line">	&#125;</div><div class="line">	//...</div><div class="line">&#125;</div><div class="line">jQuery.fn.init.prototype = jQuery.fn; </div><div class="line">// 通过原型传递解决，把jQuery原型传递给jQuery.prototype.init.prototype</div><div class="line">// 也就是jQuery的原型覆盖了init构造器的原型对象。</div></pre></td></tr></table></figure></p>
<p>先执行<code>jQuery.fn = jQuery.prototype</code>，再执行<code>jQuery.fn,init,prototype = jQuery.fn</code>，合并后的代码就是<code>jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype</code>。所有挂载到jQuery.fn的方法，相当于挂载到了jQuery.prototype，即挂载到了jQuery函数上，但是最后都相当于挂载到了jQuery.fn.init.prototype，相当于挂载到了一开始的jQuery函数返回的对象上，即挂载到了我们最终使用的jQuery对象上（因为我们一开始创建的jQuery对象就是jQuery函数返回的对象）。<br>此时，执行jQuery()返回如下：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/D013.tmp.jpg" alt=""><br>每个函数都<code>return this</code>的话，就可以实现链式调用了，因为调用完一个方法以后返回对象依旧可以调用该对象上的其他方法。</p>
<h3 id="jQuery插件接口"><a href="#jQuery插件接口" class="headerlink" title="jQuery插件接口"></a>jQuery插件接口</h3><p>方法jQuery.extend()和jQuery.fn.extend()常用于编写插件和处理函数的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery.extend() 对jQuery本身的属性和方法进行了扩展</div><div class="line">//比如：$.ajax()、$.getJSON()方法等</div><div class="line">jQuery.fn.extend() 对jQuery.fn(即jQuery.prototype)的属性和方法进行了扩展</div><div class="line">//比如：$(ele).addClass()、$(ele).find()方法等</div></pre></td></tr></table></figure></p>
<p>从jQuery源码中可以看到，jQuery.extend()方法和jQuery.fn.extend()方法其实是同指向同一方法的不同引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery.extend = jQuery.fn.jQuery = function () &#123;</div><div class="line">	// ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这两个方法指向同一个函数，怎么会实现不同的功能呢，这就是this的力量。jQuery.extend时，this指的是jQuery；jQuery.fn.extend时，this指的是jQuery.fn即jQuery.prototype。<br>针对fn与jQuery其实是2个不同的对象：</p>
<ul>
<li>jQuery.extend调用的时候，this是指向jQuery对象的，所以这里扩展在jQuery上。把jQuery看成一个类的话，那么jQuery.extend就是在这个类上扩展了一个方法，直接$.functionname就可以直接用类来调用这个方法，即<em>给jQuery类本身添加方法</em>。</li>
<li>jQuery.fn.extend调用的时候，this指向fn对象，而jQuery.fn和jQuery.prototype指向同一对象，扩展fn就是扩展jQuery.prototype原型对象，就是类的实例化嘛，需要$(ele).functionname先实例化一个对象再来调用方法，即<em>给jQuery对象添加方法</em>。其实fn没有什么特别的意思，就只是jQuery.prototype的引用而已。</li>
</ul>
<h3 id="jQuery-extend的合并对象功能"><a href="#jQuery-extend的合并对象功能" class="headerlink" title="jQuery.extend的合并对象功能"></a>jQuery.extend的合并对象功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jQuery.extend([deep], target, object1, [objectN])</div><div class="line">// 合并对象到第一个对象</div></pre></td></tr></table></figure>
<p>第一种合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var object1 = &#123;</div><div class="line">	apple: 0,</div><div class="line">	banana: &#123;weight: 52, price: 100&#125;,</div><div class="line">	cherry: 97</div><div class="line">&#125;;</div><div class="line">var object2 = &#123;</div><div class="line">	banana: &#123;price: 200&#125;,</div><div class="line">	orange: 100</div><div class="line">&#125;;</div><div class="line">$.extend(object1, object2);</div><div class="line">// 将object1和object2合并到object1中了</div><div class="line">// object2值不变</div></pre></td></tr></table></figure></p>
<p>第二种合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var object1 = &#123;</div><div class="line">	apple: 0,</div><div class="line">	banana: &#123;weight: 52, price: 100&#125;,</div><div class="line">	cherry: 97</div><div class="line">&#125;;</div><div class="line">var object2 = &#123;</div><div class="line">	banana: &#123;price: 200&#125;,</div><div class="line">	orange: 100</div><div class="line">&#125;;</div><div class="line">object3 = $.extend(&#123;&#125;,object1, object2);</div><div class="line">// 将object1和object2合并到object3上了</div><div class="line">// object1和object2值均不变</div></pre></td></tr></table></figure></p>
<p>第三种–深度合并<br>深度合并和非深度合并的区别是，深度合并的对象中如果复杂属性值(比如数组、函数、json对象等)，合并以后，如果再修改合子并对象的属性值，合并结果对象的值不会改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;</div><div class="line">	a: &apos;a&apos;,</div><div class="line">	b: &apos;b&apos;</div><div class="line">&#125;;</div><div class="line">var obj2 = &#123;</div><div class="line">	c: &#123;cc: &apos;cc&apos;, ccc: &apos;ccc&apos;&#125;,</div><div class="line">	d: &apos;d&apos;</div><div class="line">&#125;;</div><div class="line">$.extend(true, obj1, obj2);</div><div class="line">// 合并以后obj1和obj2都合并到obj1上了</div><div class="line">obj2.c.cc = &apos;11&apos;;</div><div class="line">//现在改变合并子对象obj2的属性值，合并后的obj1的属性值不会改变的</div><div class="line">console.log(obj2.c.cc); // 11</div><div class="line">console.log(obj1.c.cc); // cc</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HEXO搭建个人博客]]></title>
      <url>http://yy709593266.github.io/blog/2016/06/11/20160611-start/</url>
      <content type="html"><![CDATA[<p>第一次使用hexo搭建个人博客，记录下搭建全过程。 <a id="more"></a></p>
<p>1、github上新建仓库blog；</p>
<p>2、安装hexo<br>首先要安装node环境，以及git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo -g</div></pre></td></tr></table></figure></p>
<p>3、新建本地博客文件夹<br>hexo init filename<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init &apos;blog&apos;</div></pre></td></tr></table></figure></p>
<p>生成的文件夹中的source文件夹用来存放博客正文内容</p>
<blockquote>
<p>source</p>
</blockquote>
<p>4、创建新博客(文章)<br>找到source文件夹，在该文件夹下的_posts文件夹下创建博客名为start的博客<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &apos;start&apos;</div></pre></td></tr></table></figure></p>
<p>5、更换主题(可选)：<br>github上clone下nexT主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone nexT&apos;url</div></pre></td></tr></table></figure></p>
<p>注意将主题clone到theme文件夹中；</p>
<p>6、主题配置: <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br>包括：标签页，分类，关于等…</p>
<p>7、站点配置中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<p>8、发布本地博客预览<br>hexo clean<br>hexo g：generator将md文件转换成html文件<br>hexo server: 启动本地服务<br>浏览器中输入localhost:4000预览</p>
<p>9、发布远程博客配置(这是我的)<br>站点配置文件中添加配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/yy709593266/yy709593266.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>10、发布<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>11、访问个人博客网站：<a href="http://yy709593266.github.io/">http://yy709593266.github.io/</a></p>
<p>附：具体操作参考文档<a href="http://www.kancloud.cn/wizardforcel/hexo-doc/101374" target="_blank" rel="external">hexo中文文档</a></p>
<p>🙏：感谢<a href="http://jiaochunxiao.github.io/" target="_blank" rel="external">大神</a>对我的支持和帮助。棒棒哒。。。哈哈哈</p>
]]></content>
    </entry>
    
  
  
</search>
