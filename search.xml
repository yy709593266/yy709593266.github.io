<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ES6常用语法]]></title>
      <url>http://yy709593266.github.io/blog/2017/09/12/20170912-ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>ES6中let和const声明变量，变量的解构赋值。。。<br><a id="more"></a></p>
<p>1、<code>let</code><br><code>let</code>和<code>var</code>的用途差不多，也是用来声明变量的，但是具体用途还是有些不一样。ES5中只有全局作用域和函数作用域，不存在其他的块级作用域，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  let a = 10;</div><div class="line">  var b = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a // ReferenceError: a is not defined.</div><div class="line">b // 1</div></pre></td></tr></table></figure></p>
<p>所以在ES5中声明的变量都是全局变量（除了在函数中），就容易产生变量泄漏，典型的案例就是在循环中，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 10</div></pre></td></tr></table></figure></p>
<p>上面循环中，i是var声明的，是全局变量，所以i的值就是最后的值，即每次循环i的新值都会覆盖旧值，所有的i都指向同一个i所以最后都是10，而使用let声明的变量是有块级作用域的，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 6</div></pre></td></tr></table></figure></p>
<p>由于for循环中循环变量是一个父作用域，循环体是一个单独的子作用域，同时上面循环中变量i是let出来的，所以当前的i只在本轮循环中有效，不会出现新值覆盖旧值的情况（因为javascript引擎会内部会记住上一轮循环的值，初始化本轮的变量i时就是在上一轮基础上进行计算的，因此，即使每次循环变量都被重新声明了，还是能够根据上一轮的值从而计算出本轮的值）。</p>
<ul>
<li>let声明的变量<em>不会有变量提升</em>，即如果在声明之前调用变量会直接报错，而不再是报<code>undefined</code>；</li>
<li>使用let<em>重复声明变量也会报错</em>；</li>
<li><p>只要区块中存在let或者const命令，这个区块对这些命令声明的变量就形成了封闭作用域，凡是在声明之前就使用这些变量都会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">  // “暂时性死锁”</div><div class="line">  tmp = &apos;abc&apos;; // ReferenceError</div><div class="line">  console.log(tmp); // ReferenceError</div><div class="line"></div><div class="line">  let tmp; // TDZ结束</div><div class="line">  console.log(tmp); // undefined</div><div class="line"></div><div class="line">  tmp = 123;</div><div class="line">  console.log(tmp); // 123</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不能在函数内部使用let重新声明传进来的参数，否则会报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function func(arg) &#123;</div><div class="line">  let arg; </div><div class="line">  console.log(arg);</div><div class="line">&#125;</div><div class="line">func(&apos;kkk&apos;);	// 报错(使用var重新申明参数不会报错)</div><div class="line"></div><div class="line">function func(arg) &#123;</div><div class="line">  &#123;</div><div class="line">    let arg; // 不报错</div><div class="line">    console.log(arg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">func(&apos;kkk&apos;);	//undefined(此时arg是在单独的一个作用內重新申明的一个参数)</div></pre></td></tr></table></figure>
</li>
<li><p>let声明变量不再是window对象的变量，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">// 或者采用通用方法，写成this.a</div><div class="line">window.a // 1</div><div class="line"></div><div class="line">let b = 1;</div><div class="line">window.b // undefined</div></pre></td></tr></table></figure>
</li>
</ul>
<p>2、<code>const</code></p>
<ul>
<li><code>const</code>声明一个<em>只读的常量</em>，一旦声明，就不能再修改，如果强行修改就会报错。所以，在声明变量时就要立即赋值，不能留到以后再赋值，而且，如果只声明不赋值的话也会直接报错;</li>
<li>const命令声明的常量也是<em>不提升</em>，同样存在<em>暂时性死区</em>，只能在声明的位置后面使用;</li>
<li>也与let一样不可重复声明;</li>
<li>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个<em>内存地址不得改动</em>。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const foo = &#123;&#125;;</div><div class="line">foo.prop = 123;</div><div class="line">foo.prop      // 123</div><div class="line"></div><div class="line">foo = &#123;&#125;; // TypeError: &quot;foo&quot; is read-only</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里，定义foo时候，foo存储的是一个地址，这个地址指向一个对象（即一个指针，这个指针是不能再变的），不可变的是这个指针，不能再让foo指向其他地址，这样会报错，但是可以对foo指向的那个地址的对象添加属性</p>
<p>3、变量的解构赋值（从数组和对象中提取值来对变量进行赋值）</p>
<ul>
<li><p>等号两边都是数组，这种写法需要“模式匹配”，即左右两边的模式需要相同，如果解构不成功，变量值就是undefined。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">let [a, b, c] = [1, 2, 3];  //从数组中提取值对变量a，b，c进行赋值</div><div class="line"></div><div class="line">let [head, ...tail] = [1, 2, 3, 4];</div><div class="line">head // 1</div><div class="line">tail // [2, 3, 4]</div><div class="line"></div><div class="line">let [x, y, ...z] = [&apos;a&apos;];</div><div class="line">x // &quot;a&quot;</div><div class="line">y // undefined</div><div class="line">z // []</div><div class="line"></div><div class="line">let [a, [b], d] = [1, [2, 3], 4];</div><div class="line">a // 1</div><div class="line">b // 2</div><div class="line">d // 4</div></pre></td></tr></table></figure>
</li>
<li><p>解构赋值允许指定默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let [foo = true] = []; </div><div class="line">foo // true</div><div class="line">let [x, y = &apos;b&apos;] = [&apos;a&apos;, undefined]; // x=&apos;a&apos;, y=&apos;b&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：只有改成员变量的值严格等于undefined时，此时指定的默认值才会生效，就是说如果一个数组成员不严格等于undefined，此时指定的默认值不会生效，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let [x = 1] = [null];</div><div class="line">x // null(此时给x赋的值不再是undefined，因为null!==undefined的)</div></pre></td></tr></table></figure></p>
<ul>
<li>默认值可以引用解构赋值的其他变量，但该变量必须已经声明,如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let [x = 1, y = x] = [];      // x=1; y=1</div><div class="line">let [x = 1, y = x] = [2];     // x=2; y=2</div><div class="line">let [x = 1, y = x] = [1, 2];  // x=1; y=2</div><div class="line">let [x = y, y = 1] = [];      // ReferenceError</div></pre></td></tr></table></figure>
</li>
</ul>
<p>4、对象的解构赋值</p>
<ul>
<li>对象的解构赋值中，变量的取值不再由它的位置决定，变量必须与属性同名才能取到正确的值，如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123; bar, foo &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</div><div class="line">foo // &quot;aaa&quot;</div><div class="line">bar // &quot;bbb&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面的例子其实是下面这个例子的简写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123; bar: bar, foo: foo &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</div><div class="line">foo // &quot;aaa&quot;</div><div class="line">bar // &quot;bbb&quot;</div></pre></td></tr></table></figure></p>
<p>所以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let &#123; foo: baz &#125; = &#123; foo: &apos;aaa&apos;, bar: &apos;bbb&apos; &#125;;</div><div class="line">baz // &quot;aaa&quot;</div></pre></td></tr></table></figure></p>
<p>下面是另外一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const node = &#123;</div><div class="line">  loc: &#123;</div><div class="line">    start: &#123;</div><div class="line">      line: 1,</div><div class="line">      column: 5</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let &#123; loc, loc: &#123; start &#125;, loc: &#123; start: &#123; line &#125;&#125; &#125; = node;</div><div class="line">line // 1</div><div class="line">loc  // Object &#123;start: Object&#125;</div><div class="line">start // Object &#123;line: 1, column: 5&#125;</div></pre></td></tr></table></figure></p>
<p>这里要注意的是：最后一次对line属性的解构赋值之中，只有line是变量，loc和start都是模式，不再是变量了。<br>对象的解构也可以指定默认值，条件也是对象的属性值严格等于undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var &#123;x = 3&#125; = &#123;x: undefined&#125;;</div><div class="line">x // 3</div><div class="line"></div><div class="line">var &#123;x = 3&#125; = &#123;x: null&#125;;</div><div class="line">x // null</div></pre></td></tr></table></figure></p>
<ul>
<li><p>如果解构失败，变量的值等于undefined</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let &#123;foo&#125; = &#123;bar: &apos;baz&apos;&#125;;</div><div class="line">foo // undefined</div></pre></td></tr></table></figure>
</li>
<li><p>以上的解构都是在声明变量的时候对变量进行解构赋值，如果对已经声明过的变量进行解析赋值，要注意：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 错误的写法</div><div class="line">let x;</div><div class="line">&#123;x&#125; = &#123;x: 1&#125;;</div><div class="line">// SyntaxError: syntax error</div><div class="line"></div><div class="line">// 正确的写法</div><div class="line">let x;</div><div class="line">(&#123;x&#125; = &#123;x: 1&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>因为JavaScript引擎会将<code>{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免JavaScript将其解释为代码块，才能解决这个问题。</p>
<ul>
<li><p>对象的解构赋值还有一个很方便的功能，就是可以和方便的将现有的对象的方法赋值到某个变量，下面的语句就将Math对象的<code>log</code>，<code>sin</code>，<code>cos</code>方法赋值给了相应的三个变量:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let &#123; log, sin, cos &#125; = Math;</div></pre></td></tr></table></figure>
</li>
<li><p>由于数组本质上就是特殊的对象，因此可以对数组进行对象属性的解构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 2, 3];</div><div class="line">let &#123;0 : first, [arr.length - 1] : last&#125; = arr;</div><div class="line">first // 1</div><div class="line">last // 3</div></pre></td></tr></table></figure>
</li>
</ul>
<p>5、字符串的解构赋值<br>对字符串进行解构赋值时，字符串被转换成了一个类似数组的对象，由于类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性进行赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const [a, b, c, d, e] = &apos;hello&apos;;</div><div class="line">a // &quot;h&quot;</div><div class="line">b // &quot;e&quot;</div><div class="line">c // &quot;l&quot;</div><div class="line">d // &quot;l&quot;</div><div class="line">e // &quot;o&quot;</div><div class="line"></div><div class="line">let &#123;length : len&#125; = &apos;hello&apos;;</div><div class="line">len // 5</div></pre></td></tr></table></figure></p>
<p>6、函数参数的解构赋值</p>
<ul>
<li>首先看一个简单的例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function add([x, y])&#123;</div><div class="line">  return x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add([1, 2]); // 3</div></pre></td></tr></table></figure>
</li>
</ul>
<p>下面是另一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[[1, 2], [3, 4]].map(([a, b]) =&gt; a + b);</div><div class="line">// [ 3, 7 ]</div></pre></td></tr></table></figure></p>
<ul>
<li>函数参数的解构也可以使用默认值<br>下面看两个不同形式的默认值参数的解构赋值：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function move(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123;</div><div class="line">  return [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, 0]</div><div class="line">move(&#123;&#125;); // [0, 0]</div><div class="line">move(); // [0, 0]</div><div class="line"></div><div class="line"></div><div class="line">function move(&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123;</div><div class="line">  return [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, undefined]</div><div class="line">move(&#123;&#125;); // [undefined, undefined]</div><div class="line">move(); // [0, 0]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>第一种是对变量x和y进行解构，解构失败就等于默认值0，如果不传参也有默认参数都为0<br>第二种是函数参数指定默认值，如果不传参当然就是undefined</p>
<p><em>总的来说，解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象（由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错）。</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些后知后觉的笔面试题]]></title>
      <url>http://yy709593266.github.io/blog/2016/11/19/20161119-%E7%AC%94%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>找工作的日子是难熬的，找完工作的日子是无聊的，难得无聊的日子也不能自我放弃喽，趁着这个悠（wu）闲（liao）的日子里，把那些月子里锻（zhe）炼（mo）我的笔试和面试遇题做一个集锦，以备不时之需（😂😂）<a id="more"></a></p>
<p>1、给定几个数，写出一个方法，将这几个数拼接出最大整数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function MaxNum(arr)&#123;</div><div class="line">	arr = arr.sort();</div><div class="line">	var len = arr.length;</div><div class="line">	var result = &quot;&quot;;</div><div class="line">	for(var i = len - 1; i &gt;= 0; i--) &#123;</div><div class="line">		result += arr[i];</div><div class="line">	&#125;</div><div class="line">	return parseInt(result);</div><div class="line">&#125;</div><div class="line">var arr = [1, 13, 5];</div><div class="line">console.log(MaxNum(arr));		//5131</div></pre></td></tr></table></figure></p>
<p><code>arrayObject.sort(sortby)</code>方法会调用每个数组项的<code>toString()</code>转型方法，然后比较得到的字符串，以确定顺序。参数可选，在没有使用参数的时候，按照字符串编码的顺序进行排序；如果想按照其它标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字，比较函数应该具有两个参数a和b，其返回值如下，若a小于b，在排序后的数组中a应该出现在b之前，则返回一个小于0的值，若a等于b，则返回0，若a大于b，则返回一个大于0的值，sort根据这个函数返回的结构对这个数组进行冒泡排序(即，根据返回－1的那个条件来排序)，假如我们想要降序排序这个数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 13, 5];</div><div class="line">function compare(a, b)&#123;</div><div class="line">	if(a &lt; b) &#123;</div><div class="line">		return -1;</div><div class="line">	&#125;else if(a &gt; b) &#123;</div><div class="line">		return 1;</div><div class="line">	&#125;else &#123;</div><div class="line">		return 0;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">arr.sort(compare);</div><div class="line">console.log(arr);		//[1, 5, 13]</div></pre></td></tr></table></figure></p>
<p>2、我太懒了。。。待续</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从psd photo到css style]]></title>
      <url>http://yy709593266.github.io/blog/2016/09/04/20160904(psd-css)/</url>
      <content type="html"><![CDATA[<p>如何将视觉美眉给的psd图用CSS样式表示出来对于前端工作人员来说是一个很重要的问题，特别是细节，比如颜色、阴影效果等。因为对photoshop本来就不是很熟，所以对平时自己慢慢积累用到的一些关于photoshop的技巧和方法实时记下来，以免回头一顿火锅的时间就给忘了（此时在北京实习的日子很是想念火锅，重庆火锅！对！我很爱吃火锅！！！）。<a id="more"></a></p>
<h3 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ul>
<li>工具栏自动选择图层选中</li>
<li>窗口中打开图层工具条</li>
<li>选中想要切的图，点击后图层工具栏中会自动选中该图层</li>
<li>图层工具栏中在选中的图层上右击－&gt;转换成智能对象</li>
<li>图层工具栏中双击已被转换成智能对象的图层前面的图标</li>
<li>弹出的窗口点击确定（现在就自动新建了一个画布将你要切的图复制过去了）</li>
<li>新建的画布中存储刚切出来的图并保存为web存储格式即可<br>注意⚠️：如果想要切的图是几个图层的话就可以按住<code>Ctrl</code>键，同时选中后再一起转换成智能对象，后面的步骤都相同。<br>🙏：感谢叶师傅</li>
</ul>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>如果想要的图是100＊100的，而psd给的该图标的大小只有80＊70，为了得到想要的大小的图100＊100，可以给图指定一个大小（100＊100）再切，这样切出来的图不会失真而且大小还是自己想要的（给多余的宽高背景都透明）。</p>
<ul>
<li>工具栏自动选中图层选中</li>
<li>窗口中打开图层工具栏</li>
<li>选中想要切的图，点击后图层工具栏中会自动选中该图层</li>
<li>按住<code>Alt</code>键同时点击图层窗口中选中图层前面的小眼睛（以此来隐藏其它图层）</li>
<li>选中选框工具，并在上面工具栏中样式选中固定大小（或者固定比例），输入宽高值，得到自定义选框</li>
<li>点击psd图移动选框位置使得想要切的图在选框居中位置（大概居中，还没发现一个绝对居中的方法）</li>
<li>点击裁切工具确定裁切并保存为web存储格式即可<br>注意⚠️：裁切完以后一定要到历史工具栏中恢复一下，不然整张图就没切成这么一点了，原图就没啦。</li>
</ul>
<h3 id="获取阴影效果"><a href="#获取阴影效果" class="headerlink" title="获取阴影效果"></a>获取阴影效果</h3><p>有时候视觉美眉给的一张psd图有些部分会是阴影效果，这时候写CSS样式时，需要根据psd给定的阴影效果写参数：</p>
<ul>
<li>选中阴影元素</li>
<li>图层工具栏中双击该图层（双击空白处）</li>
<li>出现一个弹窗，里面有该阴影的信息，现在根据这些信息就能计算出CSS样式中box－shadow的值了<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160907-1.jpg" alt=""><br>已知box－shadow值有五个参数，根据以上信息计算出五个参数具体值：<br>参数1: 距离＊cos(180-角度)px;<br>参数2: 距离＊sin(180-角度)px;<br>参数3: (大小－参数4)px;<br>参数4: 大小＊扩展(0%-100%)px;<br>参数5: rgba()(点击混合后面一个颜色区域可以获取rgb值，a不透明度)。<br>这种图给出的值计算出来的box－shadow参数值就是：<br>参数1: 20＊cos(90) = 0px;<br>参数2: 20＊sin(90) = 20px;<br>参数3: 25-0 ＝ 25px;<br>参数4: 25＊0% ＝ 0px;<br>参数5: rgba(113, 135, 169, .25)。<br>即<code>box-shadow: 0px 20px 25px 0px rgba(113, 135, 169, .25)</code>。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript继承]]></title>
      <url>http://yy709593266.github.io/blog/2016/08/29/20160829(javascript%E7%BB%A7%E6%89%BF)/</url>
      <content type="html"><![CDATA[<p>javascript在ES6之前，我们通过构造函数来创造一个类，并且通过原型来扩展属性，然后可以这样实现继承，这里主要说明这种继承方式各个构造函数原型之间的关系，顺便聊聊如何通过ES6实现继承。<a id="more"></a></p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Person(name, age, sex)&#123;</div><div class="line">	this.name = name;</div><div class="line">	this.age = age;</div><div class="line">	this.sex = sex;</div><div class="line">&#125;</div><div class="line">Person.prototype.personLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);</div><div class="line">console.log(person1);</div></pre></td></tr></table></figure>
<p>实例化一个Person命名为person1：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-1.jpg" alt=""><br>一个对象A的<code>_proto_</code>属性指向的那个对象B就是它的原型对象（或者叫上级对象，父对象）。</p>
<h3 id="继承－1"><a href="#继承－1" class="headerlink" title="继承－1"></a>继承－1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function Person(name, age, gender) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.age = age;</div><div class="line">	this.gender = gender;</div><div class="line">&#125;</div><div class="line">Person.prototype.personLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Personal(name, age, gender, occupation, hobby) &#123;</div><div class="line">	Person.call(this, name, age, gender);</div><div class="line">	this.occupation = occupation;</div><div class="line">	this.hobby = hobby;</div><div class="line">&#125;</div><div class="line">Personal.prototype = Object.create(Person.prototype);</div><div class="line">// Personal.prototype.constructor = Personal;		//显示声明Personal类的constructor</div><div class="line">Personal.prototype.personalLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);</div><div class="line">console.log(person1);</div><div class="line">let personal1 = new Personal(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;);</div><div class="line">console.log(personal1);</div></pre></td></tr></table></figure>
<p>实例化一个Personal命名为personal1:<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-2.jpg" alt=""><br><code>Object.create()</code>是一种新的对象创建方式，第一个参数必需，要用作原型的对象，第二个参数可选，包含一个或多个属性描述符的javascript对象。</p>
<h3 id="继承－2"><a href="#继承－2" class="headerlink" title="继承－2"></a>继承－2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">function Person(name, age, gender) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.age = age;</div><div class="line">	this.gender = gender;</div><div class="line">&#125;</div><div class="line">Person.prototype.personLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Personal(name, age, gender, occupation, hobby)&#123;</div><div class="line">	Person.call(this, name, age, gender);</div><div class="line">	this.occupation = occupation;</div><div class="line">	this.hobby = hobby;</div><div class="line">&#125;</div><div class="line">Personal.prototype = Object.create(Person.prototype);</div><div class="line">Personal.prototype.constructor = Personal;</div><div class="line">Personal.prototype.personalLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Biology(name, age, gender, occupation, hobby) &#123;</div><div class="line">	Personal.call(this, name, age, gender, occupation, hobby);</div><div class="line">&#125;</div><div class="line">Biology.prototype = Object.create(Personal.prototype);</div><div class="line">Biology.prototype.constructor = Biology;</div><div class="line">Biology.prototype.biologyLogAge = function()&#123;</div><div class="line">	console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;xiao&apos;, 20, &apos;male&apos;);</div><div class="line">console.log(person1);</div><div class="line"></div><div class="line">let personal1 = new Personal(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;);</div><div class="line">console.log(personal1);</div><div class="line"></div><div class="line">let biology = new Biology(&apos;yuan&apos;, 17, &apos;female&apos;, &apos;web&apos;, &apos;travel&apos;)</div><div class="line">console.log(biology1);</div></pre></td></tr></table></figure>
<p>实例化一个Biology命名为biology1：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-3.jpg" alt=""><br>以此类推实现继承。</p>
<h3 id="ES6类"><a href="#ES6类" class="headerlink" title="ES6类"></a>ES6类</h3><p>ES6中出现了类的概念，ES6提供了更多的语法躺，可以直接创造一个类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">	constructor(name, age, sex) &#123;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">		this.sex = sex;</div><div class="line">	&#125;</div><div class="line">	personLogAge()&#123;</div><div class="line">		console.log(this.age);</div><div class="line">	&#125;</div><div class="line">	personLogName()&#123;</div><div class="line">		console.log(this.name);</div><div class="line">	&#125;</div><div class="line">	personLogSex()&#123;</div><div class="line">		console.log(this.sex);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;yuan&apos;, 17, &apos;female&apos;);</div><div class="line">console.log(person1);</div></pre></td></tr></table></figure></p>
<p>通过ES6方法定义一个类，实例化一个Person命名为person1：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-4.jpg" alt=""><br>ES6方法写的类内部所有定义的方法都是不可枚举的（non－enumberable），这也就是为什么实例只能看到它的属性值，使用<code>Object.keys(person1)</code>可以看到可以枚举的属性只有<code>[&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;]</code>，这一点和ES5行为不一致。</p>
<h3 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">	constructor(name, age, sex) &#123;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">		this.sex = sex;</div><div class="line">	&#125;</div><div class="line">	personLogAge()&#123;</div><div class="line">		console.log(this.age);</div><div class="line">	&#125;</div><div class="line">	personLogName()&#123;</div><div class="line">		console.log(this.name);</div><div class="line">	&#125;</div><div class="line">	personLogSex()&#123;</div><div class="line">		console.log(this.sex);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Personal extends Person &#123;</div><div class="line">	constructor(name, age, sex, occupation, hobby) &#123;</div><div class="line">		super(name, age, sex);</div><div class="line">		this.occupation = occupation;</div><div class="line">		this.hobby = hobby;</div><div class="line">	&#125;</div><div class="line">	personalLogAge()&#123;</div><div class="line">		console.log(this.age);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let person1 = new Person(&apos;yuan&apos;, 17, &apos;female&apos;);</div><div class="line">console.log(person1);</div><div class="line">let personal1 = new Personal(&apos;xiao&apos;, 21, &apos;male&apos;, &apos;web&apos;, &apos;coding&apos;);</div><div class="line">console.log(personal1);</div></pre></td></tr></table></figure>
<p>Personal类继承了Person类，实例化一个Personal命名为personal1:<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/20160829-5.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IE9-jQuery-ajax]]></title>
      <url>http://yy709593266.github.io/blog/2016/08/03/20160803(IE9-jQuery-ajax)/</url>
      <content type="html"><![CDATA[<p>最近项目中使用jQuery的ajax发送跨域请求获取数据时，在IE9中请求未发送出去，最后找到大神解决了<a id="more"></a></p>
<h3 id="一般的请求"><a href="#一般的请求" class="headerlink" title="一般的请求"></a>一般的请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">	type: &apos;GET&apos;,</div><div class="line">	crossDomain: true,</div><div class="line">	success: function(msg)&#123;</div><div class="line">		//do something with your recieved message</div><div class="line">	&#125;,</div><div class="line">	error: function()&#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="兼容IE9的请求"><a href="#兼容IE9的请求" class="headerlink" title="兼容IE9的请求"></a>兼容IE9的请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">if(window.XDomainRequest)&#123;</div><div class="line">	var xdr = new XDomainRequest();</div><div class="line">	var query = yourUrl;</div><div class="line">	if(xdr) &#123;</div><div class="line">		xdr.onload = function()&#123;</div><div class="line">			var msg = JSON.parse(xdr.responseText);</div><div class="line">			// do something with your recieved message</div><div class="line">		&#125;;</div><div class="line">		xdr.onerror = function()&#123;&#125;;</div><div class="line">		xdr.open(&apos;GET&apos;, query);</div><div class="line">		xdr.send();</div><div class="line">	&#125;</div><div class="line">&#125;else &#123;</div><div class="line">	$.ajax(&#123;</div><div class="line">		type: &apos;GET&apos;,</div><div class="line">		url: yourUrl,</div><div class="line">		crossDomain: true,</div><div class="line">		success: function(msg)&#123;</div><div class="line">			//do something with your recieved message</div><div class="line">		&#125;,</div><div class="line">		error: function()&#123;&#125;	</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>🙏：感谢阔阔师傅</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ajaxFileUpload插件上传图片]]></title>
      <url>http://yy709593266.github.io/blog/2016/07/26/20160726(ajaxFileUpload%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0)/</url>
      <content type="html"><![CDATA[<p>最近在项目中遇到一个照片上传的需求，用到了ajaxFileUpload的jQuery插件，中间遇到很多问题，不是缺少函数定义就是出现只能上传一次的问题，在这里对ajaxFileUpload插件使用中的问题做个总结。<a id="more"></a></p>
<h3 id="插件引入"><a href="#插件引入" class="headerlink" title="插件引入"></a>插件引入</h3><p>因为ajaxFileUpload插件是基于jQuery的插件，所以引入这个插件之前需要先引入jQuery插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;ajaxFileUpload.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="问题一-handleError"><a href="#问题一-handleError" class="headerlink" title="问题一:handleError"></a>问题一:handleError</h3><p>input标签提供一个直接上传文件的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line">&lt;input name=&quot;file&quot; id=&quot;upload&quot; type=&quot;file&quot;&gt;</div><div class="line"></div><div class="line">//js</div><div class="line">$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123;</div><div class="line">	$.ajaxFileUpload(&#123;</div><div class="line">		url: &apos;xxx/xxx/xxx&apos;,	//请求地址</div><div class="line">		type: &apos;post&apos;,		//请求方式</div><div class="line">		secureuri: false,	//是否启用安全提交，默认false</div><div class="line">		fileElementId: &apos;upload&apos;,//上传input的id</div><div class="line">		success: function(data, status)&#123;</div><div class="line">			console.log(data);</div><div class="line">		&#125;,</div><div class="line">		error: function(data, status, e)&#123;</div><div class="line">			console.log(data.msg);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里选中图片确定以后触发input的onchange事件，此时发送请求将图片信息传给后台并获取后台返回数据，这里后台会给每次提交的图片返回一个特定的id，提交时候就将这个id提交给后台将图片保存起来，以后要访问图片就将src指定这张图片地址就行了。如果点击选中图片后再删除这张图片，那么虽然这张图片点击选中时后台返回了一个指定id，但是在提交表单的时候这张图片的id是不需要传给后台的，因为用户可能手抖点错了照片，不需要保存这张先选中后来被删除的照片的地址的(有点绕)。<br>第一个问题就是，提示<code>handleError is not a function</code>，根据网上搜到的解决办法，就是复制一份这个函数到ajaxFileUpload函数中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">handleError: function(s, xhr, status, e)&#123;</div><div class="line">	// If a local callback was specified, file it</div><div class="line">	if(s.error)&#123;</div><div class="line">		s.error.call(s.context || s, xhr, status, e);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//File the global callback</div><div class="line">	if(s.global)&#123;</div><div class="line">		(s.context ? jQuery(s.context) : jQuery.event).trigger(&quot;ajaxError&quot;, [xhr, s, e]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里有一份已经添加完handleError函数的<a href="http://pan.baidu.com/s/1mhBW0S4" target="_blank" rel="external">ajaxFileUpload</a>文件，好了，这样就不会报<code>handleError is not a function</code>的错了。</p>
<h3 id="问题二：data"><a href="#问题二：data" class="headerlink" title="问题二：data"></a>问题二：data</h3><p>请求success时候返回的数据data应该就是后台返回的我们需要的值了，但是直接console.log出来发现，又有问题了，数据被一层不知道哪儿来的标签包住了，这里我们需要对接收到的data进行一次处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//js</div><div class="line">$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123;</div><div class="line">	$.ajaxFileUpload(&#123;</div><div class="line">		url: &apos;xxx/xx/xx&apos;,</div><div class="line">		type: &apos;post&apos;,</div><div class="line">		secureuri: false,</div><div class="line">		fileElementId: &apos;upload&apos;,</div><div class="line">		success: function(data, status)&#123;</div><div class="line">			var str = $(data).find(&quot;body&quot;).text();		//获取返回的字符串</div><div class="line">			var json = $.parseJSON(str);				//把字符串转化成json对象</div><div class="line">			console.log(json);							//我们需要的数据</div><div class="line">		&#125;,</div><div class="line">		error: function(data, status, e)&#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>虽然我也不造具体什么原因，反正这样写就没得问题啦，先解决燃眉之急，再追究其所以然。</p>
<h3 id="问题三：onchange"><a href="#问题三：onchange" class="headerlink" title="问题三：onchange"></a>问题三：onchange</h3><p>上面问题都解决以后可以上传图片并获得图片id了，但是只能上传一张图片，再点击上传一张就不行了，网上查了资料说是ajaxFileUpload插件，它会把原来的file元素替换成新的file元素，所以之前绑定在旧的input上的change事件就失效了，需要重新绑定一次，试了一下果然有效，不过代码需要重新编排一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$(&apos;#upload&apos;).on(&apos;change&apos;, upload);</div><div class="line"></div><div class="line">function upload()&#123;</div><div class="line">	if(true)&#123;</div><div class="line">		//根据需求相关操作</div><div class="line">		ajaxFileUpload();</div><div class="line">	&#125;else if(ddd)&#123;</div><div class="line"></div><div class="line">	&#125;else &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function ajaxFileUpload()&#123;</div><div class="line">	$.ajaxFileUpload(&#123;</div><div class="line">		url: &apos;xxx/xx/xx&apos;,</div><div class="line">		type: &apos;post&apos;,</div><div class="line">		secureuri: false,</div><div class="line">		fileElementId: &apos;upload&apos;,</div><div class="line">		success: function(data, status)&#123;</div><div class="line">			var str = $(data).find(&quot;body&quot;).text();</div><div class="line">			var json = $.parseJSON(str);</div><div class="line">			// idList是需要提交给后台的用来放置图片id的数组</div><div class="line">			idList.push(json.result[0].id);</div><div class="line">		&#125;,</div><div class="line">		complete: function(xmlHttpRequest)&#123;</div><div class="line">			$(&quot;#upload&quot;).replaceWith(&apos;&lt;input type=&quot;file&quot; id=&quot;upload&quot; name=&quot;file&quot; class=&quot;hidden&quot;&gt;&apos;);</div><div class="line">			$(&quot;#upload&quot;).on(&quot;change&quot;, upload);</div><div class="line">		&#125;,</div><div class="line">		error: function(data, status, e)&#123;</div><div class="line">			//error</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，照片上传没问题了，再把需要提交的表单数据提交给后台就👌了。</p>
<h3 id="获取图片大小"><a href="#获取图片大小" class="headerlink" title="获取图片大小"></a>获取图片大小</h3><p>上传图片往往需要对用户上传图片大小进行限制，这里插入一段上传图片点击确定获取图片大小的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;获取图片大小&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot; onchange=&quot;getSize()&quot;&gt;</div><div class="line"></div><div class="line">	&lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		var size = 0;</div><div class="line">		function getSize()&#123;</div><div class="line">			//js原生方法</div><div class="line">			var file = document.getElementById(&quot;upload&quot;);</div><div class="line">			size = file.files[0].size;</div><div class="line">			var mSize = (size/1048576).toFixed(2);	//单位是兆M</div><div class="line">			console.log(mSize);</div><div class="line"></div><div class="line">			//jQuery方法</div><div class="line">			//size = $(&quot;#upload&quot;)[0].files[0].size;</div><div class="line">			//var mSize = (size/1048576).toFixed(2);</div><div class="line">			//console.log(mSize);</div><div class="line">		&#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="类型为file的input的样式"><a href="#类型为file的input的样式" class="headerlink" title="类型为file的input的样式"></a>类型为file的input的样式</h3><p>这里既然说到这个type值是file的input标签，就来说下如何修改这种input的样式，一般默认的样式是很难看的，直接给input添加class样式修改又不起作用，所以就需要一点技巧。</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>先把input按钮的透明度opacity设置为0，然后用a标签包裹该input，实现美化效果，这样美化后input的使用还是不变的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;file input&lt;/title&gt;</div><div class="line">	&lt;style&gt;</div><div class="line">		.upload-a&#123;</div><div class="line">			padding: 4px 10px;</div><div class="line">			height: 20px;</div><div class="line">			line-height: 20px;</div><div class="line">			position: relative;</div><div class="line">			cursor: pointer;</div><div class="line">			color: #888;</div><div class="line">			background-color: #fafafa;</div><div class="line">			border: 1px solid #ddd;</div><div class="line">			border-radius: 4px;</div><div class="line">			overflow: hidden;</div><div class="line">			display: inline-block;</div><div class="line">			text-decoration: none;</div><div class="line">		&#125;</div><div class="line">		.upload-a input &#123;</div><div class="line">			opacity: 0;</div><div class="line">			position: absolute;</div><div class="line">			font-size: 100px;</div><div class="line">			right: 0;</div><div class="line">			top: 0;</div><div class="line">			cursor: pointer;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;a href=&quot;javascript:;&quot; class=&quot;upload-a&quot;&gt;</div><div class="line">		&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot;&gt;点击这里上传文件</div><div class="line">	&lt;/a&gt;</div><div class="line">	&lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123;</div><div class="line">			//选择成功以后执行的事件</div><div class="line">		&#125;);</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>这个方法<code>a</code>标签和<code>input</code>标签是同级的，只不过将<code>input</code>的<code>display</code>值设置了<code>none</code>，点击<code>a</code>标签的时候就触发<code>input</code>的<code>click</code>事件，再执行后面的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;file input&lt;/title&gt;</div><div class="line">	&lt;style&gt;</div><div class="line">		.upload &#123;</div><div class="line">			padding: 4px 10px;</div><div class="line">			height: 20px;</div><div class="line">			line-height: 20px;</div><div class="line">			position: relative;</div><div class="line">			cursor: pointer;</div><div class="line">			color: #888;</div><div class="line">			background-color: #fafafa;</div><div class="line">			border: 1px solid #ddd;</div><div class="line">			border-radius: 4px;</div><div class="line">			overflow: hidden;</div><div class="line">			display: inline-block;</div><div class="line">			text-decoration: none;</div><div class="line">		&#125;</div><div class="line">		.hidden &#123;</div><div class="line">			display: none;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;a class=&quot;upload&quot;&gt;点击这里上传文件&lt;/a&gt;</div><div class="line">	&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload&quot; class=&quot;hidden&quot;&gt;</div><div class="line">	&lt;script src=&quot;js/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		$(&apos;.upload&apos;).on(&apos;click&apos;, function()&#123;</div><div class="line">			$(&apos;#upload&apos;).click();</div><div class="line">		&#125;);</div><div class="line">		$(&apos;#upload&apos;).on(&apos;change&apos;, function()&#123;</div><div class="line">			//选择成功以后执行的事件</div><div class="line">		&#125;);</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>第二种方法需要注意⚠️一个问题，这里的<code>$(&#39;#upload&#39;)</code>的<code>change</code>事件需要放在<code>$(&#39;.upload&#39;)</code>的<code>click</code>事件的外面。如果放在里面的话，那么每次触发click事件就会注册一个change事件监听器，这样的话，第一次点击上传会上传一张，第二次点击上传会上传两张（因为，第二次click以后就会注册两个change事件监听器），以此类推，每次点击都会增加一个监听器。<br>🙏：感谢纪师傅</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello Vue!]]></title>
      <url>http://yy709593266.github.io/blog/2016/07/08/20160708(helloVue)/</url>
      <content type="html"><![CDATA[<p>其实看<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">vue的教程</a>我们知道，可以像使用jQuery一样来使用vue.js，即直接使用<code>&lt;script&gt;&lt;/script&gt;</code>标签加载进去就可以使用它了，这里主要讲的是使用npm安装vue的时候我遇到一些问题 <a id="more"></a></p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1、首先保证你已经安装了node和npm<br>2、打开Git，映射npm到cnpm<br><code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>(Mac下影射命令为<code>$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</code>)<br>3、安装vue-cli<br><code>$ cnpm i -g vue-cli</code><br>(Mac下命令为<code>$ sudo cnpm i -g vue-cli</code>)<br>4、<code>cd</code>到一个你放置项目的文件夹，创建webpack项目并且下载依赖<br><code>$ vue init webpack hellovue</code><br>出现的选项可以直接点击enter跳过<br>5、定位到项目中<br><code>$ cd hellovue</code><br>6、安装依赖模块<br><code>$ cnpm i</code><br>7、运行应用<br><code>$ cnpm run dev</code><br>现在可以在<code>localhost:8080</code>上查看我们的应用了。<br>注：如果这时候需要使用npm安装其他的库，比如路由和XHR库的话，需要重新打开一个Git窗口</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我运行的时候出现的是空白页，而且控制台报错了，说<code>main.js</code>文件中的import错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import App from &apos;./App&apos;</div></pre></td></tr></table></figure></p>
<p>这里我们需要使用require加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var Vue = require(&apos;vue&apos;);</div><div class="line">var App = require(&apos;./App.vue&apos;);</div></pre></td></tr></table></figure></p>
<p>这样就能正常运行第一个vue程序Hello World!了。<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/23BF.tmp.jpg" alt=""><br>后面就在里面添加内容或者文件就行了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从插件开发了解jQuery源码]]></title>
      <url>http://yy709593266.github.io/blog/2016/06/23/20160623(jQuery-%E6%8F%92%E4%BB%B6)/</url>
      <content type="html"><![CDATA[<p>想要开发jQuery插件，首先必须了解并熟悉jQuery源码，了解它的整体架构以及方法的实现，这里主要对jQuery插件开发相关的方法并加上自己的理解来进行阐述jQuery源码相关知识，从而让你找到适合自己的方法去理解和开发一个jQuery插件。<a id="more"></a></p>
<h3 id="jQuery的总体架构"><a href="#jQuery的总体架构" class="headerlink" title="jQuery的总体架构"></a>jQuery的总体架构</h3><p>打开jQuery的源码，会发现这样的代码结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function (window, undefined) &#123;</div><div class="line">	// jquery code</div><div class="line">&#125;)(window)</div></pre></td></tr></table></figure></p>
<p>通过定义一个自调用的匿名函数，创建一个私有空间，该私有空间的变量和方法，不会破坏全局的命名空间。jQuery被应用在成千上万的JavaScript程序中，必须确保jQuery创建的变量不能和导入它的程序所使用的变量发生冲突。既然作用范围在这个匿名函数中，怎么被别人使用呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.jQuery = window.$ = jQuery</div></pre></td></tr></table></figure></p>
<p>这里让jQuery库中最重要的jQuery对象成为了window对象的一个属性，这样就可以在其他地方像使用window.document来使用jQuery对象了，而$是jQuery的同名对象</p>
<h3 id="构造jQuery对象"><a href="#构造jQuery对象" class="headerlink" title="构造jQuery对象"></a>构造jQuery对象</h3><p>jQuery对象不是通过new jQuery创建的，而是通过new jQuery.fn.init创建的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var jQuery = function(selector, context)&#123;</div><div class="line">	return new jQuery.fn.init(selector, context);</div><div class="line">&#125;</div><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line">	init: function(selector, context)&#123;</div><div class="line">	//init的功能是对传进来的selector参数进行分析，进行各种不同的处理，然后生成jQuery对象</div><div class="line">	&#125;</div><div class="line">	//...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jQuery对象就是jQuery.fn.init对象，这样构造jQuery对象的方法，如果执行new jQuery()生成的jQuery对象会被抛弃，最后返回jQuery.fn.init对象，因此可以直接调用jQuery(selector, context)，没有必要使用new关键字。<br>关于new出来的init和直接return的init有什么区别呢？<br>如果是直接return的init的话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var jQuery = function(selector, context) &#123;</div><div class="line">   return  jQuery.prototype.init();</div><div class="line">&#125;</div><div class="line">jQuery.prototype = &#123;</div><div class="line">    init:function()&#123;</div><div class="line">    	this.age = 10;</div><div class="line">        return this;</div><div class="line">    &#125;,</div><div class="line">    name:function()&#123;</div><div class="line">    	console.log(&apos;name&apos;);</div><div class="line">    &#125;,</div><div class="line">    age: 20</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当执行jQuery()返回如下:<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/7A11.tmp.jpg" alt=""><br>jQuery()返回的是jQuery类的实例，init中的this其实也是指向jQuery类的实例。<br>如果是new出来的init的话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var jQuery = function(selector, context) &#123;</div><div class="line">   return  new jQuery.prototype.init();</div><div class="line">&#125;</div><div class="line">jQuery.prototype = &#123;</div><div class="line">    init:function()&#123;</div><div class="line">    	this.age = 10</div><div class="line">        return this;</div><div class="line">    &#125;,</div><div class="line">    name:function()&#123;</div><div class="line">    	console.log(&apos;name&apos;);</div><div class="line">    &#125;,</div><div class="line">    age: 20</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行jQuery()返回如下：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/5DEC.tmp.jpg" alt=""><br>此时抛出错误，无法找到这个方法，所以显然就是new出来的init和jQuery类的this已经分离了。那么init想要访问到jQuery类原型上的属性和方法的话，实现的关键就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line">	init: function(selector, context)&#123;</div><div class="line">	//init的功能是对传进来的selector参数进行分析，进行各种不同的处理，然后生成jQuery对象</div><div class="line">	&#125;</div><div class="line">	//...</div><div class="line">&#125;</div><div class="line">jQuery.fn.init.prototype = jQuery.fn; </div><div class="line">// 通过原型传递解决，把jQuery原型传递给jQuery.prototype.init.prototype</div><div class="line">// 也就是jQuery的原型覆盖了init构造器的原型对象。</div></pre></td></tr></table></figure></p>
<p>先执行<code>jQuery.fn = jQuery.prototype</code>，再执行<code>jQuery.fn,init,prototype = jQuery.fn</code>，合并后的代码就是<code>jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype</code>。所有挂载到jQuery.fn的方法，相当于挂载到了jQuery.prototype，即挂载到了jQuery函数上，但是最后都相当于挂载到了jQuery.fn.init.prototype，相当于挂载到了一开始的jQuery函数返回的对象上，即挂载到了我们最终使用的jQuery对象上（因为我们一开始创建的jQuery对象就是jQuery函数返回的对象）。<br>此时，执行jQuery()返回如下：<br><img src="http://7xvmm0.com1.z0.glb.clouddn.com/D013.tmp.jpg" alt=""><br>每个函数都<code>return this</code>的话，就可以实现链式调用了，因为调用完一个方法以后返回对象依旧可以调用该对象上的其他方法。</p>
<h3 id="jQuery插件接口"><a href="#jQuery插件接口" class="headerlink" title="jQuery插件接口"></a>jQuery插件接口</h3><p>方法jQuery.extend()和jQuery.fn.extend()常用于编写插件和处理函数的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery.extend() 对jQuery本身的属性和方法进行了扩展</div><div class="line">//比如：$.ajax()、$.getJSON()方法等</div><div class="line">jQuery.fn.extend() 对jQuery.fn(即jQuery.prototype)的属性和方法进行了扩展</div><div class="line">//比如：$(ele).addClass()、$(ele).find()方法等</div></pre></td></tr></table></figure></p>
<p>从jQuery源码中可以看到，jQuery.extend()方法和jQuery.fn.extend()方法其实是同指向同一方法的不同引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery.extend = jQuery.fn.jQuery = function () &#123;</div><div class="line">	// ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这两个方法指向同一个函数，怎么会实现不同的功能呢，这就是this的力量。jQuery.extend时，this指的是jQuery；jQuery.fn.extend时，this指的是jQuery.fn即jQuery.prototype。<br>针对fn与jQuery其实是2个不同的对象：</p>
<ul>
<li>jQuery.extend调用的时候，this是指向jQuery对象的，所以这里扩展在jQuery上。把jQuery看成一个类的话，那么jQuery.extend就是在这个类上扩展了一个方法，直接$.functionname就可以直接用类来调用这个方法，即<em>给jQuery类本身添加方法</em>。</li>
<li>jQuery.fn.extend调用的时候，this指向fn对象，而jQuery.fn和jQuery.prototype指向同一对象，扩展fn就是扩展jQuery.prototype原型对象，就是类的实例化嘛，需要$(ele).functionname先实例化一个对象再来调用方法，即<em>给jQuery对象添加方法</em>。其实fn没有什么特别的意思，就只是jQuery.prototype的引用而已。</li>
</ul>
<h3 id="jQuery-extend的合并对象功能"><a href="#jQuery-extend的合并对象功能" class="headerlink" title="jQuery.extend的合并对象功能"></a>jQuery.extend的合并对象功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jQuery.extend([deep], target, object1, [objectN])</div><div class="line">// 合并对象到第一个对象</div></pre></td></tr></table></figure>
<p>第一种合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var object1 = &#123;</div><div class="line">	apple: 0,</div><div class="line">	banana: &#123;weight: 52, price: 100&#125;,</div><div class="line">	cherry: 97</div><div class="line">&#125;;</div><div class="line">var object2 = &#123;</div><div class="line">	banana: &#123;price: 200&#125;,</div><div class="line">	orange: 100</div><div class="line">&#125;;</div><div class="line">$.extend(object1, object2);</div><div class="line">// 将object1和object2合并到object1中了</div><div class="line">// object2值不变</div></pre></td></tr></table></figure></p>
<p>第二种合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var object1 = &#123;</div><div class="line">	apple: 0,</div><div class="line">	banana: &#123;weight: 52, price: 100&#125;,</div><div class="line">	cherry: 97</div><div class="line">&#125;;</div><div class="line">var object2 = &#123;</div><div class="line">	banana: &#123;price: 200&#125;,</div><div class="line">	orange: 100</div><div class="line">&#125;;</div><div class="line">object3 = $.extend(&#123;&#125;,object1, object2);</div><div class="line">// 将object1和object2合并到object3上了</div><div class="line">// object1和object2值均不变</div></pre></td></tr></table></figure></p>
<p>第三种–深度合并<br>深度合并和非深度合并的区别是，深度合并的对象中如果复杂属性值(比如数组、函数、json对象等)，合并以后，如果再修改合子并对象的属性值，合并结果对象的值不会改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;</div><div class="line">	a: &apos;a&apos;,</div><div class="line">	b: &apos;b&apos;</div><div class="line">&#125;;</div><div class="line">var obj2 = &#123;</div><div class="line">	c: &#123;cc: &apos;cc&apos;, ccc: &apos;ccc&apos;&#125;,</div><div class="line">	d: &apos;d&apos;</div><div class="line">&#125;;</div><div class="line">$.extend(true, obj1, obj2);</div><div class="line">// 合并以后obj1和obj2都合并到obj1上了</div><div class="line">obj2.c.cc = &apos;11&apos;;</div><div class="line">//现在改变合并子对象obj2的属性值，合并后的obj1的属性值不会改变的</div><div class="line">console.log(obj2.c.cc); // 11</div><div class="line">console.log(obj1.c.cc); // cc</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端开发规范]]></title>
      <url>http://yy709593266.github.io/blog/2016/06/17/20160617(%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83)/</url>
      <content type="html"><![CDATA[<p>为提高团队协作效率，便于后台人员添加功能及前端后期优化维护，特制订本文档。本文档如有不对或者不合适的地方请及时提出。<a id="more"></a></p>
<h3 id="HTML编码原则"><a href="#HTML编码原则" class="headerlink" title="HTML编码原则"></a>HTML编码原则</h3><h4 id="第一行统一使用HTML5标准"><a href="#第一行统一使用HTML5标准" class="headerlink" title="第一行统一使用HTML5标准"></a>第一行统一使用HTML5标准</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">  &lt;title&gt;my title&lt;/title&gt;</div><div class="line">  &lt;meta name=&quot;keywords&quot; content=&quot;xxxx, xxx, xxxxx&quot; /&gt;</div><div class="line">  &lt;meta name=&quot;description&quot; content=&quot;xxxxxxxxxxxxxxxxxxxx&quot; /&gt;</div></pre></td></tr></table></figure>
<h4 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 中文 --&gt;</div><div class="line">&lt;html lang=&quot;zh-Hans&quot;&gt;</div><div class="line">&lt;!-- 简体中文 --&gt;</div><div class="line">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</div><div class="line">&lt;!-- 繁体中文 --&gt;</div><div class="line">&lt;html lang=&quot;zh-cmn-Hant&quot;&gt;</div><div class="line">&lt;!-- English --&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div></pre></td></tr></table></figure>
<h4 id="meta的使用"><a href="#meta的使用" class="headerlink" title="meta的使用"></a>meta的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt; // 优先使用最新版本的IE 和 Chrome 内核</div><div class="line">&lt;meta chartset=&quot;utf-8&quot;&gt; // 网页显示字符集</div><div class="line">&lt;meta name=&quot;description&quot; content=&quot;这里填您网站的简介&quot;&gt; // 网站简介</div><div class="line">&lt;meta name=&quot;keywords&quot; content=&quot;关键字1,关键字2,关键字3,...&quot;&gt; // 搜索关键字</div><div class="line">&lt;link href=&quot;style/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; // 网页的CSS规范 </div><div class="line">&lt;title&gt;这里是网页标题&lt;title&gt; // 网页标题</div></pre></td></tr></table></figure>
<h4 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h4><ul>
<li>自闭和标签无需闭合(例如：<code>img</code> <code>input</code> <code>br</code> <code>hr</code>等)</li>
<li>可选的闭合标签需闭合(例如：’li’ ‘body’)</li>
<li>尽量减少标签数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/google.png&quot; alt=&quot;Google&quot;&gt;</div><div class="line">&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;</div><div class="line"></div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;Style&lt;/li&gt;</div><div class="line">  &lt;li&gt;Guide&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="网页制作字体"><a href="#网页制作字体" class="headerlink" title="网页制作字体"></a>网页制作字体</h4><ul>
<li>在设定字体样式时对于文字字号样式和行间距样式必须使用CSS样式表</li>
<li>在网页中中文应首选使用宋体，英文和数字首选verdana和arial两种字体。一般使用中文宋体的9pt和11pt或12px和14.7px，黑体字或者宋体字加粗时，一般选用11pt和14.7px的字号比较合适</li>
<li>为了最大程度的发挥浏览器自动排版的功能，在一段完整的文字中请尽量不要使用<code>&lt;br&gt;</code>来人工干预分段</li>
<li>网页中的空白应该尽量使用<code>text-indent</code>、<code>padding</code>、<code>margin</code>等以及透明的gif图片来实现</li>
<li>行距建议用百分比来定义，常用的两个行距值为120%和150%</li>
</ul>
<h4 id="网页制作链接"><a href="#网页制作链接" class="headerlink" title="网页制作链接"></a>网页制作链接</h4><ul>
<li>在浏览器中，我们点击空链接时，它会自动将当前页面重置到首端，从而影响用户正常的阅读内容，我们用代码<code>javascript:void(null)</code>代替原来的<code>#</code>标记</li>
</ul>
<h4 id="html文件命名"><a href="#html文件命名" class="headerlink" title="html文件命名"></a>html文件命名</h4><ul>
<li>各子页命名的原则首先应该以栏目名的英文翻译取单一单词为名称。例如：<blockquote>
<p>关于我们 \aboutus<br>信息反馈 \feedback<br>产品 \product</p>
</blockquote>
</li>
</ul>
<h4 id="html所有标签、属性、值均使用小写字母，且属性的值前后使用双引号，属性之间使用一个英文空格隔开"><a href="#html所有标签、属性、值均使用小写字母，且属性的值前后使用双引号，属性之间使用一个英文空格隔开" class="headerlink" title="html所有标签、属性、值均使用小写字母，且属性的值前后使用双引号，属性之间使用一个英文空格隔开"></a>html所有标签、属性、值均使用小写字母，且属性的值前后使用双引号，属性之间使用一个英文空格隔开</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; value=&quot;info&quot;&gt;</div></pre></td></tr></table></figure>
<h4 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h4><ul>
<li>id</li>
<li>class</li>
<li>name</li>
<li>data-xxx</li>
<li>src, for, type, href</li>
<li>aria-xxx, role<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;a id=&quot;...&quot; class=&quot;...&quot; data-modal=&quot;toggle&quot; href=&quot;###&quot;&gt;&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt;</div><div class="line"></div><div class="line">&lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="布尔值属性"><a href="#布尔值属性" class="headerlink" title="布尔值属性"></a>布尔值属性</h4><p>HTML5 规范中 <code>disabled</code>、<code>checked</code>、<code>selected</code>等属性不用设置值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; disabled&gt;</div><div class="line"></div><div class="line">&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked&gt;</div><div class="line"></div><div class="line">&lt;select&gt;</div><div class="line">  &lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<h4 id="标签嵌套必须合理正确，严禁在行内元素内嵌使用块级元素标签"><a href="#标签嵌套必须合理正确，严禁在行内元素内嵌使用块级元素标签" class="headerlink" title="标签嵌套必须合理正确，严禁在行内元素内嵌使用块级元素标签"></a>标签嵌套必须合理正确，严禁在行内元素内嵌使用块级元素标签</h4><ul>
<li>常见的块级元素有 :div、p、table、td、tr、ul、ol、li、fieldset、legen、form、 blockquote、h1-h6、dl、dt、dd …</li>
<li>常见的行内元素有:span、a、strong、 b、em、i、s、u、site…<h5 id="常见错误示例："><a href="#常见错误示例：" class="headerlink" title="常见错误示例："></a>常见错误示例：</h5></li>
<li>a标签、span标签内嵌套包含div、p等标签</li>
<li>在li标签、dt、dd、标签内直接包含div、h1-h6等块级元素在某些浏览器下也会出现兼容性问题，谨慎使用。</li>
</ul>
<h4 id="合理规划文档结构，去除不必要的-lt-div-gt-标签"><a href="#合理规划文档结构，去除不必要的-lt-div-gt-标签" class="headerlink" title="合理规划文档结构，去除不必要的&lt;div&gt;标签"></a>合理规划文档结构，去除不必要的<code>&lt;div&gt;</code>标签</h4><h4 id="先分析布局，划分框架，然后规划结构，最后编写代码"><a href="#先分析布局，划分框架，然后规划结构，最后编写代码" class="headerlink" title="先分析布局，划分框架，然后规划结构，最后编写代码"></a>先分析布局，划分框架，然后规划结构，最后编写代码</h4><h4 id="html标签语义化"><a href="#html标签语义化" class="headerlink" title="html标签语义化"></a>html标签语义化</h4><p>常见标签语义</p>
<blockquote>
<p><code>&lt;p&gt;</code>：段落<br><code>&lt;h1&gt;</code> <code>&lt;h2&gt;</code> <code>&lt;h3&gt;</code> …：标题<br><code>&lt;ul&gt;</code>：无序列表<br><code>&lt;ol&gt;</code>：有序列表<br><code>&lt;blockquote&gt;</code>：大段引用<br><code>&lt;cite&gt;</code>：一般引用<br><code>&lt;b&gt;</code>：为样式加粗而加粗<br><code>&lt;strong&gt;</code>：为强调内容而加粗<br><code>&lt;i&gt;</code>：为样式倾斜而倾斜<br><code>&lt;em&gt;</code>：为强调内容而倾斜<br><code>code</code>：代码标识<br><code>abbr</code>：缩写</p>
</blockquote>
<h4 id="代码缩进规范"><a href="#代码缩进规范" class="headerlink" title="代码缩进规范"></a>代码缩进规范</h4><ul>
<li>html代码的层级缩进为一个tab</li>
<li>跨行标签的开始标签和结束标签必须上下对齐</li>
<li>值为空的元素定义应该单独占用一行</li>
</ul>
<h4 id="前景图片编码原则"><a href="#前景图片编码原则" class="headerlink" title="前景图片编码原则"></a>前景图片编码原则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img alt=&quot;图片说明&quot; src=&quot;logo_header.png&quot; /&gt;</div></pre></td></tr></table></figure>
<ul>
<li>img标签必须闭合</li>
<li>所有图片必须添加alt属性值</li>
<li>图片的名称分为头尾两部分，用下划线隔开，头部分表示此图片的大类性质。例如：广告、标志、菜单、按钮等</li>
<li>放置在页面顶部的广告、装饰图案等长方形的图片取名：banner</li>
<li>标志性的图片取名为：logo</li>
<li>在页面上位置不固定并且带有链接的小图片我们取名为button</li>
<li>在页面上某一个位置连续出现，性质相同的链接栏目的图片我们取名为：menu</li>
<li>装饰用的图片我们取名：pic</li>
<li>不带链接表示标题的图片取名：title</li>
<li>鼠标感应效果图片命名规范为”图片名+_on/off”。例如：menu_on.gif menu_off.gif</li>
</ul>
<h4 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h4><ul>
<li>使用<code>&lt;!----&gt;</code>的方式添加注释</li>
<li>html文档中对于单独的模块或者超过50行的超长代码块做注释</li>
</ul>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><ul>
<li><code> </code> : &amp;nbsp</li>
<li>&lt; : &amp;lt</li>
<li>> : &amp;gt</li>
<li>￥ : &amp;yen</li>
<li>“ : &amp;quot</li>
<li>&amp; : &amp;amp</li>
<li>© : &amp;copy</li>
<li>® : &amp;reg</li>
<li>‘ : &amp;#39</li>
<li>™ : &amp;trade</li>
<li>× : &amp;times</li>
<li>÷ : &amp;divide</li>
</ul>
<h4 id="IE中HTML条件注释"><a href="#IE中HTML条件注释" class="headerlink" title="IE中HTML条件注释"></a>IE中HTML条件注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if IE 6]&gt;  IE6  &lt;![endif]--&gt; </div><div class="line">&lt;!--[if IE 7]&gt;  IE7  &lt;![endif]--&gt; </div><div class="line">&lt;!--[if lt IE 8]&gt;  小于IE8  &lt;![endif]--&gt; </div><div class="line">&lt;!--[if lte IE 8]&gt;  小于等于IE8  &lt;![endif]--&gt; </div><div class="line">&lt;!--[if gt IE 6]&gt;  大于IE6  &lt;![endif]--&gt; </div><div class="line">&lt;!--[if gte IE 6]&gt;  大于等于IE6  &lt;![endif]--&gt; </div><div class="line">&lt;!--[if !IE]&gt;  除IE外都可识别  &lt;![endif]--&gt; </div><div class="line">&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<h3 id="CSS编码原则"><a href="#CSS编码原则" class="headerlink" title="CSS编码原则"></a>CSS编码原则</h3><h4 id="外联方式"><a href="#外联方式" class="headerlink" title="外联方式"></a>外联方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/common.css&quot;&gt;</div></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>原则上，不允许在html上直接写样式</li>
<li>内外联方式的类型声明<code>type=&quot;text/css&quot;</code>都可以省略</li>
<li>link和style标签都应该放在head中</li>
<li>禁止在css文件内部采用@import方式引入其他css文件</li>
<li>如遇修改线上css文件内引用的背景图，需要在相应url后添加版本号，如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: url(images/sprite.png?v=20160616);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="id和class使用规范"><a href="#id和class使用规范" class="headerlink" title="id和class使用规范"></a>id和class使用规范</h4><ul>
<li>class应以功能或内容命名，不以表现形式命名</li>
<li>class和id单词字母小写，多个单词组成时，采用中划线<code>-</code>分隔</li>
<li>使用唯一的id作为JavaScript hook，同时避免创建无样式信息的class</li>
<li>id是唯一的并是父级的，class是可以重复的并是子级的，所以id仅使用在大的模块上，class可用在重复使用率高及字级中</li>
<li>规避class与id重名</li>
</ul>
<h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><ul>
<li>规则命名采用小写加中划线<code>-</code>的方式，不允许使用大写字母或下划线<code>_</code></li>
<li>命名推荐采用更简明有语义单词进行组合，应尽量避免使用中文拼音，尤其是首字母简拼</li>
<li>DOM一律不准使用<code>id</code>挂载css，且避免id和class重名</li>
<li>规则名称中不应该包含颜色(red/blue)、大小(width/height)等信息，应该使用其意义或功能命名，而不是样式显示结果</li>
<li>禁止类名中出现<code>ad</code>字样，防止被广告插件屏蔽</li>
<li>取父级元素id/class命名部分命名<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;main&quot;&gt;</div><div class="line">    &lt;div class=&quot;main_firstnav&quot;&gt;&lt;div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h4><ul>
<li><p>禁止直接为html的tag添加css样式，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div &#123;color: red;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>尽量避免使用<code>!important</code></p>
</li>
<li>如果可以，颜色尽量用三位字符表示</li>
<li>0后面不需要单位，0.8px可以略写成.8px</li>
<li><p>如果没有边框时，不要写成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border: 0;</div></pre></td></tr></table></figure>
<p>  应该写成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border: 0 none;</div></pre></td></tr></table></figure>
</li>
<li><p>background、font等可以缩写的属性，尽量使用缩写形式，合并margin、padding、border的值时，尽量使用缩写</p>
</li>
</ul>
<h4 id="规范属性书写顺序"><a href="#规范属性书写顺序" class="headerlink" title="规范属性书写顺序"></a>规范属性书写顺序</h4><ul>
<li>显示、位置属性(Positioning)<br>display, position, left, top, float, clear, list-style</li>
<li>自身属性(Box model)<br>width, height, margin, padding, border</li>
<li>背景、行高(Typographic)<br>background, line-height</li>
<li>文本属性(Visual)<br>color, font, text-decroration, text-align, white-space, vertical-align, word-wrap, word-break</li>
<li>其他(Other)<br>cursor, z-index, zoom, opacity</li>
<li>css3<br>transform, transition, animation, box-shadow, border-radius</li>
<li>hack<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">.declaration-order &#123;</div><div class="line">  /* Positioning */</div><div class="line">  position: absolute;</div><div class="line">  top: 0;</div><div class="line">  right: 0;</div><div class="line">  bottom: 0;</div><div class="line">  left: 0;</div><div class="line">  z-index: 100;</div><div class="line"></div><div class="line">  /* Box model */</div><div class="line">  display: block;</div><div class="line">  box-sizing: border-box;</div><div class="line">  width: 100px;</div><div class="line">  height: 100px;</div><div class="line">  padding: 10px;</div><div class="line">  border: 1px solid #e5e5e5;</div><div class="line">  border-radius: 3px;</div><div class="line">  margin: 10px;</div><div class="line">  float: right;</div><div class="line">  overflow: hidden;</div><div class="line"></div><div class="line">  /* Typographic */</div><div class="line">  font: normal 13px &quot;Helvetica Neue&quot;, sans-serif;</div><div class="line">  line-height: 1.5;</div><div class="line">  text-align: center;</div><div class="line"></div><div class="line">  /* Visual */</div><div class="line">  background-color: #f5f5f5;</div><div class="line">  color: #fff;</div><div class="line">  opacity: .8;</div><div class="line"></div><div class="line">  /* Other */</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="排版规范"><a href="#排版规范" class="headerlink" title="排版规范"></a>排版规范</h4><h5 id="单行书写"><a href="#单行书写" class="headerlink" title="单行书写"></a>单行书写</h5><ul>
<li>多个selector共用一个样式集时，多个selector之间作为分隔标识的逗号后需要一个空格</li>
<li>每一个规则的大括号<code>{</code>前后都添加一个空格</li>
<li>属性名与值得冒号前不加空格，冒号之后加空格</li>
<li>每一个属性值后必须添加分号，并且分号后空格<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">selector, selector2, selector3 &#123; display: block; width: 100px; border: 1px solid #F00; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="多行书写"><a href="#多行书写" class="headerlink" title="多行书写"></a>多行书写</h5><ul>
<li>多个selector共用一个样式集时，多个selector单独成行</li>
<li>每一个规则的大括号<code>{</code>前添加空格</li>
<li>属性名与值得冒号前不加空格，冒号之后加空格</li>
<li>每一个属性值后必须添加分号<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">selector,</div><div class="line">selector2,</div><div class="line">selector3 &#123;</div><div class="line">	dispaly: block;</div><div class="line">	width: 100px;</div><div class="line">	border: 1px solid #F00;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="链接的样式顺序"><a href="#链接的样式顺序" class="headerlink" title="链接的样式顺序"></a>链接的样式顺序</h4><p><code>a:link</code>-&gt;<code>a:visited</code>-&gt;<code>a:hover</code>-&gt;<code>a:active</code></p>
<h4 id="正确使用display属性"><a href="#正确使用display属性" class="headerlink" title="正确使用display属性"></a>正确使用<code>display</code>属性</h4><p><code>display</code>属性会影响页面的渲染，请合理使用</p>
<ul>
<li><code>display: inline</code>后不应该再使用 <code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>以及<code>float</code>；</li>
<li><code>display: inline-block</code>后不应该再使用<code>float</code>；</li>
<li><code>display: block</code>后不应该再使用<code>vertical-align</code>；</li>
<li><code>display: table-*</code>后不应该再使用<code>margin</code>或者<code>float</code>；</li>
</ul>
<h4 id="不要使用-import"><a href="#不要使用-import" class="headerlink" title="不要使用@import"></a>不要使用<code>@import</code></h4><p>与<code>&lt;link&gt;</code>相比，<code>@import</code>要慢很多，不光增加额外的请求数，还会导致不可预料的问题，替代办法：</p>
<ul>
<li>使用多个元素；</li>
<li>通过Sass或Less类似的CSS预处理器将多个CSS文件编译为一个文件</li>
<li>其他CSS文件合并工具</li>
</ul>
<h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.element &#123; ... &#125;</div><div class="line">.element-avatar &#123; ... &#125;</div><div class="line">.element-selected &#123; ... &#125;</div><div class="line"></div><div class="line">@media (max-width: 768px) &#123;</div><div class="line">  .element &#123; ...&#125;</div><div class="line">  .element-avatar &#123; ... &#125;</div><div class="line">  .element-selected &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>在可以不使用引号的情况下尽量不使用引号</li>
<li>使用单引号，不建议使用双引号</li>
<li>开发阶段的css 文件（非单条样式集），为了能够对开发人员友好，不要求压缩为单行。发布生产的css 文件，外联文件或内联片段都需要压缩为单行，且删除注释与非属性值内空格。</li>
</ul>
<h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul>
<li>选择器应该在满足功能的基础上尽量简洁，减少嵌套选择器的查询消耗</li>
<li><p>在保持代码解耦的前提下，尽量合并重复的样式，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">h1&#123;color:red;&#125;</div><div class="line">p&#123;color:red;&#125;</div></pre></td></tr></table></figure>
<p>  应该写成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">color,p&#123;color:red&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>css背景图要使用sprite技术，可按照相关度（是否模块、页面等）进行合并，并存储为web所用格式。图片优先使用png8格式保存，并适当压缩体积。在存在透明通道的情况下可使用png24图片，在色值较多的情况下，可使用jpg格式保存</p>
</li>
<li><p>充分利用html自身属性及样式继承原理减少代码量。例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">	&lt;li&gt;这里是标题&lt;span&gt;2016-8-7&lt;/span&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>  中定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ul li&#123; position: relative; &#125;</div><div class="line">ul li span&#123;</div><div class="line">	position: absolute;</div><div class="line">	right: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>即可实现日期居右显示</p>
<h4 id="提升CSS选择器性能"><a href="#提升CSS选择器性能" class="headerlink" title="提升CSS选择器性能"></a>提升CSS选择器性能</h4><p>CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免使用消耗更多匹配时间的选择器。而在这之前我们需要了解CSS选择器匹配的机制，如子选择器规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#header &gt; a &#123;font-weight:blod;&#125;</div></pre></td></tr></table></figure></p>
<p>CSS选择器是从右到左进行规则匹配。了解这个机制后，例子中看似高效的选择器在实际中的匹配开销是很高的，浏览器必须遍历页面中所有的a元素并且确定其父元素的id是否为header。<br>如果把例子的子选择器改为后代选择器则会开销更多，在遍历页面中所有a元素后还需向其上级遍历直到根节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#header a &#123; font-weight: bold;&#125;</div></pre></td></tr></table></figure></p>
<p>理解了CSS选择器从右到左匹配的机制后，明白只要当前选择符的左边还有其他选择符，样式系统就会继续向左移动，直到找到和规则匹配的选择符，或者因为不匹配而退出</p>
<ul>
<li><p>避免使用通用选择器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.content * &#123; color: red; &#125;</div></pre></td></tr></table></figure>
<p>  浏览器匹配文档中所有的元素后分别向上逐级匹配class为content的元素，直到文档的根节点。因此其匹配开销是非常大的，所以应避免使用关键选择器是通配选择器的情况</p>
</li>
<li><p>避免使用标签或class选择器限制id选择器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* Not recommended */</div><div class="line">button#backButton &#123;…&#125;</div><div class="line">/* Recommended */</div><div class="line">#newMenuIcon &#123;…&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>避免使用标签限制class选择器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* Not recommended */</div><div class="line">treecell.indented &#123;…&#125;</div><div class="line">/* Recommended */</div><div class="line">.treecell-indented &#123;…&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>避免使用多层标签选择器，使用class选择器替换，减少css查找</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* Not recommended */</div><div class="line">treeitem[mailfolder=&quot;true&quot;] &gt; treerow &gt; treecell &#123;…&#125;</div><div class="line">/* Recommended */</div><div class="line">.treecell-mailfolder &#123;…&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>避免使用子选择器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/* Not recommended */</div><div class="line">treehead treerow treecell &#123;…&#125;</div><div class="line">/* Recommended */</div><div class="line">treehead &gt; treerow &gt; treecell &#123;…&#125;</div><div class="line">/* Much to recommended */</div><div class="line">.treecell-header &#123;…&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用继承</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* Not recommended */</div><div class="line">#bookmarkMenuItem &gt; .menu-left &#123; list-style-image: url(blah) &#125;</div><div class="line">/* Recommended */</div><div class="line">#bookmarkMenuItem &#123; list-style-image: url(blah) &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="常用的CSS命名规则"><a href="#常用的CSS命名规则" class="headerlink" title="常用的CSS命名规则"></a>常用的CSS命名规则</h4><h5 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h5><blockquote>
<p>容器: container<br>页头：header<br>内容：content/container<br>页面主体：main<br>页尾：footer<br>导航：nav<br>侧栏：sidebar<br>栏目：column<br>页面外围控制整体佈局宽度：wrapper<br>左右中：left right center</p>
</blockquote>
<h5 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h5><blockquote>
<p>导航：nav<br>主导航：mainnav<br>子导航：subnav<br>顶导航：topnav<br>边导航：sidebar<br>左导航：leftsidebar<br>右导航：rightsidebar<br>菜单：menu<br>子菜单：submenu<br>标题: title<br>摘要: summary</p>
</blockquote>
<h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><blockquote>
<p>标志：logo<br>广告：banner<br>登陆：login<br>登录条：loginbar<br>注册：register<br>搜索：search<br>功能区：shop<br>标题：title<br>加入：joinus<br>状态：status<br>按钮：btn<br>滚动：scroll<br>标籤页：tab<br>文章列表：list<br>提示信息：msg<br>当前的: current<br>小技巧：tips<br>图标: icon<br>注释：note<br>指南：guild<br>服务：service<br>热点：hot<br>新闻：news<br>下载：download<br>投票：vote<br>合作伙伴：partner<br>友情链接：link<br>版权：copyright</p>
</blockquote>
<h3 id="JavaScript编码规范"><a href="#JavaScript编码规范" class="headerlink" title="JavaScript编码规范"></a>JavaScript编码规范</h3><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><ul>
<li>命名要有意义，可读性强</li>
<li>声明变量必须加上<code>var</code>关键字，严格控制作用域</li>
<li>私有变量名用下划线<code>_</code>开头</li>
<li>参数大于3个时，应以对象形式作为参数集传递</li>
<li>一般变量名用下划线分隔方式或者驼峰方式</li>
<li><p>驼峰方式命名的变量第一个字母小写，剩下的每个有意义的单词的首字母大写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var class_name = &quot;sunny&quot;;</div><div class="line">var className = &quot;sunny&quot;;</div></pre></td></tr></table></figure>
</li>
<li><p>常量必须使用大写字符，并用下划线分隔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var ID_USER;</div></pre></td></tr></table></figure>
</li>
<li><p>构造函数必须使用首字大写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function Class()&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>boolean类型的变量使用is或has开头</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var is Ready = false;</div><div class="line">var hasMoreCommands = false;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="书写规范-1"><a href="#书写规范-1" class="headerlink" title="书写规范"></a>书写规范</h4><ul>
<li><p>即使只有一条语句也最好不要省略<code>{}</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (boolean) &#123;</div><div class="line">	return;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>{}</code>代替<code>new Object()</code>，使用<code>[]</code>代替<code>new Array()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var arr = [], obj = &#123;&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>每个语句结束必须使用分号</p>
</li>
<li>尽量不要让每行超过120字符<br><em>超长的不可分割的代码例外，比如复杂的正则表达式</em><br><em>运算符处换行时，运算符必须在新行的行首</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (user.isAuthenticated()</div><div class="line">	&amp;&amp; user.isInRole(&apos;admin&apos;)</div><div class="line">	&amp;&amp; user.hasAuthority(&apos;add-admin&apos;)</div><div class="line">	|| user.hasAuthority(&apos;delete-admin&apos;)</div><div class="line">)&#123;</div><div class="line">	// code</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="接口命名规范"><a href="#接口命名规范" class="headerlink" title="接口命名规范"></a>接口命名规范</h4><ul>
<li>可读性强，见名晓义</li>
<li>尽量不与jQuery社区已有的习惯冲突</li>
<li>尽量写全，不用缩写，除非是下面列表中约定的：<blockquote>
<p><code>options</code>：表示选项，与 <code>jQuery</code> 社区保持一致，不要用 <code>config</code>, <code>opts</code> 等<br><code>active</code>：表示当前，不要用 <code>current</code> 等<br><code>index</code>：表示索引，不要用 <code>idx</code> 等<br><code>trigger</code>：触点元素<br><code>triggerType</code>：表示触发类型、方式<br><code>context</code>：表示传入的 <code>this</code> 对象<br><code>object</code>：推荐写全，不推荐简写为 <code>o</code>, <code>obj</code> 等<br><code>element</code>：推荐写全，不推荐简写为 <code>el</code>, <code>elem</code> 等<br><code>length</code>：不要写成 <code>len</code>, <code>l</code><br><code>prev</code>：<code>previous</code> 的缩写<br><code>next</code>：next 下一个<br><code>constructor</code>：不能写成 <code>ctor</code><br><code>easing</code>：示动画平滑函数<br><code>min</code>：<code>minimize</code> 的缩写<br><code>max</code>：<code>maximize</code> 的缩写<br><code>DOM</code>：不要写成 <code>dom</code>, <code>Dom</code><br><code>.hbs</code>：使用 <code>hbs</code> 后缀表示模版<br><code>btn</code>：<code>button</code> 的缩写<br><code>link</code>：超链接<br><code>title</code>：主要文本<br><code>img</code>：图片路径（img标签src属性）<br><code>dataset</code>：html5 <code>data-xxx</code> 数据接口<br><code>theme</code>：主题<br><code>className</code>：类名<br><code>classNameSpace</code>：class 命名空间</p>
</blockquote>
</li>
</ul>
<h4 id="空格、缩进、空行"><a href="#空格、缩进、空行" class="headerlink" title="空格、缩进、空行"></a>空格、缩进、空行</h4><ul>
<li>语句中的必要空格和缩进，缩进的单位为四个空格</li>
<li><p><code>=</code>前后需要跟空格，建议数值操作符(如：<code>+</code>/<code>-</code>/<code>*</code>/<code>%</code>)两边留空</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var name = &quot;Tom&quot;;</div></pre></td></tr></table></figure>
</li>
<li><p>for循环条件中，分号后留一空格</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for( var i = 0; i &lt; 10; i++)&#123;</div><div class="line">	// dosomething</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>变量声明语句，数组值，对象值及函数参数中的逗号后留一空格</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = 0, b = 1, c = 2;</div><div class="line">var arr = [1, 2, 3];</div><div class="line">var obj = &#123;a: 1, b: 2, c: 3&#125;;</div><div class="line">function(a, b, c)&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>空行不要有空格，行尾不要有空格</p>
</li>
<li>逗号和冒号后一定要跟空格，点号前后不要出现空格</li>
<li>空对象和数组不要填入空格</li>
<li>不要吝啬空行，尽量使用空行将逻辑相关的代码块分割开，以提高程序的可读性</li>
<li>合理的格式化和缩进<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    getName: &quot;1&quot;,</div><div class="line">    setName: &quot;0&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (success) &#123;</div><div class="line">    doSomething(1);</div><div class="line">&#125; else if (fail) &#123;</div><div class="line">    doSomething(2);</div><div class="line">&#125; else &#123;</div><div class="line">    doSomething(3);</div><div class="line">&#125;</div><div class="line"></div><div class="line">switch (variable) &#123;</div><div class="line">    case &apos;1&apos;:</div><div class="line">        // do...</div><div class="line">        break;</div><div class="line">    case &apos;2&apos;:</div><div class="line">        // do...</div><div class="line">        break;</div><div class="line">    default:</div><div class="line">        // do...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul>
<li><p>建议转换成string时，使用<code>+ &#39;&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// good</div><div class="line">num + &apos;&apos;;</div><div class="line"></div><div class="line">// bad</div><div class="line">new String(num);</div><div class="line">num.toString();</div><div class="line">String(num);</div></pre></td></tr></table></figure>
</li>
<li><p>建议转换成number时，使用<code>+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// good</div><div class="line">+str;</div><div class="line"></div><div class="line">// bad</div><div class="line">Number(str);</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>parseInt</code>时，建议加上进制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parseInt(&quot;1&quot;, 10);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="True和False布尔值"><a href="#True和False布尔值" class="headerlink" title="True和False布尔值"></a>True和False布尔值</h4><ul>
<li>下列值在布尔表达式中结果为<code>false</code><blockquote>
<p>null<br>undefined<br>‘’ // 空字符串<br>0 //数字</p>
</blockquote>
</li>
<li>而下面的为<code>true</code><blockquote>
<p>‘0’ // 字符串<br>[] //空数组<br>{} // 空对象</p>
</blockquote>
</li>
<li>还有一些难以区分的表达式，以下表达式结果为<code>true</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Boolean(&apos;0&apos;) == true</div><div class="line">&apos;0&apos; != true</div><div class="line">0 != null</div><div class="line">0 == []</div><div class="line">0 == false</div><div class="line"></div><div class="line">Boolean(null) == false</div><div class="line">null != true</div><div class="line">null != false</div><div class="line"></div><div class="line">Boolean(undefined) == false</div><div class="line">undefined != true</div><div class="line">undefined != false</div><div class="line"></div><div class="line">Boolean([]) == true</div><div class="line">[] != true</div><div class="line">[] == false</div><div class="line"></div><div class="line">Boolean(&#123;&#125;) == true</div><div class="line">&#123;&#125; != true</div><div class="line">&#123;&#125; != false</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="不要在Array上使用for-in"><a href="#不要在Array上使用for-in" class="headerlink" title="不要在Array上使用for in"></a>不要在Array上使用for in</h4><p><code>for-in</code>循环只用于<code>object/map/hash</code>的遍历，对<code>Array</code>用<code>for-in</code>循环有时会出错，因为它不是从<code>0</code>到<code>length - 1</code>进行遍历，而是所有出现在对象及其原型链的键值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// Not recommended</div><div class="line">function printArray(arr) &#123;</div><div class="line">  for (var key in arr) &#123;</div><div class="line">    print(arr[key]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">printArray([0,1,2,3]);  // This works.</div><div class="line"></div><div class="line">var a = new Array(10);</div><div class="line">printArray(a);  // This is wrong.</div><div class="line"></div><div class="line">a = document.getElementsByTagName(&apos;*&apos;);</div><div class="line">printArray(a);  // This is wrong.</div><div class="line"></div><div class="line">// Recommended</div><div class="line">function printArray(arr) &#123;</div><div class="line">  var l = arr.length;</div><div class="line">  for (var i = 0; i &lt; l; i++) &#123;</div><div class="line">    print(arr[i]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="二元和三元操作符"><a href="#二元和三元操作符" class="headerlink" title="二元和三元操作符"></a>二元和三元操作符</h4><p>操作符始终写在前一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var x = a ? b : c;</div><div class="line"></div><div class="line">var y = a ?</div><div class="line">    longButSimpleOperandB : longButSimpleOperandC;</div><div class="line"></div><div class="line">var z = a ?</div><div class="line">        moreComplicatedB :</div><div class="line">        moreComplicatedC;</div></pre></td></tr></table></figure></p>
<h4 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h4><p>三元操作符用于替代<code>if</code>条件判断语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// Not recommended</div><div class="line">if (val != 0) &#123;</div><div class="line">  return foo();</div><div class="line">&#125; else &#123;</div><div class="line">  return bar();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Recommended</div><div class="line">return val ? foo() : bar();</div></pre></td></tr></table></figure></p>
<h4 id="amp-amp-和"><a href="#amp-amp-和" class="headerlink" title="&amp;&amp;和||"></a>&amp;&amp;和||</h4><p>二元布尔操作符是可短路的，只有在必要时才会计算到最后一项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// Not recommended</div><div class="line">function foo(opt_win) &#123;</div><div class="line">  var win;</div><div class="line">  if (opt_win) &#123;</div><div class="line">    win = opt_win;</div><div class="line">  &#125; else &#123;</div><div class="line">    win = window;</div><div class="line">  &#125;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">// Recommended</div><div class="line">function foo(opt_win) &#123;</div><div class="line">  var win = opt_win || window;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Not recommended</div><div class="line">if (node) &#123;</div><div class="line">  if (node.kids) &#123;</div><div class="line">    if (node.kids[index]) &#123;</div><div class="line">      foo(node.kids[index]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// Recommended</div><div class="line">var kid = node &amp;&amp; node.kids &amp;&amp; node.kids[index];</div><div class="line">if (kid) &#123;</div><div class="line">  foo(kid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="jQuery规范"><a href="#jQuery规范" class="headerlink" title="jQuery规范"></a>jQuery规范</h4><p>建议使用最新版本的jQuery，版本越新，性能越好</p>
<h5 id="jQuery变量"><a href="#jQuery变量" class="headerlink" title="jQuery变量"></a>jQuery变量</h5><ul>
<li>存放jQuery对象的变量以<code>$</code>开头</li>
<li>将jQuery选择器返回的对象缓存到本地变量中复用</li>
<li>使用驼峰式命名变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var $myDiv = $(&quot;#myDiv&quot;);</div><div class="line">$myDiv.click(function()&#123;...&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h5><ul>
<li>尽可能的使用 ID 选择器，因为它会调用浏览器原生方法<code>document.getElementById</code>查找元素。当然直接使用原生<code>document.getElementById</code>方法性能会更好</li>
<li>在父元素中选择子元素使用<code>.find()</code>方法性能会更好，因为ID选择器没有使用到Sizzle选择器引擎来查找元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Not recommended</div><div class="line">var $productIds = $(&quot;#products .class&quot;);</div><div class="line"></div><div class="line">// Recommended</div><div class="line">var $productIds = $(&quot;#products&quot;).find(&quot;.class&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h5><ul>
<li>当要操作DOM元素的时候，尽量将其分离节点，操作结束后，再插入节点</li>
<li>使用字符串连接使用<code>array.join</code>要比<code>.append()</code>性能更好<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// Not recommended</div><div class="line">var $myList = $(&quot;#list&quot;);</div><div class="line">for(var i = 0; i &lt; 10000; i++)&#123;</div><div class="line">    $myList.append(&quot;&lt;li&gt;&quot;+i+&quot;&lt;/li&gt;&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Recommended</div><div class="line">var $myList = $(&quot;#list&quot;);</div><div class="line">var list = &quot;&quot;;</div><div class="line">for(var i = 0; i &lt; 10000; i++)&#123;</div><div class="line">    list += &quot;&lt;li&gt;&quot;+i+&quot;&lt;/li&gt;&quot;;</div><div class="line">&#125;</div><div class="line">$myList.html(list);</div><div class="line"></div><div class="line">// Much to recommended</div><div class="line">var array = [];</div><div class="line">for(var i = 0; i &lt; 10000; i++)&#123;</div><div class="line">    array[i] = &quot;&lt;li&gt;&quot;+i+&quot;&lt;/li&gt;&quot;;</div><div class="line">&#125;</div><div class="line">$myList.html(array.join(&apos;&apos;));</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><ul>
<li>如果需要，对事件使用自定义的<code>namespace</code>，这样容易解绑特定的事件，而不会影响到此DOM元素的其他事件监听</li>
<li>对Ajax加载的DOM元素绑定事件时尽量使用事件委托，事件委托允许在父元素绑定事件，子代元素可以响应事件，也包括Ajax加载后添加的子代元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Not recommended</div><div class="line">$(&quot;#list a&quot;).on(&quot;click&quot;, myClickHandler);</div><div class="line"></div><div class="line">// Recommended</div><div class="line">$(&quot;#list&quot;).on(&quot;click&quot;, &quot;a&quot;, myClickHandler);</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="链式写法"><a href="#链式写法" class="headerlink" title="链式写法"></a>链式写法</h5><ul>
<li>尽量使用链式写法而不是用变量缓存或者多次调用选择器的方法</li>
<li>当链式写法超过三次或者因为事件绑定变得复杂后，使用换行和缩进保持代码可读性<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;#myDiv&quot;).addClass(&quot;error&quot;).show();</div><div class="line">$(&quot;#myLink&quot;)</div><div class="line">  .addClass(&quot;bold&quot;)</div><div class="line">  .on(&quot;click&quot;, myClickHandler)</div><div class="line">  .on(&quot;mouseover&quot;, myMouseOverHandler)</div><div class="line">  .show();</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="性能优化-1"><a href="#性能优化-1" class="headerlink" title="性能优化"></a>性能优化</h4><h5 id="避免不必要的DOM操作"><a href="#避免不必要的DOM操作" class="headerlink" title="避免不必要的DOM操作"></a>避免不必要的DOM操作</h5><p>浏览器遍历 DOM 元素的代价是昂贵的。最简单优化DOM树查询的方案是，当一个元素出现多次时，将它保存在一个变量中，就避免多次查询 DOM 树了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Not recommended</div><div class="line">for (var i = 0; i &lt; 100; i++) &#123;</div><div class="line">  document.getElementById(&quot;myList&quot;).innerHTML += &quot;&lt;span&gt;&quot; + i + &quot;&lt;/span&gt;&quot;;</div><div class="line">&#125;</div><div class="line">// Recommended</div><div class="line">var myList = &quot;&quot;;</div><div class="line">var myListHTML = document.getElementById(&quot;myList&quot;).innerHTML;</div><div class="line"></div><div class="line">for (var i = 0; i &lt; 100; i++) &#123;</div><div class="line">  myList += &quot;&lt;span&gt;&quot; + i + &quot;&lt;/span&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myListHTML = myList;</div></pre></td></tr></table></figure></p>
<h5 id="缓存数组长度"><a href="#缓存数组长度" class="headerlink" title="缓存数组长度"></a>缓存数组长度</h5><p>循环无疑是和JavaScript性能非常相关的一部分，通过存储数组的长度，可以有效避免每次循环重新计算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var arr = new Array(1000),</div><div class="line">    len, i;</div><div class="line">// Recommended - size is calculated only 1 time and then stored</div><div class="line">for (i = 0, len = arr.length; i &lt; len; i++) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// Not recommended - size needs to be recalculated 1000 times</div><div class="line">for (i = 0; i &lt; arr.length; i++) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="异步加载第三方内容"><a href="#异步加载第三方内容" class="headerlink" title="异步加载第三方内容"></a>异步加载第三方内容</h5><p>当你无法保证嵌入第三发内容可以正常工作的时候，你需要考虑用异步加载这些代码，以免阻塞整个页面加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(function() &#123;</div><div class="line"></div><div class="line">    var script,</div><div class="line">        scripts = document.getElementsByTagName(&apos;script&apos;)[0];</div><div class="line"></div><div class="line">    function load(url) &#123;</div><div class="line">      script = document.createElement(&apos;script&apos;);</div><div class="line">      script.async = true;</div><div class="line">      script.src = url;</div><div class="line">      scripts.parentNode.insertBefore(script, scripts);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    load(&apos;//apis.google.com/js/plusone.js&apos;);</div><div class="line">    load(&apos;//platform.twitter.com/widgets.js&apos;);</div><div class="line">    load(&apos;//s.widgetsite.com/widget.js&apos;);</div><div class="line"></div><div class="line">&#125;());</div></pre></td></tr></table></figure></p>
<h5 id="避免使用jQuery实现动画"><a href="#避免使用jQuery实现动画" class="headerlink" title="避免使用jQuery实现动画"></a>避免使用jQuery实现动画</h5><ul>
<li>禁止使用<code>slideUp/Down()</code> <code>fadeIn/Out()</code>等方法</li>
<li>尽量不使用<code>animate()</code>方法</li>
</ul>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul>
<li>如无必要，勿增注释</li>
<li><p>如有必要，尽量详尽</p>
<h5 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//名称</div><div class="line">var name = 0;</div></pre></td></tr></table></figure>
<h5 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h5><p>使用多个单行注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// code</div><div class="line">// code</div><div class="line">// code</div></pre></td></tr></table></figure>
<h5 id="函数-方法注释"><a href="#函数-方法注释" class="headerlink" title="函数/方法注释"></a>函数/方法注释</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 函数描述</div><div class="line"> *</div><div class="line"> * @param &#123;string&#125; p1 参数1的说明</div><div class="line"> * @param &#123;string&#125; p2 参数2的说明，比较长</div><div class="line"> *     那就换行了.</div><div class="line"> * @param &#123;number=&#125; p3 参数3的说明（可选）</div><div class="line"> * @return &#123;Object&#125; 返回值描述</div><div class="line"> */</div><div class="line">function foo(p1, p2, p3) &#123;</div><div class="line">    var p3 = p3 || 10;</div><div class="line">    return &#123;</div><div class="line">        p1: p1,</div><div class="line">        p2: p2,</div><div class="line">        p3: p3</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>sublime中安装<a href="https://packagecontrol.io/packages/DocBlockr" target="_blank" rel="external">DocBlock</a>插件，方便注释编写</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HEXO搭建个人博客]]></title>
      <url>http://yy709593266.github.io/blog/2016/06/11/20160611-start/</url>
      <content type="html"><![CDATA[<p>第一次使用hexo搭建个人博客，记录下搭建全过程。 <a id="more"></a></p>
<p>1、github上新建仓库blog；</p>
<p>2、安装hexo<br>首先要安装node环境，以及git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo -g</div></pre></td></tr></table></figure></p>
<p>3、新建本地博客文件夹<br>hexo init filename<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init &apos;blog&apos;</div></pre></td></tr></table></figure></p>
<p>生成的文件夹中的source文件夹用来存放博客正文内容</p>
<blockquote>
<p>source</p>
</blockquote>
<p>4、创建新博客(文章)<br>找到source文件夹，在该文件夹下的_posts文件夹下创建博客名为start的博客<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &apos;start&apos;</div></pre></td></tr></table></figure></p>
<p>5、更换主题(可选)：<br>github上clone下nexT主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone nexT&apos;url</div></pre></td></tr></table></figure></p>
<p>注意将主题clone到theme文件夹中；</p>
<p>6、主题配置: <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br>包括：标签页，分类，关于等…</p>
<p>7、站点配置中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<p>8、发布本地博客预览<br>hexo clean<br>hexo g：generator将md文件转换成html文件<br>hexo server: 启动本地服务<br>浏览器中输入localhost:4000预览</p>
<p>9、发布远程博客配置(这是我的)<br>站点配置文件中添加配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/yy709593266/yy709593266.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>10、发布<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>11、访问个人博客网站：<a href="http://yy709593266.github.io/">http://yy709593266.github.io/</a></p>
<p>附：具体操作参考文档<a href="http://www.kancloud.cn/wizardforcel/hexo-doc/101374" target="_blank" rel="external">hexo中文文档</a></p>
<p>🙏：感谢<a href="http://jiaochunxiao.github.io/" target="_blank" rel="external">大神</a>对我的支持和帮助。棒棒哒。。。哈哈哈</p>
]]></content>
    </entry>
    
  
  
</search>
